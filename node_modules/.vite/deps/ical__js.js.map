{
  "version": 3,
  "sources": ["../../ical.js/dist/ical.js"],
  "sourcesContent": ["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * Represents the BINARY value type, which contains extra methods for encoding and decoding.\n *\n * @memberof ICAL\n */\nclass Binary {\n  /**\n   * Creates a binary value from the given string.\n   *\n   * @param {String} aString        The binary value string\n   * @return {Binary}               The binary value instance\n   */\n  static fromString(aString) {\n    return new Binary(aString);\n  }\n\n  /**\n   * Creates a new ICAL.Binary instance\n   *\n   * @param {String} aValue     The binary data for this value\n   */\n  constructor(aValue) {\n    this.value = aValue;\n  }\n\n  /**\n   * The type name, to be used in the jCal object.\n   * @default \"binary\"\n   * @constant\n   */\n  icaltype = \"binary\";\n\n  /**\n   * Base64 decode the current value\n   *\n   * @return {String}         The base64-decoded value\n   */\n  decodeValue() {\n    return this._b64_decode(this.value);\n  }\n\n  /**\n   * Encodes the passed parameter with base64 and sets the internal\n   * value to the result.\n   *\n   * @param {String} aValue      The raw binary value to encode\n   */\n  setEncodedValue(aValue) {\n    this.value = this._b64_encode(aValue);\n  }\n\n  _b64_encode(data) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Tyler Akins (http://rumkin.com)\n    // +   improved by: Bayron Guevara\n    // +   improved by: Thunder.m\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   bugfixed by: Pellentesque Malesuada\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: Rafa≈Ç Kukawski (http://kukawski.pl)\n    // *     example 1: base64_encode('Kevin van Zonneveld');\n    // *     returns 1: 'S2V2aW4gdmFuIFpvbm5ldmVsZA=='\n    // mozilla has this native\n    // - but breaks in 2.0.0.12!\n    //if (typeof this.window['atob'] == 'function') {\n    //    return atob(data);\n    //}\n    let b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" +\n              \"abcdefghijklmnopqrstuvwxyz0123456789+/=\";\n    let o1, o2, o3, h1, h2, h3, h4, bits, i = 0,\n      ac = 0,\n      enc = \"\",\n      tmp_arr = [];\n\n    if (!data) {\n      return data;\n    }\n\n    do { // pack three octets into four hexets\n      o1 = data.charCodeAt(i++);\n      o2 = data.charCodeAt(i++);\n      o3 = data.charCodeAt(i++);\n\n      bits = o1 << 16 | o2 << 8 | o3;\n\n      h1 = bits >> 18 & 0x3f;\n      h2 = bits >> 12 & 0x3f;\n      h3 = bits >> 6 & 0x3f;\n      h4 = bits & 0x3f;\n\n      // use hexets to index into b64, and append result to encoded string\n      tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);\n    } while (i < data.length);\n\n    enc = tmp_arr.join('');\n\n    let r = data.length % 3;\n\n    return (r ? enc.slice(0, r - 3) : enc) + '==='.slice(r || 3);\n\n  }\n\n  _b64_decode(data) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Tyler Akins (http://rumkin.com)\n    // +   improved by: Thunder.m\n    // +      input by: Aman Gupta\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   bugfixed by: Onno Marsman\n    // +   bugfixed by: Pellentesque Malesuada\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +      input by: Brett Zamir (http://brett-zamir.me)\n    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // *     example 1: base64_decode('S2V2aW4gdmFuIFpvbm5ldmVsZA==');\n    // *     returns 1: 'Kevin van Zonneveld'\n    // mozilla has this native\n    // - but breaks in 2.0.0.12!\n    //if (typeof this.window['btoa'] == 'function') {\n    //    return btoa(data);\n    //}\n    let b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" +\n              \"abcdefghijklmnopqrstuvwxyz0123456789+/=\";\n    let o1, o2, o3, h1, h2, h3, h4, bits, i = 0,\n      ac = 0,\n      dec = \"\",\n      tmp_arr = [];\n\n    if (!data) {\n      return data;\n    }\n\n    data += '';\n\n    do { // unpack four hexets into three octets using index points in b64\n      h1 = b64.indexOf(data.charAt(i++));\n      h2 = b64.indexOf(data.charAt(i++));\n      h3 = b64.indexOf(data.charAt(i++));\n      h4 = b64.indexOf(data.charAt(i++));\n\n      bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;\n\n      o1 = bits >> 16 & 0xff;\n      o2 = bits >> 8 & 0xff;\n      o3 = bits & 0xff;\n\n      if (h3 == 64) {\n        tmp_arr[ac++] = String.fromCharCode(o1);\n      } else if (h4 == 64) {\n        tmp_arr[ac++] = String.fromCharCode(o1, o2);\n      } else {\n        tmp_arr[ac++] = String.fromCharCode(o1, o2, o3);\n      }\n    } while (i < data.length);\n\n    dec = tmp_arr.join('');\n\n    return dec;\n  }\n\n  /**\n   * The string representation of this value\n   * @return {String}\n   */\n  toString() {\n    return this.value;\n  }\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n\nconst DURATION_LETTERS = /([PDWHMTS]{1,1})/;\nconst DATA_PROPS_TO_COPY = [\"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\", \"isNegative\"];\n\n/**\n * This class represents the \"duration\" value type, with various calculation\n * and manipulation methods.\n *\n * @memberof ICAL\n */\nclass Duration {\n  /**\n   * Returns a new ICAL.Duration instance from the passed seconds value.\n   *\n   * @param {Number} aSeconds       The seconds to create the instance from\n   * @return {Duration}             The newly created duration instance\n   */\n  static fromSeconds(aSeconds) {\n    return (new Duration()).fromSeconds(aSeconds);\n  }\n\n  /**\n   * Checks if the given string is an iCalendar duration value.\n   *\n   * @param {String} value      The raw ical value\n   * @return {Boolean}          True, if the given value is of the\n   *                              duration ical type\n   */\n  static isValueString(string) {\n    return (string[0] === 'P' || string[1] === 'P');\n  }\n\n  /**\n   * Creates a new {@link ICAL.Duration} instance from the passed string.\n   *\n   * @param {String} aStr       The string to parse\n   * @return {Duration}         The created duration instance\n   */\n  static fromString(aStr) {\n    let pos = 0;\n    let dict = Object.create(null);\n    let chunks = 0;\n\n    while ((pos = aStr.search(DURATION_LETTERS)) !== -1) {\n      let type = aStr[pos];\n      let numeric = aStr.slice(0, Math.max(0, pos));\n      aStr = aStr.slice(pos + 1);\n\n      chunks += parseDurationChunk(type, numeric, dict);\n    }\n\n    if (chunks < 2) {\n      // There must be at least a chunk with \"P\" and some unit chunk\n      throw new Error(\n        'invalid duration value: Not enough duration components in \"' + aStr + '\"'\n      );\n    }\n\n    return new Duration(dict);\n  }\n\n  /**\n   * Creates a new ICAL.Duration instance from the given data object.\n   *\n   * @param {Object} aData                An object with members of the duration\n   * @param {Number=} aData.weeks         Duration in weeks\n   * @param {Number=} aData.days          Duration in days\n   * @param {Number=} aData.hours         Duration in hours\n   * @param {Number=} aData.minutes       Duration in minutes\n   * @param {Number=} aData.seconds       Duration in seconds\n   * @param {Boolean=} aData.isNegative   If true, the duration is negative\n   * @return {Duration}                   The createad duration instance\n   */\n  static fromData(aData) {\n    return new Duration(aData);\n  }\n\n  /**\n   * Creates a new ICAL.Duration instance.\n   *\n   * @param {Object} data                 An object with members of the duration\n   * @param {Number=} data.weeks          Duration in weeks\n   * @param {Number=} data.days           Duration in days\n   * @param {Number=} data.hours          Duration in hours\n   * @param {Number=} data.minutes        Duration in minutes\n   * @param {Number=} data.seconds        Duration in seconds\n   * @param {Boolean=} data.isNegative    If true, the duration is negative\n   */\n  constructor(data) {\n    this.wrappedJSObject = this;\n    this.fromData(data);\n  }\n\n  /**\n   * The weeks in this duration\n   * @type {Number}\n   * @default 0\n   */\n  weeks = 0;\n\n  /**\n   * The days in this duration\n   * @type {Number}\n   * @default 0\n   */\n  days = 0;\n\n  /**\n   * The days in this duration\n   * @type {Number}\n   * @default 0\n   */\n  hours = 0;\n\n  /**\n   * The minutes in this duration\n   * @type {Number}\n   * @default 0\n   */\n  minutes = 0;\n\n  /**\n   * The seconds in this duration\n   * @type {Number}\n   * @default 0\n   */\n  seconds = 0;\n\n  /**\n   * The seconds in this duration\n   * @type {Boolean}\n   * @default false\n   */\n  isNegative = false;\n\n  /**\n   * The class identifier.\n   * @constant\n   * @type {String}\n   * @default \"icalduration\"\n   */\n  icalclass = \"icalduration\";\n\n  /**\n   * The type name, to be used in the jCal object.\n   * @constant\n   * @type {String}\n   * @default \"duration\"\n   */\n  icaltype = \"duration\";\n\n  /**\n   * Returns a clone of the duration object.\n   *\n   * @return {Duration}      The cloned object\n   */\n  clone() {\n    return Duration.fromData(this);\n  }\n\n  /**\n   * The duration value expressed as a number of seconds.\n   *\n   * @return {Number}             The duration value in seconds\n   */\n  toSeconds() {\n    let seconds = this.seconds + 60 * this.minutes + 3600 * this.hours +\n                  86400 * this.days + 7 * 86400 * this.weeks;\n    return (this.isNegative ? -seconds : seconds);\n  }\n\n  /**\n   * Reads the passed seconds value into this duration object. Afterwards,\n   * members like {@link ICAL.Duration#days days} and {@link ICAL.Duration#weeks weeks} will be set up\n   * accordingly.\n   *\n   * @param {Number} aSeconds     The duration value in seconds\n   * @return {Duration}           Returns this instance\n   */\n  fromSeconds(aSeconds) {\n    let secs = Math.abs(aSeconds);\n\n    this.isNegative = (aSeconds < 0);\n    this.days = trunc(secs / 86400);\n\n    // If we have a flat number of weeks, use them.\n    if (this.days % 7 == 0) {\n      this.weeks = this.days / 7;\n      this.days = 0;\n    } else {\n      this.weeks = 0;\n    }\n\n    secs -= (this.days + 7 * this.weeks) * 86400;\n\n    this.hours = trunc(secs / 3600);\n    secs -= this.hours * 3600;\n\n    this.minutes = trunc(secs / 60);\n    secs -= this.minutes * 60;\n\n    this.seconds = secs;\n    return this;\n  }\n\n  /**\n   * Sets up the current instance using members from the passed data object.\n   *\n   * @param {Object} aData                An object with members of the duration\n   * @param {Number=} aData.weeks         Duration in weeks\n   * @param {Number=} aData.days          Duration in days\n   * @param {Number=} aData.hours         Duration in hours\n   * @param {Number=} aData.minutes       Duration in minutes\n   * @param {Number=} aData.seconds       Duration in seconds\n   * @param {Boolean=} aData.isNegative   If true, the duration is negative\n   */\n  fromData(aData) {\n    for (let prop of DATA_PROPS_TO_COPY) {\n      if (aData && prop in aData) {\n        this[prop] = aData[prop];\n      } else {\n        this[prop] = 0;\n      }\n    }\n  }\n\n  /**\n   * Resets the duration instance to the default values, i.e. PT0S\n   */\n  reset() {\n    this.isNegative = false;\n    this.weeks = 0;\n    this.days = 0;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n  }\n\n  /**\n   * Compares the duration instance with another one.\n   *\n   * @param {Duration} aOther             The instance to compare with\n   * @return {Number}                     -1, 0 or 1 for less/equal/greater\n   */\n  compare(aOther) {\n    let thisSeconds = this.toSeconds();\n    let otherSeconds = aOther.toSeconds();\n    return (thisSeconds > otherSeconds) - (thisSeconds < otherSeconds);\n  }\n\n  /**\n   * Normalizes the duration instance. For example, a duration with a value\n   * of 61 seconds will be normalized to 1 minute and 1 second.\n   */\n  normalize() {\n    this.fromSeconds(this.toSeconds());\n  }\n\n  /**\n   * The string representation of this duration.\n   * @return {String}\n   */\n  toString() {\n    if (this.toSeconds() == 0) {\n      return \"PT0S\";\n    } else {\n      let str = \"\";\n      if (this.isNegative) str += \"-\";\n      str += \"P\";\n      let hasWeeks = false;\n      if (this.weeks) {\n        if (this.days || this.hours || this.minutes || this.seconds) {\n          str += (this.weeks * 7 + this.days) + \"D\";\n        } else {\n          str += (this.weeks + \"W\");\n          hasWeeks = true;\n        }\n      } else if (this.days) {\n        str += (this.days + \"D\");\n      }\n\n      if (!hasWeeks) {\n        if (this.hours || this.minutes || this.seconds) {\n          str += \"T\";\n          if (this.hours) {\n            str += this.hours + \"H\";\n          }\n\n          if (this.minutes) {\n            str += this.minutes + \"M\";\n          }\n\n          if (this.seconds) {\n            str += this.seconds + \"S\";\n          }\n        }\n      }\n\n      return str;\n    }\n  }\n\n  /**\n   * The iCalendar string representation of this duration.\n   * @return {String}\n   */\n  toICALString() {\n    return this.toString();\n  }\n}\n\n/**\n * Internal helper function to handle a chunk of a duration.\n *\n * @private\n * @param {String} letter type of duration chunk\n * @param {String} number numeric value or -/+\n * @param {Object} dict target to assign values to\n */\nfunction parseDurationChunk(letter, number, object) {\n  let type;\n  switch (letter) {\n    case 'P':\n      if (number && number === '-') {\n        object.isNegative = true;\n      } else {\n        object.isNegative = false;\n      }\n      // period\n      break;\n    case 'D':\n      type = 'days';\n      break;\n    case 'W':\n      type = 'weeks';\n      break;\n    case 'H':\n      type = 'hours';\n      break;\n    case 'M':\n      type = 'minutes';\n      break;\n    case 'S':\n      type = 'seconds';\n      break;\n    default:\n      // Not a valid chunk\n      return 0;\n  }\n\n  if (type) {\n    if (!number && number !== 0) {\n      throw new Error(\n        'invalid duration value: Missing number before \"' + letter + '\"'\n      );\n    }\n    let num = parseInt(number, 10);\n    if (isStrictlyNaN(num)) {\n      throw new Error(\n        'invalid duration value: Invalid number \"' + number + '\" before \"' + letter + '\"'\n      );\n    }\n    object[type] = num;\n  }\n\n  return 1;\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n\n/**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n * @ignore\n * @typedef {import(\"./types.js\").jCalComponent} jCalComponent\n * Imports the 'occurrenceDetails' type from the \"types.js\" module\n */\n\n/**\n * This class represents the \"period\" value type, with various calculation and manipulation methods.\n *\n * @memberof ICAL\n */\nclass Period {\n  /**\n   * Creates a new {@link ICAL.Period} instance from the passed string.\n   *\n   * @param {String} str            The string to parse\n   * @param {Property} prop         The property this period will be on\n   * @return {Period}               The created period instance\n   */\n  static fromString(str, prop) {\n    let parts = str.split('/');\n\n    if (parts.length !== 2) {\n      throw new Error(\n        'Invalid string value: \"' + str + '\" must contain a \"/\" char.'\n      );\n    }\n\n    let options = {\n      start: Time.fromDateTimeString(parts[0], prop)\n    };\n\n    let end = parts[1];\n\n    if (Duration.isValueString(end)) {\n      options.duration = Duration.fromString(end);\n    } else {\n      options.end = Time.fromDateTimeString(end, prop);\n    }\n\n    return new Period(options);\n  }\n\n  /**\n   * Creates a new {@link ICAL.Period} instance from the given data object.\n   * The passed data object cannot contain both and end date and a duration.\n   *\n   * @param {Object} aData                  An object with members of the period\n   * @param {Time=} aData.start             The start of the period\n   * @param {Time=} aData.end               The end of the period\n   * @param {Duration=} aData.duration      The duration of the period\n   * @return {Period}                       The period instance\n   */\n  static fromData(aData) {\n    return new Period(aData);\n  }\n\n  /**\n   * Returns a new period instance from the given jCal data array. The first\n   * member is always the start date string, the second member is either a\n   * duration or end date string.\n   *\n   * @param {jCalComponent} aData           The jCal data array\n   * @param {Property} aProp                The property this jCal data is on\n   * @param {Boolean} aLenient              If true, data value can be both date and date-time\n   * @return {Period}                       The period instance\n   */\n  static fromJSON(aData, aProp, aLenient) {\n    function fromDateOrDateTimeString(aValue, dateProp) {\n      if (aLenient) {\n        return Time.fromString(aValue, dateProp);\n      } else {\n        return Time.fromDateTimeString(aValue, dateProp);\n      }\n    }\n\n    if (Duration.isValueString(aData[1])) {\n      return Period.fromData({\n        start: fromDateOrDateTimeString(aData[0], aProp),\n        duration: Duration.fromString(aData[1])\n      });\n    } else {\n      return Period.fromData({\n        start: fromDateOrDateTimeString(aData[0], aProp),\n        end: fromDateOrDateTimeString(aData[1], aProp)\n      });\n    }\n  }\n\n  /**\n   * Creates a new ICAL.Period instance. The passed data object cannot contain both and end date and\n   * a duration.\n   *\n   * @param {Object} aData                  An object with members of the period\n   * @param {Time=} aData.start             The start of the period\n   * @param {Time=} aData.end               The end of the period\n   * @param {Duration=} aData.duration      The duration of the period\n   */\n  constructor(aData) {\n    this.wrappedJSObject = this;\n\n    if (aData && 'start' in aData) {\n      if (aData.start && !(aData.start instanceof Time)) {\n        throw new TypeError('.start must be an instance of ICAL.Time');\n      }\n      this.start = aData.start;\n    }\n\n    if (aData && aData.end && aData.duration) {\n      throw new Error('cannot accept both end and duration');\n    }\n\n    if (aData && 'end' in aData) {\n      if (aData.end && !(aData.end instanceof Time)) {\n        throw new TypeError('.end must be an instance of ICAL.Time');\n      }\n      this.end = aData.end;\n    }\n\n    if (aData && 'duration' in aData) {\n      if (aData.duration && !(aData.duration instanceof Duration)) {\n        throw new TypeError('.duration must be an instance of ICAL.Duration');\n      }\n      this.duration = aData.duration;\n    }\n  }\n\n\n  /**\n   * The start of the period\n   * @type {Time}\n   */\n  start = null;\n\n  /**\n   * The end of the period\n   * @type {Time}\n   */\n  end = null;\n\n  /**\n   * The duration of the period\n   * @type {Duration}\n   */\n  duration = null;\n\n  /**\n   * The class identifier.\n   * @constant\n   * @type {String}\n   * @default \"icalperiod\"\n   */\n  icalclass = \"icalperiod\";\n\n  /**\n   * The type name, to be used in the jCal object.\n   * @constant\n   * @type {String}\n   * @default \"period\"\n   */\n  icaltype = \"period\";\n\n  /**\n   * Returns a clone of the duration object.\n   *\n   * @return {Period}      The cloned object\n   */\n  clone() {\n    return Period.fromData({\n      start: this.start ? this.start.clone() : null,\n      end: this.end ? this.end.clone() : null,\n      duration: this.duration ? this.duration.clone() : null\n    });\n  }\n\n  /**\n   * Calculates the duration of the period, either directly or by subtracting\n   * start from end date.\n   *\n   * @return {Duration}      The calculated duration\n   */\n  getDuration() {\n    if (this.duration) {\n      return this.duration;\n    } else {\n      return this.end.subtractDate(this.start);\n    }\n  }\n\n  /**\n   * Calculates the end date of the period, either directly or by adding\n   * duration to start date.\n   *\n   * @return {Time}          The calculated end date\n   */\n  getEnd() {\n    if (this.end) {\n      return this.end;\n    } else {\n      let end = this.start.clone();\n      end.addDuration(this.duration);\n      return end;\n    }\n  }\n\n  /**\n   * Compare this period with a date or other period. To maintain the logic where a.compare(b)\n   * returns 1 when a > b, this function will return 1 when the period is after the date, 0 when the\n   * date is within the period, and -1 when the period is before the date. When comparing two\n   * periods, as soon as they overlap in any way this will return 0.\n   *\n   * @param {Time|Period} dt    The date or other period to compare with\n   */\n  compare(dt) {\n    if (dt.compare(this.start) < 0) {\n      return 1;\n    } else if (dt.compare(this.getEnd()) > 0) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }\n\n  /**\n   * The string representation of this period.\n   * @return {String}\n   */\n  toString() {\n    return this.start + \"/\" + (this.end || this.duration);\n  }\n\n  /**\n   * The jCal representation of this period type.\n   * @return {Object}\n   */\n  toJSON() {\n    return [this.start.toString(), (this.end || this.duration).toString()];\n  }\n\n  /**\n   * The iCalendar string representation of this period.\n   * @return {String}\n   */\n  toICALString() {\n    return this.start.toICALString() + \"/\" +\n           (this.end || this.duration).toICALString();\n  }\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n\n/**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n *\n * @ignore\n * @typedef {import(\"./types.js\").weekDay} weekDay\n * Imports the 'weekDay' type from the \"types.js\" module\n *\n * @ignore\n * @typedef {import(\"./types.js\").timeInit} timeInit\n * Imports the 'timeInit' type from the \"types.js\" module\n */\n\n/**\n * @classdesc\n * iCalendar Time representation (similar to JS Date object).  Fully\n * independent of system (OS) timezone / time.  Unlike JS Date, the month\n * January is 1, not zero.\n *\n * @example\n * var time = new ICAL.Time({\n *   year: 2012,\n *   month: 10,\n *   day: 11\n *   minute: 0,\n *   second: 0,\n *   isDate: false\n * });\n *\n *\n * @memberof ICAL\n*/\nclass Time {\n  static _dowCache = {};\n  static _wnCache = {};\n\n  /**\n   * Returns the days in the given month\n   *\n   * @param {Number} month      The month to check\n   * @param {Number} year       The year to check\n   * @return {Number}           The number of days in the month\n   */\n  static daysInMonth(month, year) {\n    let _daysInMonth = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    let days = 30;\n\n    if (month < 1 || month > 12) return days;\n\n    days = _daysInMonth[month];\n\n    if (month == 2) {\n      days += Time.isLeapYear(year);\n    }\n\n    return days;\n  }\n\n  /**\n   * Checks if the year is a leap year\n   *\n   * @param {Number} year       The year to check\n   * @return {Boolean}          True, if the year is a leap year\n   */\n  static isLeapYear(year) {\n    if (year <= 1752) {\n      return ((year % 4) == 0);\n    } else {\n      return (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0));\n    }\n  }\n\n  /**\n   * Create a new ICAL.Time from the day of year and year. The date is returned\n   * in floating timezone.\n   *\n   * @param {Number} aDayOfYear     The day of year\n   * @param {Number} aYear          The year to create the instance in\n   * @return {Time}                 The created instance with the calculated date\n   */\n  static fromDayOfYear(aDayOfYear, aYear) {\n    let year = aYear;\n    let doy = aDayOfYear;\n    let tt = new Time();\n    tt.auto_normalize = false;\n    let is_leap = (Time.isLeapYear(year) ? 1 : 0);\n\n    if (doy < 1) {\n      year--;\n      is_leap = (Time.isLeapYear(year) ? 1 : 0);\n      doy += Time.daysInYearPassedMonth[is_leap][12];\n      return Time.fromDayOfYear(doy, year);\n    } else if (doy > Time.daysInYearPassedMonth[is_leap][12]) {\n      is_leap = (Time.isLeapYear(year) ? 1 : 0);\n      doy -= Time.daysInYearPassedMonth[is_leap][12];\n      year++;\n      return Time.fromDayOfYear(doy, year);\n    }\n\n    tt.year = year;\n    tt.isDate = true;\n\n    for (let month = 11; month >= 0; month--) {\n      if (doy > Time.daysInYearPassedMonth[is_leap][month]) {\n        tt.month = month + 1;\n        tt.day = doy - Time.daysInYearPassedMonth[is_leap][month];\n        break;\n      }\n    }\n\n    tt.auto_normalize = true;\n    return tt;\n  }\n\n  /**\n   * Returns a new ICAL.Time instance from a date string, e.g 2015-01-02.\n   *\n   * @deprecated                Use {@link ICAL.Time.fromDateString} instead\n   * @param {String} str        The string to create from\n   * @return {Time}             The date/time instance\n   */\n  static fromStringv2(str) {\n    return new Time({\n      year: parseInt(str.slice(0, 4), 10),\n      month: parseInt(str.slice(5, 7), 10),\n      day: parseInt(str.slice(8, 10), 10),\n      isDate: true\n    });\n  }\n\n  /**\n   * Returns a new ICAL.Time instance from a date string, e.g 2015-01-02.\n   *\n   * @param {String} aValue     The string to create from\n   * @return {Time}             The date/time instance\n   */\n  static fromDateString(aValue) {\n    // Dates should have no timezone.\n    // Google likes to sometimes specify Z on dates\n    // we specifically ignore that to avoid issues.\n\n    // YYYY-MM-DD\n    // 2012-10-10\n    return new Time({\n      year: strictParseInt(aValue.slice(0, 4)),\n      month: strictParseInt(aValue.slice(5, 7)),\n      day: strictParseInt(aValue.slice(8, 10)),\n      isDate: true\n    });\n  }\n\n  /**\n   * Returns a new ICAL.Time instance from a date-time string, e.g\n   * 2015-01-02T03:04:05. If a property is specified, the timezone is set up\n   * from the property's TZID parameter.\n   *\n   * @param {String} aValue         The string to create from\n   * @param {Property=} prop        The property the date belongs to\n   * @return {Time}                 The date/time instance\n   */\n  static fromDateTimeString(aValue, prop) {\n    if (aValue.length < 19) {\n      throw new Error(\n        'invalid date-time value: \"' + aValue + '\"'\n      );\n    }\n\n    let zone;\n    let zoneId;\n\n    if (aValue.slice(-1) === 'Z') {\n      zone = Timezone.utcTimezone;\n    } else if (prop) {\n      zoneId = prop.getParameter('tzid');\n\n      if (prop.parent) {\n        if (prop.parent.name === 'standard' || prop.parent.name === 'daylight') {\n          // Per RFC 5545 3.8.2.4 and 3.8.2.2, start/end date-times within\n          // these components MUST be specified in local time.\n          zone = Timezone.localTimezone;\n        } else if (zoneId) {\n          // If the desired time zone is defined within the component tree,\n          // fetch its definition and prefer that.\n          zone = prop.parent.getTimeZoneByID(zoneId);\n        }\n      }\n    }\n\n    const timeData = {\n      year: strictParseInt(aValue.slice(0, 4)),\n      month: strictParseInt(aValue.slice(5, 7)),\n      day: strictParseInt(aValue.slice(8, 10)),\n      hour: strictParseInt(aValue.slice(11, 13)),\n      minute: strictParseInt(aValue.slice(14, 16)),\n      second: strictParseInt(aValue.slice(17, 19)),\n    };\n\n    // Although RFC 5545 requires that all TZIDs used within a file have a\n    // corresponding time zone definition, we may not be parsing the full file\n    // or we may be dealing with a non-compliant file; in either case, we can\n    // check our own time zone service for the TZID in a last-ditch effort.\n    if (zoneId && !zone) {\n      timeData.timezone = zoneId;\n    }\n\n    // 2012-10-10T10:10:10(Z)?\n    return new Time(timeData, zone);\n  }\n\n  /**\n   * Returns a new ICAL.Time instance from a date or date-time string,\n   *\n   * @param {String} aValue         The string to create from\n   * @param {Property=} prop        The property the date belongs to\n   * @return {Time}                 The date/time instance\n   */\n  static fromString(aValue, aProperty) {\n    if (aValue.length > 10) {\n      return Time.fromDateTimeString(aValue, aProperty);\n    } else {\n      return Time.fromDateString(aValue);\n    }\n  }\n\n  /**\n   * Creates a new ICAL.Time instance from the given Javascript Date.\n   *\n   * @param {?Date} aDate             The Javascript Date to read, or null to reset\n   * @param {Boolean} [useUTC=false]  If true, the UTC values of the date will be used\n   */\n  static fromJSDate(aDate, useUTC) {\n    let tt = new Time();\n    return tt.fromJSDate(aDate, useUTC);\n  }\n\n  /**\n   * Creates a new ICAL.Time instance from the the passed data object.\n   *\n   * @param {timeInit} aData          Time initialization\n   * @param {Timezone=} aZone         Timezone this position occurs in\n   */\n  static fromData = function fromData(aData, aZone) {\n    let t = new Time();\n    return t.fromData(aData, aZone);\n  };\n\n  /**\n   * Creates a new ICAL.Time instance from the current moment.\n   * The instance is ‚Äúfloating‚Äù - has no timezone relation.\n   * To create an instance considering the time zone, call\n   * ICAL.Time.fromJSDate(new Date(), true)\n   * @return {Time}\n   */\n  static now() {\n    return Time.fromJSDate(new Date(), false);\n  }\n\n  /**\n   * Returns the date on which ISO week number 1 starts.\n   *\n   * @see Time#weekNumber\n   * @param {Number} aYear                  The year to search in\n   * @param {weekDay=} aWeekStart           The week start weekday, used for calculation.\n   * @return {Time}                         The date on which week number 1 starts\n   */\n  static weekOneStarts(aYear, aWeekStart) {\n    let t = Time.fromData({\n      year: aYear,\n      month: 1,\n      day: 1,\n      isDate: true\n    });\n\n    let dow = t.dayOfWeek();\n    let wkst = aWeekStart || Time.DEFAULT_WEEK_START;\n    if (dow > Time.THURSDAY) {\n      t.day += 7;\n    }\n    if (wkst > Time.THURSDAY) {\n      t.day -= 7;\n    }\n\n    t.day -= dow - wkst;\n\n    return t;\n  }\n\n  /**\n   * Get the dominical letter for the given year. Letters range from A - G for\n   * common years, and AG to GF for leap years.\n   *\n   * @param {Number} yr           The year to retrieve the letter for\n   * @return {String}             The dominical letter.\n   */\n  static getDominicalLetter(yr) {\n    let LTRS = \"GFEDCBA\";\n    let dom = (yr + (yr / 4 | 0) + (yr / 400 | 0) - (yr / 100 | 0) - 1) % 7;\n    let isLeap = Time.isLeapYear(yr);\n    if (isLeap) {\n      return LTRS[(dom + 6) % 7] + LTRS[dom];\n    } else {\n      return LTRS[dom];\n    }\n  }\n\n  static #epochTime = null;\n  /**\n   * January 1st, 1970 as an ICAL.Time.\n   * @type {Time}\n   * @constant\n   * @instance\n   */\n  static get epochTime() {\n    if (!this.#epochTime) {\n      this.#epochTime = Time.fromData({\n        year: 1970,\n        month: 1,\n        day: 1,\n        hour: 0,\n        minute: 0,\n        second: 0,\n        isDate: false,\n        timezone: \"Z\"\n      });\n    }\n    return this.#epochTime;\n  }\n\n  static _cmp_attr(a, b, attr) {\n    if (a[attr] > b[attr]) return 1;\n    if (a[attr] < b[attr]) return -1;\n    return 0;\n  }\n\n  /**\n   * The days that have passed in the year after a given month. The array has\n   * two members, one being an array of passed days for non-leap years, the\n   * other analog for leap years.\n   * @example\n   * var isLeapYear = ICAL.Time.isLeapYear(year);\n   * var passedDays = ICAL.Time.daysInYearPassedMonth[isLeapYear][month];\n   * @type {Array.<Array.<Number>>}\n   */\n  static daysInYearPassedMonth = [\n    [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365],\n    [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  ];\n\n  static SUNDAY = 1;\n  static MONDAY = 2;\n  static TUESDAY = 3;\n  static WEDNESDAY = 4;\n  static THURSDAY = 5;\n  static FRIDAY = 6;\n  static SATURDAY = 7;\n\n  /**\n   * The default weekday for the WKST part.\n   * @constant\n   * @default ICAL.Time.MONDAY\n   */\n  static DEFAULT_WEEK_START = 2; // MONDAY\n\n  /**\n   * Creates a new ICAL.Time instance.\n   *\n   * @param {timeInit} data           Time initialization\n   * @param {Timezone} zone           timezone this position occurs in\n   */\n  constructor(data, zone) {\n    this.wrappedJSObject = this;\n\n    /**\n     * @type {timeInit}\n     * @private\n     */\n    this._time = Object.create(null);\n\n    /* time defaults */\n    this._time.year = 0;\n    this._time.month = 1;\n    this._time.day = 1;\n    this._time.hour = 0;\n    this._time.minute = 0;\n    this._time.second = 0;\n    this._time.isDate = false;\n\n    this.fromData(data, zone);\n  }\n\n  /**\n   * The class identifier.\n   * @constant\n   * @type {String}\n   * @default \"icaltime\"\n   */\n  icalclass = \"icaltime\";\n  _cachedUnixTime = null;\n\n  /**\n   * The type name, to be used in the jCal object. This value may change and\n   * is strictly defined by the {@link ICAL.Time#isDate isDate} member.\n   * @type {String}\n   * @default \"date-time\"\n   */\n  get icaltype() {\n    return this.isDate ? 'date' : 'date-time';\n  }\n\n  /**\n   * The timezone for this time.\n   * @type {Timezone}\n   */\n  zone = null;\n\n  /**\n   * Internal uses to indicate that a change has been made and the next read\n   * operation must attempt to normalize the value (for example changing the\n   * day to 33).\n   *\n   * @type {Boolean}\n   * @private\n   */\n  _pendingNormalization = false;\n\n  /**\n   * The year of this date.\n   * @type {Number}\n   */\n  get year() {\n    return this._getTimeAttr('year');\n  }\n\n  set year(val) {\n    this._setTimeAttr('year', val);\n  }\n\n  /**\n   * The month of this date.\n   * @type {Number}\n   */\n  get month() {\n    return this._getTimeAttr('month');\n  }\n\n  set month(val) {\n    this._setTimeAttr('month', val);\n  }\n\n  /**\n   * The day of this date.\n   * @type {Number}\n   */\n  get day() {\n    return this._getTimeAttr('day');\n  }\n\n  set day(val) {\n    this._setTimeAttr('day', val);\n  }\n\n  /**\n   * The hour of this date-time.\n   * @type {Number}\n   */\n  get hour() {\n    return this._getTimeAttr('hour');\n  }\n\n  set hour(val) {\n    this._setTimeAttr('hour', val);\n  }\n\n  /**\n   * The minute of this date-time.\n   * @type {Number}\n   */\n  get minute() {\n    return this._getTimeAttr('minute');\n  }\n\n  set minute(val) {\n    this._setTimeAttr('minute', val);\n  }\n\n  /**\n   * The second of this date-time.\n   * @type {Number}\n   */\n  get second() {\n    return this._getTimeAttr('second');\n  }\n\n  set second(val) {\n    this._setTimeAttr('second', val);\n  }\n\n  /**\n   * If true, the instance represents a date (as opposed to a date-time)\n   * @type {Boolean}\n   */\n  get isDate() {\n    return this._getTimeAttr('isDate');\n  }\n\n  set isDate(val) {\n    this._setTimeAttr('isDate', val);\n  }\n\n  /**\n   * @private\n   * @param {String} attr             Attribute to get (one of: year, month,\n   *                                  day, hour, minute, second, isDate)\n   * @return {Number|Boolean}         Current value for the attribute\n   */\n  _getTimeAttr(attr) {\n    if (this._pendingNormalization) {\n      this._normalize();\n      this._pendingNormalization = false;\n    }\n\n    return this._time[attr];\n  }\n\n  /**\n   * @private\n   * @param {String} attr             Attribute to set (one of: year, month,\n   *                                  day, hour, minute, second, isDate)\n   * @param {Number|Boolean} val      New value for the attribute\n   */\n  _setTimeAttr(attr, val) {\n    // Check if isDate will be set and if was not set to normalize date.\n    // This avoids losing days when seconds, minutes and hours are zeroed\n    // what normalize will do when time is a date.\n    if (attr === \"isDate\" && val && !this._time.isDate) {\n      this.adjust(0, 0, 0, 0);\n    }\n    this._cachedUnixTime = null;\n    this._pendingNormalization = true;\n    this._time[attr] = val;\n  }\n\n  /**\n   * Returns a clone of the time object.\n   *\n   * @return {Time}              The cloned object\n   */\n  clone() {\n    return new Time(this._time, this.zone);\n  }\n\n  /**\n   * Reset the time instance to epoch time\n   */\n  reset() {\n    this.fromData(Time.epochTime);\n    this.zone = Timezone.utcTimezone;\n  }\n\n  /**\n   * Reset the time instance to the given date/time values.\n   *\n   * @param {Number} year             The year to set\n   * @param {Number} month            The month to set\n   * @param {Number} day              The day to set\n   * @param {Number} hour             The hour to set\n   * @param {Number} minute           The minute to set\n   * @param {Number} second           The second to set\n   * @param {Timezone} timezone       The timezone to set\n   */\n  resetTo(year, month, day, hour, minute, second, timezone) {\n    this.fromData({\n      year: year,\n      month: month,\n      day: day,\n      hour: hour,\n      minute: minute,\n      second: second,\n      zone: timezone\n    });\n  }\n\n  /**\n   * Set up the current instance from the Javascript date value.\n   *\n   * @param {?Date} aDate             The Javascript Date to read, or null to reset\n   * @param {Boolean} [useUTC=false]  If true, the UTC values of the date will be used\n   */\n  fromJSDate(aDate, useUTC) {\n    if (!aDate) {\n      this.reset();\n    } else {\n      if (useUTC) {\n        this.zone = Timezone.utcTimezone;\n        this.year = aDate.getUTCFullYear();\n        this.month = aDate.getUTCMonth() + 1;\n        this.day = aDate.getUTCDate();\n        this.hour = aDate.getUTCHours();\n        this.minute = aDate.getUTCMinutes();\n        this.second = aDate.getUTCSeconds();\n      } else {\n        this.zone = Timezone.localTimezone;\n        this.year = aDate.getFullYear();\n        this.month = aDate.getMonth() + 1;\n        this.day = aDate.getDate();\n        this.hour = aDate.getHours();\n        this.minute = aDate.getMinutes();\n        this.second = aDate.getSeconds();\n      }\n    }\n    this._cachedUnixTime = null;\n    return this;\n  }\n\n  /**\n   * Sets up the current instance using members from the passed data object.\n   *\n   * @param {timeInit} aData          Time initialization\n   * @param {Timezone=} aZone         Timezone this position occurs in\n   */\n  fromData(aData, aZone) {\n    if (aData) {\n      for (let [key, value] of Object.entries(aData)) {\n          // ical type cannot be set\n          if (key === 'icaltype') continue;\n        this[key] = value;\n      }\n    }\n\n    if (aZone) {\n      this.zone = aZone;\n    }\n\n    if (aData && !(\"isDate\" in aData)) {\n      this.isDate = !(\"hour\" in aData);\n    } else if (aData && (\"isDate\" in aData)) {\n      this.isDate = aData.isDate;\n    }\n\n    if (aData && \"timezone\" in aData) {\n      let zone = TimezoneService.get(\n        aData.timezone\n      );\n\n      this.zone = zone || Timezone.localTimezone;\n    }\n\n    if (aData && \"zone\" in aData) {\n      this.zone = aData.zone;\n    }\n\n    if (!this.zone) {\n      this.zone = Timezone.localTimezone;\n    }\n\n    this._cachedUnixTime = null;\n    return this;\n  }\n\n  /**\n   * Calculate the day of week.\n   * @param {weekDay=} aWeekStart\n   *        The week start weekday, defaults to SUNDAY\n   * @return {weekDay}\n   */\n  dayOfWeek(aWeekStart) {\n    let firstDow = aWeekStart || Time.SUNDAY;\n    let dowCacheKey = (this.year << 12) + (this.month << 8) + (this.day << 3) + firstDow;\n    if (dowCacheKey in Time._dowCache) {\n      return Time._dowCache[dowCacheKey];\n    }\n\n    // Using Zeller's algorithm\n    let q = this.day;\n    let m = this.month + (this.month < 3 ? 12 : 0);\n    let Y = this.year - (this.month < 3 ? 1 : 0);\n\n    let h = (q + Y + trunc(((m + 1) * 26) / 10) + trunc(Y / 4));\n    { // eslint-disable-line no-constant-condition\n      h += trunc(Y / 100) * 6 + trunc(Y / 400);\n    }\n\n    // Normalize to 1 = wkst\n    h = ((h + 7 - firstDow) % 7) + 1;\n    Time._dowCache[dowCacheKey] = h;\n    return h;\n  }\n\n  /**\n   * Calculate the day of year.\n   * @return {Number}\n   */\n  dayOfYear() {\n    let is_leap = (Time.isLeapYear(this.year) ? 1 : 0);\n    let diypm = Time.daysInYearPassedMonth;\n    return diypm[is_leap][this.month - 1] + this.day;\n  }\n\n  /**\n   * Returns a copy of the current date/time, rewound to the start of the\n   * week. The resulting ICAL.Time instance is of icaltype date, even if this\n   * is a date-time.\n   *\n   * @param {weekDay=} aWeekStart\n   *        The week start weekday, defaults to SUNDAY\n   * @return {Time}      The start of the week (cloned)\n   */\n  startOfWeek(aWeekStart) {\n    let firstDow = aWeekStart || Time.SUNDAY;\n    let result = this.clone();\n    result.day -= ((this.dayOfWeek() + 7 - firstDow) % 7);\n    result.isDate = true;\n    result.hour = 0;\n    result.minute = 0;\n    result.second = 0;\n    return result;\n  }\n\n  /**\n   * Returns a copy of the current date/time, shifted to the end of the week.\n   * The resulting ICAL.Time instance is of icaltype date, even if this is a\n   * date-time.\n   *\n   * @param {weekDay=} aWeekStart\n   *        The week start weekday, defaults to SUNDAY\n   * @return {Time}      The end of the week (cloned)\n   */\n  endOfWeek(aWeekStart) {\n    let firstDow = aWeekStart || Time.SUNDAY;\n    let result = this.clone();\n    result.day += (7 - this.dayOfWeek() + firstDow - Time.SUNDAY) % 7;\n    result.isDate = true;\n    result.hour = 0;\n    result.minute = 0;\n    result.second = 0;\n    return result;\n  }\n\n  /**\n   * Returns a copy of the current date/time, rewound to the start of the\n   * month. The resulting ICAL.Time instance is of icaltype date, even if\n   * this is a date-time.\n   *\n   * @return {Time}      The start of the month (cloned)\n   */\n  startOfMonth() {\n    let result = this.clone();\n    result.day = 1;\n    result.isDate = true;\n    result.hour = 0;\n    result.minute = 0;\n    result.second = 0;\n    return result;\n  }\n\n  /**\n   * Returns a copy of the current date/time, shifted to the end of the\n   * month.  The resulting ICAL.Time instance is of icaltype date, even if\n   * this is a date-time.\n   *\n   * @return {Time}      The end of the month (cloned)\n   */\n  endOfMonth() {\n    let result = this.clone();\n    result.day = Time.daysInMonth(result.month, result.year);\n    result.isDate = true;\n    result.hour = 0;\n    result.minute = 0;\n    result.second = 0;\n    return result;\n  }\n\n  /**\n   * Returns a copy of the current date/time, rewound to the start of the\n   * year. The resulting ICAL.Time instance is of icaltype date, even if\n   * this is a date-time.\n   *\n   * @return {Time}      The start of the year (cloned)\n   */\n  startOfYear() {\n    let result = this.clone();\n    result.day = 1;\n    result.month = 1;\n    result.isDate = true;\n    result.hour = 0;\n    result.minute = 0;\n    result.second = 0;\n    return result;\n  }\n\n  /**\n   * Returns a copy of the current date/time, shifted to the end of the\n   * year.  The resulting ICAL.Time instance is of icaltype date, even if\n   * this is a date-time.\n   *\n   * @return {Time}      The end of the year (cloned)\n   */\n  endOfYear() {\n    let result = this.clone();\n    result.day = 31;\n    result.month = 12;\n    result.isDate = true;\n    result.hour = 0;\n    result.minute = 0;\n    result.second = 0;\n    return result;\n  }\n\n  /**\n   * First calculates the start of the week, then returns the day of year for\n   * this date. If the day falls into the previous year, the day is zero or negative.\n   *\n   * @param {weekDay=} aFirstDayOfWeek\n   *        The week start weekday, defaults to SUNDAY\n   * @return {Number}     The calculated day of year\n   */\n  startDoyWeek(aFirstDayOfWeek) {\n    let firstDow = aFirstDayOfWeek || Time.SUNDAY;\n    let delta = this.dayOfWeek() - firstDow;\n    if (delta < 0) delta += 7;\n    return this.dayOfYear() - delta;\n  }\n\n  /**\n   * Get the dominical letter for the current year. Letters range from A - G\n   * for common years, and AG to GF for leap years.\n   *\n   * @param {Number} yr           The year to retrieve the letter for\n   * @return {String}             The dominical letter.\n   */\n  getDominicalLetter() {\n    return Time.getDominicalLetter(this.year);\n  }\n\n  /**\n   * Finds the nthWeekDay relative to the current month (not day).  The\n   * returned value is a day relative the month that this month belongs to so\n   * 1 would indicate the first of the month and 40 would indicate a day in\n   * the following month.\n   *\n   * @param {Number} aDayOfWeek   Day of the week see the day name constants\n   * @param {Number} aPos         Nth occurrence of a given week day values\n   *        of 1 and 0 both indicate the first weekday of that type. aPos may\n   *        be either positive or negative\n   *\n   * @return {Number} numeric value indicating a day relative\n   *                   to the current month of this time object\n   */\n  nthWeekDay(aDayOfWeek, aPos) {\n    let daysInMonth = Time.daysInMonth(this.month, this.year);\n    let weekday;\n    let pos = aPos;\n\n    let start = 0;\n\n    let otherDay = this.clone();\n\n    if (pos >= 0) {\n      otherDay.day = 1;\n\n      // because 0 means no position has been given\n      // 1 and 0 indicate the same day.\n      if (pos != 0) {\n        // remove the extra numeric value\n        pos--;\n      }\n\n      // set current start offset to current day.\n      start = otherDay.day;\n\n      // find the current day of week\n      let startDow = otherDay.dayOfWeek();\n\n      // calculate the difference between current\n      // day of the week and desired day of the week\n      let offset = aDayOfWeek - startDow;\n\n\n      // if the offset goes into the past\n      // week we add 7 so it goes into the next\n      // week. We only want to go forward in time here.\n      if (offset < 0)\n        // this is really important otherwise we would\n        // end up with dates from in the past.\n        offset += 7;\n\n      // add offset to start so start is the same\n      // day of the week as the desired day of week.\n      start += offset;\n\n      // because we are going to add (and multiply)\n      // the numeric value of the day we subtract it\n      // from the start position so not to add it twice.\n      start -= aDayOfWeek;\n\n      // set week day\n      weekday = aDayOfWeek;\n    } else {\n\n      // then we set it to the last day in the current month\n      otherDay.day = daysInMonth;\n\n      // find the ends weekday\n      let endDow = otherDay.dayOfWeek();\n\n      pos++;\n\n      weekday = (endDow - aDayOfWeek);\n\n      if (weekday < 0) {\n        weekday += 7;\n      }\n\n      weekday = daysInMonth - weekday;\n    }\n\n    weekday += pos * 7;\n\n    return start + weekday;\n  }\n\n  /**\n   * Checks if current time is the nth weekday, relative to the current\n   * month.  Will always return false when rule resolves outside of current\n   * month.\n   *\n   * @param {weekDay} aDayOfWeek                 Day of week to check\n   * @param {Number} aPos                        Relative position\n   * @return {Boolean}                           True, if it is the nth weekday\n   */\n  isNthWeekDay(aDayOfWeek, aPos) {\n    let dow = this.dayOfWeek();\n\n    if (aPos === 0 && dow === aDayOfWeek) {\n      return true;\n    }\n\n    // get pos\n    let day = this.nthWeekDay(aDayOfWeek, aPos);\n\n    if (day === this.day) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Calculates the ISO 8601 week number. The first week of a year is the\n   * week that contains the first Thursday. The year can have 53 weeks, if\n   * January 1st is a Friday.\n   *\n   * Note there are regions where the first week of the year is the one that\n   * starts on January 1st, which may offset the week number. Also, if a\n   * different week start is specified, this will also affect the week\n   * number.\n   *\n   * @see Time.weekOneStarts\n   * @param {weekDay} aWeekStart                  The weekday the week starts with\n   * @return {Number}                             The ISO week number\n   */\n  weekNumber(aWeekStart) {\n    let wnCacheKey = (this.year << 12) + (this.month << 8) + (this.day << 3) + aWeekStart;\n    if (wnCacheKey in Time._wnCache) {\n      return Time._wnCache[wnCacheKey];\n    }\n    // This function courtesty of Julian Bucknall, published under the MIT license\n    // http://www.boyet.com/articles/publishedarticles/calculatingtheisoweeknumb.html\n    // plus some fixes to be able to use different week starts.\n    let week1;\n\n    let dt = this.clone();\n    dt.isDate = true;\n    let isoyear = this.year;\n\n    if (dt.month == 12 && dt.day > 25) {\n      week1 = Time.weekOneStarts(isoyear + 1, aWeekStart);\n      if (dt.compare(week1) < 0) {\n        week1 = Time.weekOneStarts(isoyear, aWeekStart);\n      } else {\n        isoyear++;\n      }\n    } else {\n      week1 = Time.weekOneStarts(isoyear, aWeekStart);\n      if (dt.compare(week1) < 0) {\n        week1 = Time.weekOneStarts(--isoyear, aWeekStart);\n      }\n    }\n\n    let daysBetween = (dt.subtractDate(week1).toSeconds() / 86400);\n    let answer = trunc(daysBetween / 7) + 1;\n    Time._wnCache[wnCacheKey] = answer;\n    return answer;\n  }\n\n  /**\n   * Adds the duration to the current time. The instance is modified in\n   * place.\n   *\n   * @param {Duration} aDuration         The duration to add\n   */\n  addDuration(aDuration) {\n    let mult = (aDuration.isNegative ? -1 : 1);\n\n    // because of the duration optimizations it is much\n    // more efficient to grab all the values up front\n    // then set them directly (which will avoid a normalization call).\n    // So we don't actually normalize until we need it.\n    let second = this.second;\n    let minute = this.minute;\n    let hour = this.hour;\n    let day = this.day;\n\n    second += mult * aDuration.seconds;\n    minute += mult * aDuration.minutes;\n    hour += mult * aDuration.hours;\n    day += mult * aDuration.days;\n    day += mult * 7 * aDuration.weeks;\n\n    this.second = second;\n    this.minute = minute;\n    this.hour = hour;\n    this.day = day;\n\n    this._cachedUnixTime = null;\n  }\n\n  /**\n   * Subtract the date details (_excluding_ timezone).  Useful for finding\n   * the relative difference between two time objects excluding their\n   * timezone differences.\n   *\n   * @param {Time} aDate     The date to subtract\n   * @return {Duration}      The difference as a duration\n   */\n  subtractDate(aDate) {\n    let unixTime = this.toUnixTime() + this.utcOffset();\n    let other = aDate.toUnixTime() + aDate.utcOffset();\n    return Duration.fromSeconds(unixTime - other);\n  }\n\n  /**\n   * Subtract the date details, taking timezones into account.\n   *\n   * @param {Time} aDate  The date to subtract\n   * @return {Duration}   The difference in duration\n   */\n  subtractDateTz(aDate) {\n    let unixTime = this.toUnixTime();\n    let other = aDate.toUnixTime();\n    return Duration.fromSeconds(unixTime - other);\n  }\n\n  /**\n   * Compares the ICAL.Time instance with another one, or a period.\n   *\n   * @param {Time|Period} aOther                  The instance to compare with\n   * @return {Number}                             -1, 0 or 1 for less/equal/greater\n   */\n  compare(other) {\n    if (other instanceof Period) {\n      return -1 * other.compare(this);\n    } else {\n      let a = this.toUnixTime();\n      let b = other.toUnixTime();\n\n      if (a > b) return 1;\n      if (b > a) return -1;\n      return 0;\n    }\n  }\n\n  /**\n   * Compares only the date part of this instance with another one.\n   *\n   * @param {Time} other                  The instance to compare with\n   * @param {Timezone} tz                 The timezone to compare in\n   * @return {Number}                     -1, 0 or 1 for less/equal/greater\n   */\n  compareDateOnlyTz(other, tz) {\n    let a = this.convertToZone(tz);\n    let b = other.convertToZone(tz);\n    let rc = 0;\n\n    if ((rc = Time._cmp_attr(a, b, \"year\")) != 0) return rc;\n    if ((rc = Time._cmp_attr(a, b, \"month\")) != 0) return rc;\n    if ((rc = Time._cmp_attr(a, b, \"day\")) != 0) return rc;\n\n    return rc;\n  }\n\n  /**\n   * Convert the instance into another timezone. The returned ICAL.Time\n   * instance is always a copy.\n   *\n   * @param {Timezone} zone      The zone to convert to\n   * @return {Time}              The copy, converted to the zone\n   */\n  convertToZone(zone) {\n    let copy = this.clone();\n    let zone_equals = (this.zone.tzid == zone.tzid);\n\n    if (!this.isDate && !zone_equals) {\n      Timezone.convert_time(copy, this.zone, zone);\n    }\n\n    copy.zone = zone;\n    return copy;\n  }\n\n  /**\n   * Calculates the UTC offset of the current date/time in the timezone it is\n   * in.\n   *\n   * @return {Number}     UTC offset in seconds\n   */\n  utcOffset() {\n    if (this.zone == Timezone.localTimezone ||\n        this.zone == Timezone.utcTimezone) {\n      return 0;\n    } else {\n      return this.zone.utcOffset(this);\n    }\n  }\n\n  /**\n   * Returns an RFC 5545 compliant ical representation of this object.\n   *\n   * @return {String} ical date/date-time\n   */\n  toICALString() {\n    let string = this.toString();\n\n    if (string.length > 10) {\n      return design.icalendar.value['date-time'].toICAL(string);\n    } else {\n      return design.icalendar.value.date.toICAL(string);\n    }\n  }\n\n  /**\n   * The string representation of this date/time, in jCal form\n   * (including : and - separators).\n   * @return {String}\n   */\n  toString() {\n    let result = this.year + '-' +\n                 pad2(this.month) + '-' +\n                 pad2(this.day);\n\n    if (!this.isDate) {\n        result += 'T' + pad2(this.hour) + ':' +\n                  pad2(this.minute) + ':' +\n                  pad2(this.second);\n\n      if (this.zone === Timezone.utcTimezone) {\n        result += 'Z';\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Converts the current instance to a Javascript date\n   * @return {Date}\n   */\n  toJSDate() {\n    if (this.zone == Timezone.localTimezone) {\n      if (this.isDate) {\n        return new Date(this.year, this.month - 1, this.day);\n      } else {\n        return new Date(this.year, this.month - 1, this.day,\n                        this.hour, this.minute, this.second, 0);\n      }\n    } else {\n      return new Date(this.toUnixTime() * 1000);\n    }\n  }\n\n  _normalize() {\n    if (this._time.isDate) {\n      this._time.hour = 0;\n      this._time.minute = 0;\n      this._time.second = 0;\n    }\n    this.adjust(0, 0, 0, 0);\n\n    return this;\n  }\n\n  /**\n   * Adjust the date/time by the given offset\n   *\n   * @param {Number} aExtraDays       The extra amount of days\n   * @param {Number} aExtraHours      The extra amount of hours\n   * @param {Number} aExtraMinutes    The extra amount of minutes\n   * @param {Number} aExtraSeconds    The extra amount of seconds\n   * @param {Number=} aTime           The time to adjust, defaults to the\n   *                                    current instance.\n   */\n  adjust(aExtraDays, aExtraHours, aExtraMinutes, aExtraSeconds, aTime) {\n\n    let minutesOverflow, hoursOverflow,\n        daysOverflow = 0, yearsOverflow = 0;\n\n    let second, minute, hour, day;\n    let daysInMonth;\n\n    let time = aTime || this._time;\n\n    if (!time.isDate) {\n      second = time.second + aExtraSeconds;\n      time.second = second % 60;\n      minutesOverflow = trunc(second / 60);\n      if (time.second < 0) {\n        time.second += 60;\n        minutesOverflow--;\n      }\n\n      minute = time.minute + aExtraMinutes + minutesOverflow;\n      time.minute = minute % 60;\n      hoursOverflow = trunc(minute / 60);\n      if (time.minute < 0) {\n        time.minute += 60;\n        hoursOverflow--;\n      }\n\n      hour = time.hour + aExtraHours + hoursOverflow;\n\n      time.hour = hour % 24;\n      daysOverflow = trunc(hour / 24);\n      if (time.hour < 0) {\n        time.hour += 24;\n        daysOverflow--;\n      }\n    }\n\n\n    // Adjust month and year first, because we need to know what month the day\n    // is in before adjusting it.\n    if (time.month > 12) {\n      yearsOverflow = trunc((time.month - 1) / 12);\n    } else if (time.month < 1) {\n      yearsOverflow = trunc(time.month / 12) - 1;\n    }\n\n    time.year += yearsOverflow;\n    time.month -= 12 * yearsOverflow;\n\n    // Now take care of the days (and adjust month if needed)\n    day = time.day + aExtraDays + daysOverflow;\n\n    if (day > 0) {\n      for (;;) {\n        daysInMonth = Time.daysInMonth(time.month, time.year);\n        if (day <= daysInMonth) {\n          break;\n        }\n\n        time.month++;\n        if (time.month > 12) {\n          time.year++;\n          time.month = 1;\n        }\n\n        day -= daysInMonth;\n      }\n    } else {\n      while (day <= 0) {\n        if (time.month == 1) {\n          time.year--;\n          time.month = 12;\n        } else {\n          time.month--;\n        }\n\n        day += Time.daysInMonth(time.month, time.year);\n      }\n    }\n\n    time.day = day;\n\n    this._cachedUnixTime = null;\n    return this;\n  }\n\n  /**\n   * Sets up the current instance from unix time, the number of seconds since\n   * January 1st, 1970.\n   *\n   * @param {Number} seconds      The seconds to set up with\n   */\n  fromUnixTime(seconds) {\n    this.zone = Timezone.utcTimezone;\n    // We could use `fromJSDate` here, but this is about twice as fast.\n    // We could also clone `epochTime` and use `adjust` for a more\n    // ical.js-centric approach, but this is about 100 times as fast.\n    let date = new Date(seconds * 1000);\n    this.year = date.getUTCFullYear();\n    this.month = date.getUTCMonth() + 1;\n    this.day = date.getUTCDate();\n    if (this._time.isDate) {\n      this.hour = 0;\n      this.minute = 0;\n      this.second = 0;\n    } else {\n      this.hour = date.getUTCHours();\n      this.minute = date.getUTCMinutes();\n      this.second = date.getUTCSeconds();\n    }\n\n    this._cachedUnixTime = null;\n  }\n\n  /**\n   * Converts the current instance to seconds since January 1st 1970.\n   *\n   * @return {Number}         Seconds since 1970\n   */\n  toUnixTime() {\n    if (this._cachedUnixTime !== null) {\n      return this._cachedUnixTime;\n    }\n    let offset = this.utcOffset();\n\n    // we use the offset trick to ensure\n    // that we are getting the actual UTC time\n    let ms = Date.UTC(\n      this.year,\n      this.month - 1,\n      this.day,\n      this.hour,\n      this.minute,\n      this.second - offset\n    );\n\n    // seconds\n    this._cachedUnixTime = ms / 1000;\n    return this._cachedUnixTime;\n  }\n\n  /**\n   * Converts time to into Object which can be serialized then re-created\n   * using the constructor.\n   *\n   * @example\n   * // toJSON will automatically be called\n   * var json = JSON.stringify(mytime);\n   *\n   * var deserialized = JSON.parse(json);\n   *\n   * var time = new ICAL.Time(deserialized);\n   *\n   * @return {Object}\n   */\n  toJSON() {\n    let copy = [\n      'year',\n      'month',\n      'day',\n      'hour',\n      'minute',\n      'second',\n      'isDate'\n    ];\n\n    let result = Object.create(null);\n\n    let i = 0;\n    let len = copy.length;\n    let prop;\n\n    for (; i < len; i++) {\n      prop = copy[i];\n      result[prop] = this[prop];\n    }\n\n    if (this.zone) {\n      result.timezone = this.zone.tzid;\n    }\n\n    return result;\n  }\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n\n/**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n *\n * @ignore\n * @typedef {import(\"./types.js\").parserState} parserState\n * Imports the 'parserState' type from the \"types.js\" module\n * @typedef {import(\"./types.js\").designSet} designSet\n * Imports the 'designSet' type from the \"types.js\" module\n */\n\nconst CHAR = /[^ \\t]/;\nconst VALUE_DELIMITER = ':';\nconst PARAM_DELIMITER = ';';\nconst PARAM_NAME_DELIMITER = '=';\nconst DEFAULT_VALUE_TYPE$1 = 'unknown';\nconst DEFAULT_PARAM_TYPE = 'text';\nconst RFC6868_REPLACE_MAP$1 = { \"^'\": '\"', \"^n\": \"\\n\", \"^^\": \"^\" };\n\n/**\n * Parses iCalendar or vCard data into a raw jCal object. Consult\n * documentation on the {@tutorial layers|layers of parsing} for more\n * details.\n *\n * @function ICAL.parse\n * @memberof ICAL\n * @variation function\n * @todo Fix the API to be more clear on the return type\n * @param {String} input      The string data to parse\n * @return {Object|Object[]}  A single jCal object, or an array thereof\n */\nfunction parse(input) {\n  let state = {};\n  let root = state.component = [];\n\n  state.stack = [root];\n\n  parse._eachLine(input, function(err, line) {\n    parse._handleContentLine(line, state);\n  });\n\n\n  // when there are still items on the stack\n  // throw a fatal error, a component was not closed\n  // correctly in that case.\n  if (state.stack.length > 1) {\n    throw new ParserError(\n      'invalid ical body. component began but did not end'\n    );\n  }\n\n  state = null;\n\n  return (root.length == 1 ? root[0] : root);\n}\n\n/**\n * Parse an iCalendar property value into the jCal for a single property\n *\n * @function ICAL.parse.property\n * @param {String} str\n *   The iCalendar property string to parse\n * @param {designSet=} designSet\n *   The design data to use for this property\n * @return {Object}\n *   The jCal Object containing the property\n */\nparse.property = function(str, designSet) {\n  let state = {\n    component: [[], []],\n    designSet: designSet || design.defaultSet\n  };\n  parse._handleContentLine(str, state);\n  return state.component[1][0];\n};\n\n/**\n * Convenience method to parse a component. You can use ICAL.parse() directly\n * instead.\n *\n * @function ICAL.parse.component\n * @see ICAL.parse(function)\n * @param {String} str    The iCalendar component string to parse\n * @return {Object}       The jCal Object containing the component\n */\nparse.component = function(str) {\n  return parse(str);\n};\n\n\n/**\n * An error that occurred during parsing.\n *\n * @param {String} message        The error message\n * @memberof ICAL.parse\n * @extends {Error}\n */\nclass ParserError extends Error {\n  name = this.constructor.name;\n}\n\n// classes & constants\nparse.ParserError = ParserError;\n\n\n/**\n * Handles a single line of iCalendar/vCard, updating the state.\n *\n * @private\n * @function ICAL.parse._handleContentLine\n * @param {String} line          The content line to process\n * @param {parserState} state    The current state of the line parsing\n */\nparse._handleContentLine = function(line, state) {\n  // break up the parts of the line\n  let valuePos = line.indexOf(VALUE_DELIMITER);\n  let paramPos = line.indexOf(PARAM_DELIMITER);\n\n  let lastParamIndex;\n  let lastValuePos;\n\n  // name of property or begin/end\n  let name;\n  let value;\n  // params is only overridden if paramPos !== -1.\n  // we can't do params = params || {} later on\n  // because it sacrifices ops.\n  let params = {};\n\n  /**\n   * Different property cases\n   *\n   *\n   * 1. RRULE:FREQ=foo\n   *    // FREQ= is not a param but the value\n   *\n   * 2. ATTENDEE;ROLE=REQ-PARTICIPANT;\n   *    // ROLE= is a param because : has not happened yet\n   */\n    // when the parameter delimiter is after the\n    // value delimiter then it is not a parameter.\n\n  if ((paramPos !== -1 && valuePos !== -1)) {\n    // when the parameter delimiter is after the\n    // value delimiter then it is not a parameter.\n    if (paramPos > valuePos) {\n      paramPos = -1;\n    }\n  }\n\n  let parsedParams;\n  if (paramPos !== -1) {\n    name = line.slice(0, Math.max(0, paramPos)).toLowerCase();\n    parsedParams = parse._parseParameters(line.slice(Math.max(0, paramPos)), 0, state.designSet);\n    if (parsedParams[2] == -1) {\n      throw new ParserError(\"Invalid parameters in '\" + line + \"'\");\n    }\n    params = parsedParams[0];\n    // Handle parameter values with multiple entries\n    let parsedParamLength;\n    if (typeof parsedParams[1] === 'string') {\n      parsedParamLength = parsedParams[1].length;\n    } else {\n      parsedParamLength = parsedParams[1].reduce((accumulator, currentValue) => {\n        return accumulator + currentValue.length;\n      }, 0);\n    }\n    lastParamIndex = parsedParamLength + parsedParams[2] + paramPos;\n    if ((lastValuePos =\n      line.slice(Math.max(0, lastParamIndex)).indexOf(VALUE_DELIMITER)) !== -1) {\n      value = line.slice(Math.max(0, lastParamIndex + lastValuePos + 1));\n    } else {\n      throw new ParserError(\"Missing parameter value in '\" + line + \"'\");\n    }\n  } else if (valuePos !== -1) {\n    // without parmeters (BEGIN:VCAENDAR, CLASS:PUBLIC)\n    name = line.slice(0, Math.max(0, valuePos)).toLowerCase();\n    value = line.slice(Math.max(0, valuePos + 1));\n\n    if (name === 'begin') {\n      let newComponent = [value.toLowerCase(), [], []];\n      if (state.stack.length === 1) {\n        state.component.push(newComponent);\n      } else {\n        state.component[2].push(newComponent);\n      }\n      state.stack.push(state.component);\n      state.component = newComponent;\n      if (!state.designSet) {\n        state.designSet = design.getDesignSet(state.component[0]);\n      }\n      return;\n    } else if (name === 'end') {\n      state.component = state.stack.pop();\n      return;\n    }\n    // If it is not begin/end, then this is a property with an empty value,\n    // which should be considered valid.\n  } else {\n    /**\n     * Invalid line.\n     * The rational to throw an error is we will\n     * never be certain that the rest of the file\n     * is sane and it is unlikely that we can serialize\n     * the result correctly either.\n     */\n    throw new ParserError(\n      'invalid line (no token \";\" or \":\") \"' + line + '\"'\n    );\n  }\n\n  let valueType;\n  let multiValue = false;\n  let structuredValue = false;\n  let propertyDetails;\n  let splitName;\n  let ungroupedName;\n\n  // fetch the ungrouped part of the name\n  if (state.designSet.propertyGroups && name.indexOf('.') !== -1) {\n    splitName = name.split('.');\n    params.group = splitName[0];\n    ungroupedName = splitName[1];\n  } else {\n    ungroupedName = name;\n  }\n\n  if (ungroupedName in state.designSet.property) {\n    propertyDetails = state.designSet.property[ungroupedName];\n\n    if ('multiValue' in propertyDetails) {\n      multiValue = propertyDetails.multiValue;\n    }\n\n    if ('structuredValue' in propertyDetails) {\n      structuredValue = propertyDetails.structuredValue;\n    }\n\n    if (value && 'detectType' in propertyDetails) {\n      valueType = propertyDetails.detectType(value);\n    }\n  }\n\n  // attempt to determine value\n  if (!valueType) {\n    if (!('value' in params)) {\n      if (propertyDetails) {\n        valueType = propertyDetails.defaultType;\n      } else {\n        valueType = DEFAULT_VALUE_TYPE$1;\n      }\n    } else {\n      // possible to avoid this?\n      valueType = params.value.toLowerCase();\n    }\n  }\n\n  delete params.value;\n\n  /**\n   * Note on `var result` juggling:\n   *\n   * I observed that building the array in pieces has adverse\n   * effects on performance, so where possible we inline the creation.\n   * It is a little ugly but resulted in ~2000 additional ops/sec.\n   */\n\n  let result;\n  if (multiValue && structuredValue) {\n    value = parse._parseMultiValue(value, structuredValue, valueType, [], multiValue, state.designSet, structuredValue);\n    result = [ungroupedName, params, valueType, value];\n  } else if (multiValue) {\n    result = [ungroupedName, params, valueType];\n    parse._parseMultiValue(value, multiValue, valueType, result, null, state.designSet, false);\n  } else if (structuredValue) {\n    value = parse._parseMultiValue(value, structuredValue, valueType, [], null, state.designSet, structuredValue);\n    result = [ungroupedName, params, valueType, value];\n  } else {\n    value = parse._parseValue(value, valueType, state.designSet, false);\n    result = [ungroupedName, params, valueType, value];\n  }\n  // rfc6350 requires that in vCard 4.0 the first component is the VERSION\n  // component with as value 4.0, note that 3.0 does not have this requirement.\n  if (state.component[0] === 'vcard' && state.component[1].length === 0 &&\n          !(name === 'version' && value === '4.0')) {\n    state.designSet = design.getDesignSet(\"vcard3\");\n  }\n  state.component[1].push(result);\n};\n\n/**\n * Parse a value from the raw value into the jCard/jCal value.\n *\n * @private\n * @function ICAL.parse._parseValue\n * @param {String} value          Original value\n * @param {String} type           Type of value\n * @param {Object} designSet      The design data to use for this value\n * @return {Object} varies on type\n */\nparse._parseValue = function(value, type, designSet, structuredValue) {\n  if (type in designSet.value && 'fromICAL' in designSet.value[type]) {\n    return designSet.value[type].fromICAL(value, structuredValue);\n  }\n  return value;\n};\n\n/**\n * Parse parameters from a string to object.\n *\n * @function ICAL.parse._parseParameters\n * @private\n * @param {String} line               A single unfolded line\n * @param {Number} start              Position to start looking for properties\n * @param {Object} designSet          The design data to use for this property\n * @return {Array}                    Array containing key/valye pairs of parsed parameters, the\n *                                      parsed value, and the position of the last parameter found\n */\nparse._parseParameters = function(line, start, designSet) {\n  let lastParam = start;\n  let pos = 0;\n  let delim = PARAM_NAME_DELIMITER;\n  let result = {};\n  let name, lcname;\n  let value, valuePos = -1;\n  let type, multiValue, mvdelim;\n\n  // find the next '=' sign\n  // use lastParam and pos to find name\n  // check if \" is used if so get value from \"->\"\n  // then increment pos to find next ;\n\n  while ((pos !== false) &&\n         (pos = line.indexOf(delim, pos + 1)) !== -1) {\n\n    name = line.slice(lastParam + 1, pos);\n    if (name.length == 0) {\n      throw new ParserError(\"Empty parameter name in '\" + line + \"'\");\n    }\n    lcname = name.toLowerCase();\n    mvdelim = false;\n    multiValue = false;\n\n    if (lcname in designSet.param && designSet.param[lcname].valueType) {\n      type = designSet.param[lcname].valueType;\n    } else {\n      type = DEFAULT_PARAM_TYPE;\n    }\n\n    if (lcname in designSet.param) {\n      multiValue = designSet.param[lcname].multiValue;\n      if (designSet.param[lcname].multiValueSeparateDQuote) {\n        mvdelim = parse._rfc6868Escape('\"' + multiValue + '\"');\n      }\n    }\n\n    let nextChar = line[pos + 1];\n    if (nextChar === '\"') {\n      valuePos = pos + 2;\n      pos = line.indexOf('\"', valuePos);\n      if (multiValue && pos != -1) {\n          let extendedValue = true;\n          while (extendedValue) {\n            if (line[pos + 1] == multiValue && line[pos + 2] == '\"') {\n              pos = line.indexOf('\"', pos + 3);\n            } else {\n              extendedValue = false;\n            }\n          }\n        }\n      if (pos === -1) {\n        throw new ParserError(\n          'invalid line (no matching double quote) \"' + line + '\"'\n        );\n      }\n      value = line.slice(valuePos, pos);\n      lastParam = line.indexOf(PARAM_DELIMITER, pos);\n      let propValuePos = line.indexOf(VALUE_DELIMITER, pos);\n      // if either no next parameter or delimeter in property value, let's stop here\n      if (lastParam === -1 || (propValuePos !== -1 && lastParam > propValuePos)) {\n        pos = false;\n      }\n    } else {\n      valuePos = pos + 1;\n\n      // move to next \";\"\n      let nextPos = line.indexOf(PARAM_DELIMITER, valuePos);\n      let propValuePos = line.indexOf(VALUE_DELIMITER, valuePos);\n      if (propValuePos !== -1 && nextPos > propValuePos) {\n        // this is a delimiter in the property value, let's stop here\n        nextPos = propValuePos;\n        pos = false;\n      } else if (nextPos === -1) {\n        // no \";\"\n        if (propValuePos === -1) {\n          nextPos = line.length;\n        } else {\n          nextPos = propValuePos;\n        }\n        pos = false;\n      } else {\n        lastParam = nextPos;\n        pos = nextPos;\n      }\n\n      value = line.slice(valuePos, nextPos);\n    }\n\n    const length_before = value.length;\n    value = parse._rfc6868Escape(value);\n    valuePos += length_before - value.length;\n    if (multiValue) {\n      let delimiter = mvdelim || multiValue;\n      value = parse._parseMultiValue(value, delimiter, type, [], null, designSet);\n    } else {\n      value = parse._parseValue(value, type, designSet);\n    }\n\n    if (multiValue && (lcname in result)) {\n      if (Array.isArray(result[lcname])) {\n        result[lcname].push(value);\n      } else {\n        result[lcname] = [\n          result[lcname],\n          value\n        ];\n      }\n    } else {\n      result[lcname] = value;\n    }\n  }\n  return [result, value, valuePos];\n};\n\n/**\n * Internal helper for rfc6868. Exposing this on ICAL.parse so that\n * hackers can disable the rfc6868 parsing if the really need to.\n *\n * @function ICAL.parse._rfc6868Escape\n * @param {String} val        The value to escape\n * @return {String}           The escaped value\n */\nparse._rfc6868Escape = function(val) {\n  return val.replace(/\\^['n^]/g, function(x) {\n    return RFC6868_REPLACE_MAP$1[x];\n  });\n};\n\n/**\n * Parse a multi value string. This function is used either for parsing\n * actual multi-value property's values, or for handling parameter values. It\n * can be used for both multi-value properties and structured value properties.\n *\n * @private\n * @function ICAL.parse._parseMultiValue\n * @param {String} buffer           The buffer containing the full value\n * @param {String} delim            The multi-value delimiter\n * @param {String} type             The value type to be parsed\n * @param {Array.<?>} result        The array to append results to, varies on value type\n * @param {String} innerMulti       The inner delimiter to split each value with\n * @param {designSet} designSet     The design data for this value\n * @return {?|Array.<?>}            Either an array of results, or the first result\n */\nparse._parseMultiValue = function(buffer, delim, type, result, innerMulti, designSet, structuredValue) {\n  let pos = 0;\n  let lastPos = 0;\n  let value;\n  if (delim.length === 0) {\n    return buffer;\n  }\n\n  // split each piece\n  while ((pos = unescapedIndexOf(buffer, delim, lastPos)) !== -1) {\n    value = buffer.slice(lastPos, pos);\n    if (innerMulti) {\n      value = parse._parseMultiValue(value, innerMulti, type, [], null, designSet, structuredValue);\n    } else {\n      value = parse._parseValue(value, type, designSet, structuredValue);\n    }\n    result.push(value);\n    lastPos = pos + delim.length;\n  }\n\n  // on the last piece take the rest of string\n  value = buffer.slice(lastPos);\n  if (innerMulti) {\n    value = parse._parseMultiValue(value, innerMulti, type, [], null, designSet, structuredValue);\n  } else {\n    value = parse._parseValue(value, type, designSet, structuredValue);\n  }\n  result.push(value);\n\n  return result.length == 1 ? result[0] : result;\n};\n\n/**\n * Process a complete buffer of iCalendar/vCard data line by line, correctly\n * unfolding content. Each line will be processed with the given callback\n *\n * @private\n * @function ICAL.parse._eachLine\n * @param {String} buffer                         The buffer to process\n * @param {function(?String, String)} callback    The callback for each line\n */\nparse._eachLine = function(buffer, callback) {\n  let len = buffer.length;\n  let lastPos = buffer.search(CHAR);\n  let pos = lastPos;\n  let line;\n  let firstChar;\n\n  let newlineOffset;\n\n  do {\n    pos = buffer.indexOf('\\n', lastPos) + 1;\n\n    if (pos > 1 && buffer[pos - 2] === '\\r') {\n      newlineOffset = 2;\n    } else {\n      newlineOffset = 1;\n    }\n\n    if (pos === 0) {\n      pos = len;\n      newlineOffset = 0;\n    }\n\n    firstChar = buffer[lastPos];\n\n    if (firstChar === ' ' || firstChar === '\\t') {\n      // add to line\n      line += buffer.slice(lastPos + 1, pos - newlineOffset);\n    } else {\n      if (line)\n        callback(null, line);\n      // push line\n      line = buffer.slice(lastPos, pos - newlineOffset);\n    }\n\n    lastPos = pos;\n  } while (pos !== len);\n\n  // extra ending line\n  line = line.trim();\n\n  if (line.length)\n    callback(null, line);\n};\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n\nconst OPTIONS = [\"tzid\", \"location\", \"tznames\", \"latitude\", \"longitude\"];\n\n/**\n * Timezone representation.\n *\n * @example\n * var vcalendar;\n * var timezoneComp = vcalendar.getFirstSubcomponent('vtimezone');\n * var tzid = timezoneComp.getFirstPropertyValue('tzid');\n *\n * var timezone = new ICAL.Timezone({\n *   component: timezoneComp,\n *   tzid\n * });\n *\n * @memberof ICAL\n */\nclass Timezone {\n  static _compare_change_fn(a, b) {\n    if (a.year < b.year) return -1;\n    else if (a.year > b.year) return 1;\n\n    if (a.month < b.month) return -1;\n    else if (a.month > b.month) return 1;\n\n    if (a.day < b.day) return -1;\n    else if (a.day > b.day) return 1;\n\n    if (a.hour < b.hour) return -1;\n    else if (a.hour > b.hour) return 1;\n\n    if (a.minute < b.minute) return -1;\n    else if (a.minute > b.minute) return 1;\n\n    if (a.second < b.second) return -1;\n    else if (a.second > b.second) return 1;\n\n    return 0;\n  }\n\n  /**\n   * Convert the date/time from one zone to the next.\n   *\n   * @param {Time} tt                  The time to convert\n   * @param {Timezone} from_zone       The source zone to convert from\n   * @param {Timezone} to_zone         The target zone to convert to\n   * @return {Time}                    The converted date/time object\n   */\n  static convert_time(tt, from_zone, to_zone) {\n    if (tt.isDate ||\n        from_zone.tzid == to_zone.tzid ||\n        from_zone == Timezone.localTimezone ||\n        to_zone == Timezone.localTimezone) {\n      tt.zone = to_zone;\n      return tt;\n    }\n\n    let utcOffset = from_zone.utcOffset(tt);\n    tt.adjust(0, 0, 0, - utcOffset);\n\n    utcOffset = to_zone.utcOffset(tt);\n    tt.adjust(0, 0, 0, utcOffset);\n\n    return null;\n  }\n\n  /**\n   * Creates a new ICAL.Timezone instance from the passed data object.\n   *\n   * @param {Component|Object} aData options for class\n   * @param {String|Component} aData.component\n   *        If aData is a simple object, then this member can be set to either a\n   *        string containing the component data, or an already parsed\n   *        ICAL.Component\n   * @param {String} aData.tzid      The timezone identifier\n   * @param {String} aData.location  The timezone locationw\n   * @param {String} aData.tznames   An alternative string representation of the\n   *                                  timezone\n   * @param {Number} aData.latitude  The latitude of the timezone\n   * @param {Number} aData.longitude The longitude of the timezone\n   */\n  static fromData(aData) {\n    let tt = new Timezone();\n    return tt.fromData(aData);\n  }\n\n  /**\n   * The instance describing the UTC timezone\n   * @type {Timezone}\n   * @constant\n   * @instance\n   */\n  static #utcTimezone = null;\n  static get utcTimezone() {\n    if (!this.#utcTimezone) {\n      this.#utcTimezone = Timezone.fromData({\n        tzid: \"UTC\"\n      });\n    }\n    return this.#utcTimezone;\n  }\n\n  /**\n   * The instance describing the local timezone\n   * @type {Timezone}\n   * @constant\n   * @instance\n   */\n  static #localTimezone = null;\n  static get localTimezone() {\n    if (!this.#localTimezone) {\n      this.#localTimezone = Timezone.fromData({\n        tzid: \"floating\"\n      });\n    }\n    return this.#localTimezone;\n  }\n\n  /**\n   * Adjust a timezone change object.\n   * @private\n   * @param {Object} change     The timezone change object\n   * @param {Number} days       The extra amount of days\n   * @param {Number} hours      The extra amount of hours\n   * @param {Number} minutes    The extra amount of minutes\n   * @param {Number} seconds    The extra amount of seconds\n   */\n  static adjust_change(change, days, hours, minutes, seconds) {\n    return Time.prototype.adjust.call(\n      change,\n      days,\n      hours,\n      minutes,\n      seconds,\n      change\n    );\n  }\n\n  static _minimumExpansionYear = -1;\n  static EXTRA_COVERAGE = 5;\n\n  /**\n   * Creates a new ICAL.Timezone instance, by passing in a tzid and component.\n   *\n   * @param {Component|Object} data options for class\n   * @param {String|Component} data.component\n   *        If data is a simple object, then this member can be set to either a\n   *        string containing the component data, or an already parsed\n   *        ICAL.Component\n   * @param {String} data.tzid      The timezone identifier\n   * @param {String} data.location  The timezone locationw\n   * @param {String} data.tznames   An alternative string representation of the\n   *                                  timezone\n   * @param {Number} data.latitude  The latitude of the timezone\n   * @param {Number} data.longitude The longitude of the timezone\n   */\n  constructor(data) {\n    this.wrappedJSObject = this;\n    this.fromData(data);\n  }\n\n\n  /**\n   * Timezone identifier\n   * @type {String}\n   */\n  tzid = \"\";\n\n  /**\n   * Timezone location\n   * @type {String}\n   */\n  location = \"\";\n\n  /**\n   * Alternative timezone name, for the string representation\n   * @type {String}\n   */\n  tznames = \"\";\n\n  /**\n   * The primary latitude for the timezone.\n   * @type {Number}\n   */\n  latitude = 0.0;\n\n  /**\n   * The primary longitude for the timezone.\n   * @type {Number}\n   */\n  longitude = 0.0;\n\n  /**\n   * The vtimezone component for this timezone.\n   * @type {Component}\n   */\n  component = null;\n\n  /**\n   * The year this timezone has been expanded to. All timezone transition\n   * dates until this year are known and can be used for calculation\n   *\n   * @private\n   * @type {Number}\n   */\n  expandedUntilYear = 0;\n\n  /**\n   * The class identifier.\n   * @constant\n   * @type {String}\n   * @default \"icaltimezone\"\n   */\n  icalclass = \"icaltimezone\";\n\n  /**\n   * Sets up the current instance using members from the passed data object.\n   *\n   * @param {Component|Object} aData options for class\n   * @param {String|Component} aData.component\n   *        If aData is a simple object, then this member can be set to either a\n   *        string containing the component data, or an already parsed\n   *        ICAL.Component\n   * @param {String} aData.tzid      The timezone identifier\n   * @param {String} aData.location  The timezone locationw\n   * @param {String} aData.tznames   An alternative string representation of the\n   *                                  timezone\n   * @param {Number} aData.latitude  The latitude of the timezone\n   * @param {Number} aData.longitude The longitude of the timezone\n   */\n  fromData(aData) {\n    this.expandedUntilYear = 0;\n    this.changes = [];\n\n    if (aData instanceof Component) {\n      // Either a component is passed directly\n      this.component = aData;\n    } else {\n      // Otherwise the component may be in the data object\n      if (aData && \"component\" in aData) {\n        if (typeof aData.component == \"string\") {\n          // If a string was passed, parse it as a component\n          let jCal = parse(aData.component);\n          this.component = new Component(jCal);\n        } else if (aData.component instanceof Component) {\n          // If it was a component already, then just set it\n          this.component = aData.component;\n        } else {\n          // Otherwise just null out the component\n          this.component = null;\n        }\n      }\n\n      // Copy remaining passed properties\n      for (let prop of OPTIONS) {\n        if (aData && prop in aData) {\n          this[prop] = aData[prop];\n        }\n      }\n    }\n\n    // If we have a component but no TZID, attempt to get it from the\n    // component's properties.\n    if (this.component instanceof Component && !this.tzid) {\n      this.tzid = this.component.getFirstPropertyValue('tzid');\n    }\n\n    return this;\n  }\n\n  /**\n   * Finds the utcOffset the given time would occur in this timezone.\n   *\n   * @param {Time} tt         The time to check for\n   * @return {Number}         utc offset in seconds\n   */\n  utcOffset(tt) {\n    if (this == Timezone.utcTimezone || this == Timezone.localTimezone) {\n      return 0;\n    }\n\n    this._ensureCoverage(tt.year);\n\n    if (!this.changes.length) {\n      return 0;\n    }\n\n    let tt_change = {\n      year: tt.year,\n      month: tt.month,\n      day: tt.day,\n      hour: tt.hour,\n      minute: tt.minute,\n      second: tt.second\n    };\n\n    let change_num = this._findNearbyChange(tt_change);\n    let change_num_to_use = -1;\n    let step = 1;\n\n    // TODO: replace with bin search?\n    for (;;) {\n      let change = clone(this.changes[change_num], true);\n      if (change.utcOffset < change.prevUtcOffset) {\n        Timezone.adjust_change(change, 0, 0, 0, change.utcOffset);\n      } else {\n        Timezone.adjust_change(change, 0, 0, 0,\n                                        change.prevUtcOffset);\n      }\n\n      let cmp = Timezone._compare_change_fn(tt_change, change);\n\n      if (cmp >= 0) {\n        change_num_to_use = change_num;\n      } else {\n        step = -1;\n      }\n\n      if (step == -1 && change_num_to_use != -1) {\n        break;\n      }\n\n      change_num += step;\n\n      if (change_num < 0) {\n        return 0;\n      }\n\n      if (change_num >= this.changes.length) {\n        break;\n      }\n    }\n\n    let zone_change = this.changes[change_num_to_use];\n    let utcOffset_change = zone_change.utcOffset - zone_change.prevUtcOffset;\n\n    if (utcOffset_change < 0 && change_num_to_use > 0) {\n      let tmp_change = clone(zone_change, true);\n      Timezone.adjust_change(tmp_change, 0, 0, 0, tmp_change.prevUtcOffset);\n\n      if (Timezone._compare_change_fn(tt_change, tmp_change) < 0) {\n        let prev_zone_change = this.changes[change_num_to_use - 1];\n\n        let want_daylight = false; // TODO\n\n        if (zone_change.is_daylight != want_daylight &&\n            prev_zone_change.is_daylight == want_daylight) {\n          zone_change = prev_zone_change;\n        }\n      }\n    }\n\n    // TODO return is_daylight?\n    return zone_change.utcOffset;\n  }\n\n  _findNearbyChange(change) {\n    // find the closest match\n    let idx = binsearchInsert(\n      this.changes,\n      change,\n      Timezone._compare_change_fn\n    );\n\n    if (idx >= this.changes.length) {\n      return this.changes.length - 1;\n    }\n\n    return idx;\n  }\n\n  _ensureCoverage(aYear) {\n    if (Timezone._minimumExpansionYear == -1) {\n      let today = Time.now();\n      Timezone._minimumExpansionYear = today.year;\n    }\n\n    let changesEndYear = aYear;\n    if (changesEndYear < Timezone._minimumExpansionYear) {\n      changesEndYear = Timezone._minimumExpansionYear;\n    }\n\n    changesEndYear += Timezone.EXTRA_COVERAGE;\n\n    if (!this.changes.length || this.expandedUntilYear < aYear) {\n      let subcomps = this.component.getAllSubcomponents();\n      let compLen = subcomps.length;\n      let compIdx = 0;\n\n      for (; compIdx < compLen; compIdx++) {\n        this._expandComponent(\n          subcomps[compIdx], changesEndYear, this.changes\n        );\n      }\n\n      this.changes.sort(Timezone._compare_change_fn);\n      this.expandedUntilYear = changesEndYear;\n    }\n  }\n\n  _expandComponent(aComponent, aYear, changes) {\n    if (!aComponent.hasProperty(\"dtstart\") ||\n        !aComponent.hasProperty(\"tzoffsetto\") ||\n        !aComponent.hasProperty(\"tzoffsetfrom\")) {\n      return null;\n    }\n\n    let dtstart = aComponent.getFirstProperty(\"dtstart\").getFirstValue();\n    let change;\n\n    function convert_tzoffset(offset) {\n      return offset.factor * (offset.hours * 3600 + offset.minutes * 60);\n    }\n\n    function init_changes() {\n      let changebase = {};\n      changebase.is_daylight = (aComponent.name == \"daylight\");\n      changebase.utcOffset = convert_tzoffset(\n        aComponent.getFirstProperty(\"tzoffsetto\").getFirstValue()\n      );\n\n      changebase.prevUtcOffset = convert_tzoffset(\n        aComponent.getFirstProperty(\"tzoffsetfrom\").getFirstValue()\n      );\n\n      return changebase;\n    }\n\n    if (!aComponent.hasProperty(\"rrule\") && !aComponent.hasProperty(\"rdate\")) {\n      change = init_changes();\n      change.year = dtstart.year;\n      change.month = dtstart.month;\n      change.day = dtstart.day;\n      change.hour = dtstart.hour;\n      change.minute = dtstart.minute;\n      change.second = dtstart.second;\n\n      Timezone.adjust_change(change, 0, 0, 0, -change.prevUtcOffset);\n      changes.push(change);\n    } else {\n      let props = aComponent.getAllProperties(\"rdate\");\n      for (let rdate of props) {\n        let time = rdate.getFirstValue();\n        change = init_changes();\n\n        change.year = time.year;\n        change.month = time.month;\n        change.day = time.day;\n\n        if (time.isDate) {\n          change.hour = dtstart.hour;\n          change.minute = dtstart.minute;\n          change.second = dtstart.second;\n\n          if (dtstart.zone != Timezone.utcTimezone) {\n            Timezone.adjust_change(change, 0, 0, 0, -change.prevUtcOffset);\n          }\n        } else {\n          change.hour = time.hour;\n          change.minute = time.minute;\n          change.second = time.second;\n\n          if (time.zone != Timezone.utcTimezone) {\n            Timezone.adjust_change(change, 0, 0, 0, -change.prevUtcOffset);\n          }\n        }\n\n        changes.push(change);\n      }\n\n      let rrule = aComponent.getFirstProperty(\"rrule\");\n\n      if (rrule) {\n        rrule = rrule.getFirstValue();\n        change = init_changes();\n\n        if (rrule.until && rrule.until.zone == Timezone.utcTimezone) {\n          rrule.until.adjust(0, 0, 0, change.prevUtcOffset);\n          rrule.until.zone = Timezone.localTimezone;\n        }\n\n        let iterator = rrule.iterator(dtstart);\n\n        let occ;\n        while ((occ = iterator.next())) {\n          change = init_changes();\n          if (occ.year > aYear || !occ) {\n            break;\n          }\n\n          change.year = occ.year;\n          change.month = occ.month;\n          change.day = occ.day;\n          change.hour = occ.hour;\n          change.minute = occ.minute;\n          change.second = occ.second;\n          change.isDate = occ.isDate;\n\n          Timezone.adjust_change(change, 0, 0, 0, -change.prevUtcOffset);\n          changes.push(change);\n        }\n      }\n    }\n\n    return changes;\n  }\n\n  /**\n   * The string representation of this timezone.\n   * @return {String}\n   */\n  toString() {\n    return (this.tznames ? this.tznames : this.tzid);\n  }\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n\nlet zones = null;\n\n/**\n * @classdesc\n * Singleton class to contain timezones.  Right now it is all manual registry in\n * the future we may use this class to download timezone information or handle\n * loading pre-expanded timezones.\n *\n * @exports module:ICAL.TimezoneService\n * @memberof ICAL\n */\nconst TimezoneService = {\n  get count() {\n    if (zones === null) {\n      return 0;\n    }\n\n    return Object.keys(zones).length;\n  },\n\n  reset: function() {\n    zones = Object.create(null);\n    let utc = Timezone.utcTimezone;\n\n    zones.Z = utc;\n    zones.UTC = utc;\n    zones.GMT = utc;\n  },\n  _hard_reset: function() {\n    zones = null;\n  },\n\n  /**\n   * Checks if timezone id has been registered.\n   *\n   * @param {String} tzid     Timezone identifier (e.g. America/Los_Angeles)\n   * @return {Boolean}        False, when not present\n   */\n  has: function(tzid) {\n    if (zones === null) {\n      return false;\n    }\n\n    return !!zones[tzid];\n  },\n\n  /**\n   * Returns a timezone by its tzid if present.\n   *\n   * @param {String} tzid               Timezone identifier (e.g. America/Los_Angeles)\n   * @return {Timezone | undefined}     The timezone, or undefined if not found\n   */\n  get: function(tzid) {\n    if (zones === null) {\n      this.reset();\n    }\n\n    return zones[tzid];\n  },\n\n  /**\n   * Registers a timezone object or component.\n   *\n   * @param {Component|Timezone} timezone\n   *        The initialized zone or vtimezone.\n   *\n   * @param {String=} name\n   *        The name of the timezone. Defaults to the component's TZID if not\n   *        passed.\n   */\n  register: function(timezone, name) {\n    if (zones === null) {\n      this.reset();\n    }\n\n    // This avoids a breaking change by the change of argument order\n    // TODO remove in v3\n    if (typeof timezone === \"string\" && name instanceof Timezone) {\n      [timezone, name] = [name, timezone];\n    }\n\n    if (!name) {\n      if (timezone instanceof Timezone) {\n        name = timezone.tzid;\n      } else {\n        if (timezone.name === 'vtimezone') {\n          timezone = new Timezone(timezone);\n          name = timezone.tzid;\n        }\n      }\n    }\n\n    if (!name) {\n      throw new TypeError(\"Neither a timezone nor a name was passed\");\n    }\n\n    if (timezone instanceof Timezone) {\n      zones[name] = timezone;\n    } else {\n      throw new TypeError('timezone must be ICAL.Timezone or ICAL.Component');\n    }\n  },\n\n  /**\n   * Removes a timezone by its tzid from the list.\n   *\n   * @param {String} tzid     Timezone identifier (e.g. America/Los_Angeles)\n   * @return {?Timezone}      The removed timezone, or null if not registered\n   */\n  remove: function(tzid) {\n    if (zones === null) {\n      return null;\n    }\n\n    return (delete zones[tzid]);\n  }\n};\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n\n/**\n * Helper functions used in various places within ical.js\n * @module ICAL.helpers\n */\n\n/**\n * Compiles a list of all referenced TZIDs in all subcomponents and\n * removes any extra VTIMEZONE subcomponents. In addition, if any TZIDs\n * are referenced by a component, but a VTIMEZONE does not exist,\n * an attempt will be made to generate a VTIMEZONE using ICAL.TimezoneService.\n *\n * @param {Component} vcal     The top-level VCALENDAR component.\n * @return {Component}         The ICAL.Component that was passed in.\n */\nfunction updateTimezones(vcal) {\n  let allsubs, properties, vtimezones, reqTzid, i;\n\n  if (!vcal || vcal.name !== \"vcalendar\") {\n    //not a top-level vcalendar component\n    return vcal;\n  }\n\n  //Store vtimezone subcomponents in an object reference by tzid.\n  //Store properties from everything else in another array\n  allsubs = vcal.getAllSubcomponents();\n  properties = [];\n  vtimezones = {};\n  for (i = 0; i < allsubs.length; i++) {\n    if (allsubs[i].name === \"vtimezone\") {\n      let tzid = allsubs[i].getFirstProperty(\"tzid\").getFirstValue();\n      vtimezones[tzid] = allsubs[i];\n    } else {\n      properties = properties.concat(allsubs[i].getAllProperties());\n    }\n  }\n\n  //create an object with one entry for each required tz\n  reqTzid = {};\n  for (i = 0; i < properties.length; i++) {\n    let tzid = properties[i].getParameter(\"tzid\");\n    if (tzid) {\n      reqTzid[tzid] = true;\n    }\n  }\n\n  //delete any vtimezones that are not on the reqTzid list.\n  for (let [tzid, comp] of Object.entries(vtimezones)) {\n    if (!reqTzid[tzid]) {\n      vcal.removeSubcomponent(comp);\n    }\n  }\n\n  //create any missing, but registered timezones\n  for (let tzid of Object.keys(reqTzid)) {\n    if (!vtimezones[tzid] && TimezoneService.has(tzid)) {\n      vcal.addSubcomponent(TimezoneService.get(tzid).component);\n    }\n  }\n\n  return vcal;\n}\n\n/**\n * Checks if the given type is of the number type and also NaN.\n *\n * @param {Number} number     The number to check\n * @return {Boolean}          True, if the number is strictly NaN\n */\nfunction isStrictlyNaN(number) {\n  return typeof(number) === 'number' && isNaN(number);\n}\n\n/**\n * Parses a string value that is expected to be an integer, when the valid is\n * not an integer throws a decoration error.\n *\n * @param {String} string     Raw string input\n * @return {Number}           Parsed integer\n */\nfunction strictParseInt(string) {\n  let result = parseInt(string, 10);\n\n  if (isStrictlyNaN(result)) {\n    throw new Error(\n      'Could not extract integer from \"' + string + '\"'\n    );\n  }\n\n  return result;\n}\n\n/**\n * Creates or returns a class instance of a given type with the initialization\n * data if the data is not already an instance of the given type.\n *\n * @example\n * var time = new ICAL.Time(...);\n * var result = ICAL.helpers.formatClassType(time, ICAL.Time);\n *\n * (result instanceof ICAL.Time)\n * // => true\n *\n * result = ICAL.helpers.formatClassType({}, ICAL.Time);\n * (result isntanceof ICAL.Time)\n * // => true\n *\n *\n * @param {Object} data       object initialization data\n * @param {Object} type       object type (like ICAL.Time)\n * @return {?}                An instance of the found type.\n */\nfunction formatClassType(data, type) {\n  if (typeof(data) === 'undefined') {\n    return undefined;\n  }\n\n  if (data instanceof type) {\n    return data;\n  }\n  return new type(data);\n}\n\n/**\n * Identical to indexOf but will only match values when they are not preceded\n * by a backslash character.\n *\n * @param {String} buffer         String to search\n * @param {String} search         Value to look for\n * @param {Number} pos            Start position\n * @return {Number}               The position, or -1 if not found\n */\nfunction unescapedIndexOf(buffer, search, pos) {\n  while ((pos = buffer.indexOf(search, pos)) !== -1) {\n    if (pos > 0 && buffer[pos - 1] === '\\\\') {\n      pos += 1;\n    } else {\n      return pos;\n    }\n  }\n  return -1;\n}\n\n/**\n * Find the index for insertion using binary search.\n *\n * @param {Array} list            The list to search\n * @param {?} seekVal             The value to insert\n * @param {function(?,?)} cmpfunc The comparison func, that can\n *                                  compare two seekVals\n * @return {Number}               The insert position\n */\nfunction binsearchInsert(list, seekVal, cmpfunc) {\n  if (!list.length)\n    return 0;\n\n  let low = 0, high = list.length - 1,\n      mid, cmpval;\n\n  while (low <= high) {\n    mid = low + Math.floor((high - low) / 2);\n    cmpval = cmpfunc(seekVal, list[mid]);\n\n    if (cmpval < 0)\n      high = mid - 1;\n    else if (cmpval > 0)\n      low = mid + 1;\n    else\n      break;\n  }\n\n  if (cmpval < 0)\n    return mid; // insertion is displacing, so use mid outright.\n  else if (cmpval > 0)\n    return mid + 1;\n  else\n    return mid;\n}\n\n/**\n * Clone the passed object or primitive. By default a shallow clone will be\n * executed.\n *\n * @param {*} aSrc            The thing to clone\n * @param {Boolean=} aDeep    If true, a deep clone will be performed\n * @return {*}                The copy of the thing\n */\nfunction clone(aSrc, aDeep) {\n  if (!aSrc || typeof aSrc != \"object\") {\n    return aSrc;\n  } else if (aSrc instanceof Date) {\n    return new Date(aSrc.getTime());\n  } else if (\"clone\" in aSrc) {\n    return aSrc.clone();\n  } else if (Array.isArray(aSrc)) {\n    let arr = [];\n    for (let i = 0; i < aSrc.length; i++) {\n      arr.push(aDeep ? clone(aSrc[i], true) : aSrc[i]);\n    }\n    return arr;\n  } else {\n    let obj = {};\n    for (let [name, value] of Object.entries(aSrc)) {\n      if (aDeep) {\n        obj[name] = clone(value, true);\n      } else {\n        obj[name] = value;\n      }\n    }\n    return obj;\n  }\n}\n\n/**\n * Performs iCalendar line folding. A line ending character is inserted and\n * the next line begins with a whitespace.\n *\n * @example\n * SUMMARY:This line will be fold\n *  ed right in the middle of a word.\n *\n * @param {String} aLine      The line to fold\n * @return {String}           The folded line\n */\nfunction foldline(aLine) {\n  let result = \"\";\n  let line = aLine || \"\", pos = 0, line_length = 0;\n  //pos counts position in line for the UTF-16 presentation\n  //line_length counts the bytes for the UTF-8 presentation\n  while (line.length) {\n    let cp = line.codePointAt(pos);\n    if (cp < 128) ++line_length;\n    else if (cp < 2048) line_length += 2;//needs 2 UTF-8 bytes\n    else if (cp < 65536) line_length += 3;\n    else line_length += 4; //cp is less than 1114112\n    if (line_length < ICALmodule.foldLength + 1)\n      pos += cp > 65535 ? 2 : 1;\n    else {\n      result += ICALmodule.newLineChar + \" \" + line.slice(0, Math.max(0, pos));\n      line = line.slice(Math.max(0, pos));\n      pos = line_length = 0;\n    }\n  }\n  return result.slice(ICALmodule.newLineChar.length + 1);\n}\n\n/**\n * Pads the given string or number with zeros so it will have at least two\n * characters.\n *\n * @param {String|Number} data    The string or number to pad\n * @return {String}               The number padded as a string\n */\nfunction pad2(data) {\n  if (typeof(data) !== 'string') {\n    // handle fractions.\n    if (typeof(data) === 'number') {\n      data = parseInt(data);\n    }\n    data = String(data);\n  }\n\n  let len = data.length;\n\n  switch (len) {\n    case 0:\n      return '00';\n    case 1:\n      return '0' + data;\n    default:\n      return data;\n  }\n}\n\n/**\n * Truncates the given number, correctly handling negative numbers.\n *\n * @param {Number} number     The number to truncate\n * @return {Number}           The truncated number\n */\nfunction trunc(number) {\n  return (number < 0 ? Math.ceil(number) : Math.floor(number));\n}\n\n/**\n * Poor-man's cross-browser object extension. Doesn't support all the\n * features, but enough for our usage. Note that the target's properties are\n * not overwritten with the source properties.\n *\n * @example\n * var child = ICAL.helpers.extend(parent, {\n *   \"bar\": 123\n * });\n *\n * @param {Object} source     The object to extend\n * @param {Object} target     The object to extend with\n * @return {Object}           Returns the target.\n */\nfunction extend(source, target) {\n  for (let key in source) {\n    let descr = Object.getOwnPropertyDescriptor(source, key);\n    if (descr && !Object.getOwnPropertyDescriptor(target, key)) {\n      Object.defineProperty(target, key, descr);\n    }\n  }\n  return target;\n}\n\nvar helpers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  binsearchInsert: binsearchInsert,\n  clone: clone,\n  extend: extend,\n  foldline: foldline,\n  formatClassType: formatClassType,\n  isStrictlyNaN: isStrictlyNaN,\n  pad2: pad2,\n  strictParseInt: strictParseInt,\n  trunc: trunc,\n  unescapedIndexOf: unescapedIndexOf,\n  updateTimezones: updateTimezones\n});\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n\n/**\n * This class represents the \"utc-offset\" value type, with various calculation and manipulation\n * methods.\n *\n * @memberof ICAL\n */\nclass UtcOffset {\n  /**\n   * Creates a new {@link ICAL.UtcOffset} instance from the passed string.\n   *\n   * @param {String} aString    The string to parse\n   * @return {Duration}         The created utc-offset instance\n   */\n  static fromString(aString) {\n    // -05:00\n    let options = {};\n    //TODO: support seconds per rfc5545 ?\n    options.factor = (aString[0] === '+') ? 1 : -1;\n    options.hours = strictParseInt(aString.slice(1, 3));\n    options.minutes = strictParseInt(aString.slice(4, 6));\n\n    return new UtcOffset(options);\n  }\n\n  /**\n   * Creates a new {@link ICAL.UtcOffset} instance from the passed seconds\n   * value.\n   *\n   * @param {Number} aSeconds       The number of seconds to convert\n   */\n  static fromSeconds(aSeconds) {\n    let instance = new UtcOffset();\n    instance.fromSeconds(aSeconds);\n    return instance;\n  }\n\n  /**\n   * Creates a new ICAL.UtcOffset instance.\n   *\n   * @param {Object} aData          An object with members of the utc offset\n   * @param {Number=} aData.hours   The hours for the utc offset\n   * @param {Number=} aData.minutes The minutes in the utc offset\n   * @param {Number=} aData.factor  The factor for the utc-offset, either -1 or 1\n   */\n  constructor(aData) {\n    this.fromData(aData);\n  }\n\n  /**\n   * The hours in the utc-offset\n   * @type {Number}\n   */\n  hours = 0;\n\n  /**\n   * The minutes in the utc-offset\n   * @type {Number}\n   */\n  minutes = 0;\n\n  /**\n   * The sign of the utc offset, 1 for positive offset, -1 for negative\n   * offsets.\n   * @type {Number}\n   */\n  factor = 1;\n\n  /**\n   * The type name, to be used in the jCal object.\n   * @constant\n   * @type {String}\n   * @default \"utc-offset\"\n   */\n  icaltype = \"utc-offset\";\n\n  /**\n   * Returns a clone of the utc offset object.\n   *\n   * @return {UtcOffset}     The cloned object\n   */\n  clone() {\n    return UtcOffset.fromSeconds(this.toSeconds());\n  }\n\n  /**\n   * Sets up the current instance using members from the passed data object.\n   *\n   * @param {Object} aData          An object with members of the utc offset\n   * @param {Number=} aData.hours   The hours for the utc offset\n   * @param {Number=} aData.minutes The minutes in the utc offset\n   * @param {Number=} aData.factor  The factor for the utc-offset, either -1 or 1\n   */\n  fromData(aData) {\n    if (aData) {\n      for (let [key, value] of Object.entries(aData)) {\n        this[key] = value;\n      }\n    }\n    this._normalize();\n  }\n\n  /**\n   * Sets up the current instance from the given seconds value. The seconds\n   * value is truncated to the minute. Offsets are wrapped when the world\n   * ends, the hour after UTC+14:00 is UTC-12:00.\n   *\n   * @param {Number} aSeconds         The seconds to convert into an offset\n   */\n  fromSeconds(aSeconds) {\n    let secs = Math.abs(aSeconds);\n\n    this.factor = aSeconds < 0 ? -1 : 1;\n    this.hours = trunc(secs / 3600);\n\n    secs -= (this.hours * 3600);\n    this.minutes = trunc(secs / 60);\n    return this;\n  }\n\n  /**\n   * Convert the current offset to a value in seconds\n   *\n   * @return {Number}                 The offset in seconds\n   */\n  toSeconds() {\n    return this.factor * (60 * this.minutes + 3600 * this.hours);\n  }\n\n  /**\n   * Compare this utc offset with another one.\n   *\n   * @param {UtcOffset} other             The other offset to compare with\n   * @return {Number}                     -1, 0 or 1 for less/equal/greater\n   */\n  compare(other) {\n    let a = this.toSeconds();\n    let b = other.toSeconds();\n    return (a > b) - (b > a);\n  }\n\n  _normalize() {\n    // Range: 97200 seconds (with 1 hour inbetween)\n    let secs = this.toSeconds();\n    let factor = this.factor;\n    while (secs < -43200) { // = UTC-12:00\n      secs += 97200;\n    }\n    while (secs > 50400) { // = UTC+14:00\n      secs -= 97200;\n    }\n\n    this.fromSeconds(secs);\n\n    // Avoid changing the factor when on zero seconds\n    if (secs == 0) {\n      this.factor = factor;\n    }\n  }\n\n  /**\n   * The iCalendar string representation of this utc-offset.\n   * @return {String}\n   */\n  toICALString() {\n    return design.icalendar.value['utc-offset'].toICAL(this.toString());\n  }\n\n  /**\n   * The string representation of this utc-offset.\n   * @return {String}\n   */\n  toString() {\n    return (this.factor == 1 ? \"+\" : \"-\") + pad2(this.hours) + ':' + pad2(this.minutes);\n  }\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n\n/**\n * Describes a vCard time, which has slight differences to the ICAL.Time.\n * Properties can be null if not specified, for example for dates with\n * reduced accuracy or truncation.\n *\n * Note that currently not all methods are correctly re-implemented for\n * VCardTime. For example, comparison will have undefined results when some\n * members are null.\n *\n * Also, normalization is not yet implemented for this class!\n *\n * @memberof ICAL\n * @extends {Time}\n */\nclass VCardTime extends Time {\n  /**\n   * Returns a new ICAL.VCardTime instance from a date and/or time string.\n   *\n   * @param {String} aValue     The string to create from\n   * @param {String} aIcalType  The type for this instance, e.g. date-and-or-time\n   * @return {VCardTime}        The date/time instance\n   */\n  static fromDateAndOrTimeString(aValue, aIcalType) {\n    function part(v, s, e) {\n      return v ? strictParseInt(v.slice(s, s + e)) : null;\n    }\n    let parts = aValue.split('T');\n    let dt = parts[0], tmz = parts[1];\n    let splitzone = tmz ? design.vcard.value.time._splitZone(tmz) : [];\n    let zone = splitzone[0], tm = splitzone[1];\n\n    let dtlen = dt ? dt.length : 0;\n    let tmlen = tm ? tm.length : 0;\n\n    let hasDashDate = dt && dt[0] == '-' && dt[1] == '-';\n    let hasDashTime = tm && tm[0] == '-';\n\n    let o = {\n      year: hasDashDate ? null : part(dt, 0, 4),\n      month: hasDashDate && (dtlen == 4 || dtlen == 7) ? part(dt, 2, 2) : dtlen == 7 ? part(dt, 5, 2) : dtlen == 10 ? part(dt, 5, 2) : null,\n      day: dtlen == 5 ? part(dt, 3, 2) : dtlen == 7 && hasDashDate ? part(dt, 5, 2) : dtlen == 10 ? part(dt, 8, 2) : null,\n\n      hour: hasDashTime ? null : part(tm, 0, 2),\n      minute: hasDashTime && tmlen == 3 ? part(tm, 1, 2) : tmlen > 4 ? hasDashTime ? part(tm, 1, 2) : part(tm, 3, 2) : null,\n      second: tmlen == 4 ? part(tm, 2, 2) : tmlen == 6 ? part(tm, 4, 2) : tmlen == 8 ? part(tm, 6, 2) : null\n    };\n\n    if (zone == 'Z') {\n      zone = Timezone.utcTimezone;\n    } else if (zone && zone[3] == ':') {\n      zone = UtcOffset.fromString(zone);\n    } else {\n      zone = null;\n    }\n\n    return new VCardTime(o, zone, aIcalType);\n  }\n\n\n  /**\n   * Creates a new ICAL.VCardTime instance.\n   *\n   * @param {Object} data                           The data for the time instance\n   * @param {Number=} data.year                     The year for this date\n   * @param {Number=} data.month                    The month for this date\n   * @param {Number=} data.day                      The day for this date\n   * @param {Number=} data.hour                     The hour for this date\n   * @param {Number=} data.minute                   The minute for this date\n   * @param {Number=} data.second                   The second for this date\n   * @param {Timezone|UtcOffset} zone               The timezone to use\n   * @param {String} icaltype                       The type for this date/time object\n   */\n  constructor(data, zone, icaltype) {\n    super(data, zone);\n    this.icaltype = icaltype || \"date-and-or-time\";\n  }\n\n  /**\n   * The class identifier.\n   * @constant\n   * @type {String}\n   * @default \"vcardtime\"\n   */\n  icalclass = \"vcardtime\";\n\n  /**\n   * The type name, to be used in the jCal object.\n   * @type {String}\n   * @default \"date-and-or-time\"\n   */\n  icaltype = \"date-and-or-time\";\n\n  /**\n   * Returns a clone of the vcard date/time object.\n   *\n   * @return {VCardTime}     The cloned object\n   */\n  clone() {\n    return new VCardTime(this._time, this.zone, this.icaltype);\n  }\n\n  _normalize() {\n    return this;\n  }\n\n  /**\n   * @inheritdoc\n   */\n  utcOffset() {\n    if (this.zone instanceof UtcOffset) {\n      return this.zone.toSeconds();\n    } else {\n      return Time.prototype.utcOffset.apply(this, arguments);\n    }\n  }\n\n  /**\n   * Returns an RFC 6350 compliant representation of this object.\n   *\n   * @return {String}         vcard date/time string\n   */\n  toICALString() {\n    return design.vcard.value[this.icaltype].toICAL(this.toString());\n  }\n\n  /**\n   * The string representation of this date/time, in jCard form\n   * (including : and - separators).\n   * @return {String}\n   */\n  toString() {\n    let y = this.year, m = this.month, d = this.day;\n    let h = this.hour, mm = this.minute, s = this.second;\n\n    let hasYear = y !== null, hasMonth = m !== null, hasDay = d !== null;\n    let hasHour = h !== null, hasMinute = mm !== null, hasSecond = s !== null;\n\n    let datepart = (hasYear ? pad2(y) + (hasMonth || hasDay ? '-' : '') : (hasMonth || hasDay ? '--' : '')) +\n                   (hasMonth ? pad2(m) : '') +\n                   (hasDay ? '-' + pad2(d) : '');\n    let timepart = (hasHour ? pad2(h) : '-') + (hasHour && hasMinute ? ':' : '') +\n                   (hasMinute ? pad2(mm) : '') + (!hasHour && !hasMinute ? '-' : '') +\n                   (hasMinute && hasSecond ? ':' : '') +\n                   (hasSecond ? pad2(s) : '');\n\n    let zone;\n    if (this.zone === Timezone.utcTimezone) {\n      zone = 'Z';\n    } else if (this.zone instanceof UtcOffset) {\n      zone = this.zone.toString();\n    } else if (this.zone === Timezone.localTimezone) {\n      zone = '';\n    } else if (this.zone instanceof Timezone) {\n      let offset = UtcOffset.fromSeconds(this.zone.utcOffset(this));\n      zone = offset.toString();\n    } else {\n      zone = '';\n    }\n\n    switch (this.icaltype) {\n      case \"time\":\n        return timepart + zone;\n      case \"date-and-or-time\":\n      case \"date-time\":\n        return datepart + (timepart == '--' ? '' : 'T' + timepart + zone);\n      case \"date\":\n        return datepart;\n    }\n    return null;\n  }\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n\n/**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n *\n * @ignore\n * @typedef {import(\"./types.js\").weekDay} weekDay\n * Imports the 'weekDay' type from the \"types.js\" module\n */\n\n/**\n * An iterator for a single recurrence rule. This class usually doesn't have to be instanciated\n * directly, the convenience method {@link ICAL.Recur#iterator} can be used.\n *\n * @memberof ICAL\n */\nclass RecurIterator {\n  static _indexMap = {\n    \"BYSECOND\": 0,\n    \"BYMINUTE\": 1,\n    \"BYHOUR\": 2,\n    \"BYDAY\": 3,\n    \"BYMONTHDAY\": 4,\n    \"BYYEARDAY\": 5,\n    \"BYWEEKNO\": 6,\n    \"BYMONTH\": 7,\n    \"BYSETPOS\": 8\n  };\n\n  static _expandMap = {\n    \"SECONDLY\": [1, 1, 1, 1, 1, 1, 1, 1],\n    \"MINUTELY\": [2, 1, 1, 1, 1, 1, 1, 1],\n    \"HOURLY\": [2, 2, 1, 1, 1, 1, 1, 1],\n    \"DAILY\": [2, 2, 2, 1, 1, 1, 1, 1],\n    \"WEEKLY\": [2, 2, 2, 2, 3, 3, 1, 1],\n    \"MONTHLY\": [2, 2, 2, 2, 2, 3, 3, 1],\n    \"YEARLY\": [2, 2, 2, 2, 2, 2, 2, 2]\n  };\n\n  static UNKNOWN = 0;\n  static CONTRACT = 1;\n  static EXPAND = 2;\n  static ILLEGAL = 3;\n\n  /**\n   * Creates a new ICAL.RecurIterator instance. The options object may contain additional members\n   * when resuming iteration from a previous run.\n   *\n   * @param {Object} options                The iterator options\n   * @param {Recur} options.rule            The rule to iterate.\n   * @param {Time} options.dtstart          The start date of the event.\n   * @param {Boolean=} options.initialized  When true, assume that options are\n   *        from a previously constructed iterator. Initialization will not be\n   *        repeated.\n   */\n  constructor(options) {\n    this.fromData(options);\n  }\n\n  /**\n   * True when iteration is finished.\n   * @type {Boolean}\n   */\n  completed = false;\n\n  /**\n   * The rule that is being iterated\n   * @type {Recur}\n   */\n  rule = null;\n\n  /**\n   * The start date of the event being iterated.\n   * @type {Time}\n   */\n  dtstart = null;\n\n  /**\n   * The last occurrence that was returned from the\n   * {@link RecurIterator#next} method.\n   * @type {Time}\n   */\n  last = null;\n\n  /**\n   * The sequence number from the occurrence\n   * @type {Number}\n   */\n  occurrence_number = 0;\n\n  /**\n   * The indices used for the {@link ICAL.RecurIterator#by_data} object.\n   * @type {Object}\n   * @private\n   */\n  by_indices = null;\n\n  /**\n   * If true, the iterator has already been initialized\n   * @type {Boolean}\n   * @private\n   */\n  initialized = false;\n\n  /**\n   * The initializd by-data.\n   * @type {Object}\n   * @private\n   */\n  by_data = null;\n\n  /**\n   * The expanded yeardays\n   * @type {Array}\n   * @private\n   */\n  days = null;\n\n  /**\n   * The index in the {@link ICAL.RecurIterator#days} array.\n   * @type {Number}\n   * @private\n   */\n  days_index = 0;\n\n  /**\n   * Initialize the recurrence iterator from the passed data object. This\n   * method is usually not called directly, you can initialize the iterator\n   * through the constructor.\n   *\n   * @param {Object} options                The iterator options\n   * @param {Recur} options.rule            The rule to iterate.\n   * @param {Time} options.dtstart          The start date of the event.\n   * @param {Boolean=} options.initialized  When true, assume that options are\n   *        from a previously constructed iterator. Initialization will not be\n   *        repeated.\n   */\n  fromData(options) {\n    this.rule = formatClassType(options.rule, Recur);\n\n    if (!this.rule) {\n      throw new Error('iterator requires a (ICAL.Recur) rule');\n    }\n\n    this.dtstart = formatClassType(options.dtstart, Time);\n\n    if (!this.dtstart) {\n      throw new Error('iterator requires a (ICAL.Time) dtstart');\n    }\n\n    if (options.by_data) {\n      this.by_data = options.by_data;\n    } else {\n      this.by_data = clone(this.rule.parts, true);\n    }\n\n    if (options.occurrence_number)\n      this.occurrence_number = options.occurrence_number;\n\n    this.days = options.days || [];\n    if (options.last) {\n      this.last = formatClassType(options.last, Time);\n    }\n\n    this.by_indices = options.by_indices;\n\n    if (!this.by_indices) {\n      this.by_indices = {\n        \"BYSECOND\": 0,\n        \"BYMINUTE\": 0,\n        \"BYHOUR\": 0,\n        \"BYDAY\": 0,\n        \"BYMONTH\": 0,\n        \"BYWEEKNO\": 0,\n        \"BYMONTHDAY\": 0\n      };\n    }\n\n    this.initialized = options.initialized || false;\n\n    if (!this.initialized) {\n      try {\n        this.init();\n      } catch (e) {\n        if (e instanceof InvalidRecurrenceRuleError) {\n          // Init may error if there are no possible recurrence instances from\n          // the rule, but we don't want to bubble this error up. Instead, we\n          // create an empty iterator.\n          this.completed = true;\n        } else {\n          // Propagate other errors to consumers.\n          throw e;\n        }\n      }\n    }\n  }\n\n  /**\n   * Initialize the iterator\n   * @private\n   */\n  init() {\n    this.initialized = true;\n    this.last = this.dtstart.clone();\n    let parts = this.by_data;\n\n    if (\"BYDAY\" in parts) {\n      // libical does this earlier when the rule is loaded, but we postpone to\n      // now so we can preserve the original order.\n      this.sort_byday_rules(parts.BYDAY);\n    }\n\n    // The BYYEARDAY may only appear with BYDAY\n    if (\"BYYEARDAY\" in parts) {\n      if (\"BYMONTH\" in parts || \"BYWEEKNO\" in parts ||\n          \"BYMONTHDAY\" in parts) {\n        throw new Error(\"Invalid BYYEARDAY rule\");\n      }\n    }\n\n    // BYWEEKNO and BYMONTHDAY rule parts may not both appear\n    if (\"BYWEEKNO\" in parts && \"BYMONTHDAY\" in parts) {\n      throw new Error(\"BYWEEKNO does not fit to BYMONTHDAY\");\n    }\n\n    // For MONTHLY recurrences (FREQ=MONTHLY) neither BYYEARDAY nor\n    // BYWEEKNO may appear.\n    if (this.rule.freq == \"MONTHLY\" &&\n        (\"BYYEARDAY\" in parts || \"BYWEEKNO\" in parts)) {\n      throw new Error(\"For MONTHLY recurrences neither BYYEARDAY nor BYWEEKNO may appear\");\n    }\n\n    // For WEEKLY recurrences (FREQ=WEEKLY) neither BYMONTHDAY nor\n    // BYYEARDAY may appear.\n    if (this.rule.freq == \"WEEKLY\" &&\n        (\"BYYEARDAY\" in parts || \"BYMONTHDAY\" in parts)) {\n      throw new Error(\"For WEEKLY recurrences neither BYMONTHDAY nor BYYEARDAY may appear\");\n    }\n\n    // BYYEARDAY may only appear in YEARLY rules\n    if (this.rule.freq != \"YEARLY\" && \"BYYEARDAY\" in parts) {\n      throw new Error(\"BYYEARDAY may only appear in YEARLY rules\");\n    }\n\n    this.last.second = this.setup_defaults(\"BYSECOND\", \"SECONDLY\", this.dtstart.second);\n    this.last.minute = this.setup_defaults(\"BYMINUTE\", \"MINUTELY\", this.dtstart.minute);\n    this.last.hour = this.setup_defaults(\"BYHOUR\", \"HOURLY\", this.dtstart.hour);\n    this.last.day = this.setup_defaults(\"BYMONTHDAY\", \"DAILY\", this.dtstart.day);\n    this.last.month = this.setup_defaults(\"BYMONTH\", \"MONTHLY\", this.dtstart.month);\n\n    if (this.rule.freq == \"WEEKLY\") {\n      if (\"BYDAY\" in parts) {\n        let [, dow] = this.ruleDayOfWeek(parts.BYDAY[0], this.rule.wkst);\n        let wkdy = dow - this.last.dayOfWeek(this.rule.wkst);\n        if ((this.last.dayOfWeek(this.rule.wkst) < dow && wkdy >= 0) || wkdy < 0) {\n          // Initial time is after first day of BYDAY data\n          this.last.day += wkdy;\n        }\n      } else {\n        let dayName = Recur.numericDayToIcalDay(this.dtstart.dayOfWeek());\n        parts.BYDAY = [dayName];\n      }\n    }\n\n    if (this.rule.freq == \"YEARLY\") {\n      // Some yearly recurrence rules may be specific enough to not actually\n      // occur on a yearly basis, e.g. the 29th day of February or the fifth\n      // Monday of a given month. The standard isn't clear on the intended\n      // behavior in these cases, but `libical` at least will iterate until it\n      // finds a matching year.\n      // CAREFUL: Some rules may specify an occurrence that can never happen,\n      // e.g. the first Monday of April so long as it falls on the 15th\n      // through the 21st. Detecting these is non-trivial, so ensure that we\n      // stop iterating at some point.\n      const untilYear = this.rule.until ? this.rule.until.year : 20000;\n      while (this.last.year <= untilYear) {\n        this.expand_year_days(this.last.year);\n        if (this.days.length > 0) {\n          break;\n        }\n        this.increment_year(this.rule.interval);\n      }\n\n      if (this.days.length == 0) {\n        throw new InvalidRecurrenceRuleError();\n      }\n\n      // If there's no occurrence in this year, try the following years. This\n      // would only happen looking for day 366 or -366.\n      if (!this._nextByYearDay() && !this.next_year() && !this.next_year() && !this.next_year()) {\n        // This should not be possible, but just in case it is, stop.\n        throw new InvalidRecurrenceRuleError();\n      }\n    }\n\n    if (this.rule.freq == \"MONTHLY\") {\n      if (this.has_by_data(\"BYDAY\")) {\n        let tempLast = null;\n        let initLast = this.last.clone();\n        let daysInMonth = Time.daysInMonth(this.last.month, this.last.year);\n\n        // Check every weekday in BYDAY with relative dow and pos.\n        for (let bydow of this.by_data.BYDAY) {\n          this.last = initLast.clone();\n          let [pos, dow] = this.ruleDayOfWeek(bydow);\n          let dayOfMonth = this.last.nthWeekDay(dow, pos);\n\n          // If |pos| >= 6, the byday is invalid for a monthly rule.\n          if (pos >= 6 || pos <= -6) {\n            throw new Error(\"Malformed values in BYDAY part\");\n          }\n\n          // If a Byday with pos=+/-5 is not in the current month it\n          // must be searched in the next months.\n          if (dayOfMonth > daysInMonth || dayOfMonth <= 0) {\n            // Skip if we have already found a \"last\" in this month.\n            if (tempLast && tempLast.month == initLast.month) {\n              continue;\n            }\n            while (dayOfMonth > daysInMonth || dayOfMonth <= 0) {\n              this.increment_month();\n              daysInMonth = Time.daysInMonth(this.last.month, this.last.year);\n              dayOfMonth = this.last.nthWeekDay(dow, pos);\n            }\n          }\n\n          this.last.day = dayOfMonth;\n          if (!tempLast || this.last.compare(tempLast) < 0) {\n            tempLast = this.last.clone();\n          }\n        }\n        this.last = tempLast.clone();\n\n        //XXX: This feels like a hack, but we need to initialize\n        //     the BYMONTHDAY case correctly and byDayAndMonthDay handles\n        //     this case. It accepts a special flag which will avoid incrementing\n        //     the initial value without the flag days that match the start time\n        //     would be missed.\n        if (this.has_by_data('BYMONTHDAY')) {\n          this._byDayAndMonthDay(true);\n        }\n\n        if (this.last.day > daysInMonth || this.last.day == 0) {\n          throw new Error(\"Malformed values in BYDAY part\");\n        }\n      } else if (this.has_by_data(\"BYMONTHDAY\")) {\n        // Change the day value so that normalisation won't change the month.\n        this.last.day = 1;\n\n        // Get a sorted list of days in the starting month that match the rule.\n        let normalized = this.normalizeByMonthDayRules(\n          this.last.year,\n          this.last.month,\n          this.rule.parts.BYMONTHDAY\n        ).filter(d => d >= this.last.day);\n\n        if (normalized.length) {\n          // There's at least one valid day, use it.\n          this.last.day = normalized[0];\n          this.by_data.BYMONTHDAY = normalized;\n        } else {\n          // There's no occurrence in this month, find the next valid month.\n          // The longest possible sequence of skipped months is February-April-June,\n          // so we might need to call next_month up to three times.\n          if (!this.next_month() && !this.next_month() && !this.next_month()) {\n            throw new InvalidRecurrenceRuleError();\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Retrieve the next occurrence from the iterator.\n   * @return {Time}\n   */\n  next(again = false) {\n    let before = (this.last ? this.last.clone() : null);\n\n    if ((this.rule.count && this.occurrence_number >= this.rule.count) ||\n        (this.rule.until && this.last.compare(this.rule.until) > 0)) {\n      this.completed = true;\n    }\n\n    if (this.completed) {\n      return null;\n    }\n\n    if (this.occurrence_number == 0 && this.last.compare(this.dtstart) >= 0) {\n      // First of all, give the instance that was initialized\n      this.occurrence_number++;\n      return this.last;\n    }\n\n    let valid;\n    let invalid_count = 0;\n    do {\n      valid = 1;\n\n      switch (this.rule.freq) {\n      case \"SECONDLY\":\n        this.next_second();\n        break;\n      case \"MINUTELY\":\n        this.next_minute();\n        break;\n      case \"HOURLY\":\n        this.next_hour();\n        break;\n      case \"DAILY\":\n        this.next_day();\n        break;\n      case \"WEEKLY\":\n        this.next_week();\n        break;\n      case \"MONTHLY\":\n        valid = this.next_month();\n        if (valid) {\n          invalid_count = 0;\n        } else if (++invalid_count == 336) {\n          // We've been through all 91 month variations and not found a recurrence. Stop.\n          // (12 months and 29-day February √ó 7 starting days.)\n          this.completed = true;\n          return null;\n        }\n        break;\n      case \"YEARLY\":\n        valid = this.next_year();\n        if (valid) {\n          invalid_count = 0;\n        } else if (++invalid_count == 28) {\n          // We've been through all 14 year variations and not found a recurrence. Stop.\n          // (365-day and 366-day years √ó 7 starting days.)\n          this.completed = true;\n          return null;\n        }\n        break;\n\n      default:\n        return null;\n      }\n    } while (!this.check_contracting_rules() ||\n             this.last.compare(this.dtstart) < 0 ||\n             !valid);\n\n    if (this.last.compare(before) == 0) {\n      if (again) {\n        throw new Error(\"Same occurrence found twice, protecting you from death by recursion\");\n      }\n      this.next(true);\n    }\n\n    if (this.rule.until && this.last.compare(this.rule.until) > 0) {\n      this.completed = true;\n      return null;\n    } else {\n      this.occurrence_number++;\n      return this.last;\n    }\n  }\n\n  next_second() {\n    return this.next_generic(\"BYSECOND\", \"SECONDLY\", \"second\", \"minute\");\n  }\n\n  increment_second(inc) {\n    return this.increment_generic(inc, \"second\", 60, \"minute\");\n  }\n\n  next_minute() {\n    return this.next_generic(\"BYMINUTE\", \"MINUTELY\",\n                             \"minute\", \"hour\", \"next_second\");\n  }\n\n  increment_minute(inc) {\n    return this.increment_generic(inc, \"minute\", 60, \"hour\");\n  }\n\n  next_hour() {\n    return this.next_generic(\"BYHOUR\", \"HOURLY\", \"hour\",\n                             \"monthday\", \"next_minute\");\n  }\n\n  increment_hour(inc) {\n    this.increment_generic(inc, \"hour\", 24, \"monthday\");\n  }\n\n  next_day() {\n    let this_freq = (this.rule.freq == \"DAILY\");\n\n    if (this.next_hour() == 0) {\n      return 0;\n    }\n\n    if (this_freq) {\n      this.increment_monthday(this.rule.interval);\n    } else {\n      this.increment_monthday(1);\n    }\n\n    return 0;\n  }\n\n  next_week() {\n    let end_of_data = 0;\n\n    if (this.next_weekday_by_week() == 0) {\n      return end_of_data;\n    }\n\n    if (this.has_by_data(\"BYWEEKNO\")) {\n      this.by_indices.BYWEEKNO++;\n\n      if (this.by_indices.BYWEEKNO == this.by_data.BYWEEKNO.length) {\n        this.by_indices.BYWEEKNO = 0;\n        end_of_data = 1;\n      }\n\n      // HACK should be first month of the year\n      this.last.month = 1;\n      this.last.day = 1;\n\n      let week_no = this.by_data.BYWEEKNO[this.by_indices.BYWEEKNO];\n\n      this.last.day += 7 * week_no;\n\n      if (end_of_data) {\n        this.increment_year(1);\n      }\n    } else {\n      // Jump to the next week\n      this.increment_monthday(7 * this.rule.interval);\n    }\n\n    return end_of_data;\n  }\n\n  /**\n   * Normalize each by day rule for a given year/month.\n   * Takes into account ordering and negative rules\n   *\n   * @private\n   * @param {Number} year         Current year.\n   * @param {Number} month        Current month.\n   * @param {Array}  rules        Array of rules.\n   *\n   * @return {Array} sorted and normalized rules.\n   *                 Negative rules will be expanded to their\n   *                 correct positive values for easier processing.\n   */\n  normalizeByMonthDayRules(year, month, rules) {\n    let daysInMonth = Time.daysInMonth(month, year);\n\n    // XXX: This is probably bad for performance to allocate\n    //      a new array for each month we scan, if possible\n    //      we should try to optimize this...\n    let newRules = [];\n\n    let ruleIdx = 0;\n    let len = rules.length;\n    let rule;\n\n    for (; ruleIdx < len; ruleIdx++) {\n      rule = parseInt(rules[ruleIdx], 10);\n      if (isNaN(rule)) {\n        throw new Error('Invalid BYMONTHDAY value');\n      }\n\n      // if this rule falls outside of given\n      // month discard it.\n      if (Math.abs(rule) > daysInMonth) {\n        continue;\n      }\n\n      // negative case\n      if (rule < 0) {\n        // we add (not subtract it is a negative number)\n        // one from the rule because 1 === last day of month\n        rule = daysInMonth + (rule + 1);\n      } else if (rule === 0) {\n        // skip zero: it is invalid.\n        continue;\n      }\n\n      // only add unique items...\n      if (newRules.indexOf(rule) === -1) {\n        newRules.push(rule);\n      }\n\n    }\n\n    // unique and sort\n    return newRules.sort(function(a, b) { return a - b; });\n  }\n\n  /**\n   * NOTES:\n   * We are given a list of dates in the month (BYMONTHDAY) (23, etc..)\n   * Also we are given a list of days (BYDAY) (MO, 2SU, etc..) when\n   * both conditions match a given date (this.last.day) iteration stops.\n   *\n   * @private\n   * @param {Boolean=} isInit     When given true will not increment the\n   *                                current day (this.last).\n   */\n  _byDayAndMonthDay(isInit) {\n    let byMonthDay; // setup in initMonth\n    let byDay = this.by_data.BYDAY;\n\n    let date;\n    let dateIdx = 0;\n    let dateLen; // setup in initMonth\n    let dayLen = byDay.length;\n\n    // we are not valid by default\n    let dataIsValid = 0;\n\n    let daysInMonth;\n    let self = this;\n    // we need a copy of this, because a DateTime gets normalized\n    // automatically if the day is out of range. At some points we\n    // set the last day to 0 to start counting.\n    let lastDay = this.last.day;\n\n    function initMonth() {\n      daysInMonth = Time.daysInMonth(\n        self.last.month, self.last.year\n      );\n\n      byMonthDay = self.normalizeByMonthDayRules(\n        self.last.year,\n        self.last.month,\n        self.by_data.BYMONTHDAY\n      );\n\n      dateLen = byMonthDay.length;\n\n      // For the case of more than one occurrence in one month\n      // we have to be sure to start searching after the last\n      // found date or at the last BYMONTHDAY, unless we are\n      // initializing the iterator because in this case we have\n      // to consider the last found date too.\n      while (byMonthDay[dateIdx] <= lastDay &&\n             !(isInit && byMonthDay[dateIdx] == lastDay) &&\n             dateIdx < dateLen - 1) {\n        dateIdx++;\n      }\n    }\n\n    function nextMonth() {\n      // since the day is incremented at the start\n      // of the loop below, we need to start at 0\n      lastDay = 0;\n      self.increment_month();\n      dateIdx = 0;\n      initMonth();\n    }\n\n    initMonth();\n\n    // should come after initMonth\n    if (isInit) {\n      lastDay -= 1;\n    }\n\n    // Use a counter to avoid an infinite loop with malformed rules.\n    // Stop checking after 4 years so we consider also a leap year.\n    let monthsCounter = 48;\n\n    while (!dataIsValid && monthsCounter) {\n      monthsCounter--;\n      // increment the current date. This is really\n      // important otherwise we may fall into the infinite\n      // loop trap. The initial date takes care of the case\n      // where the current date is the date we are looking\n      // for.\n      date = lastDay + 1;\n\n      if (date > daysInMonth) {\n        nextMonth();\n        continue;\n      }\n\n      // find next date\n      let next = byMonthDay[dateIdx++];\n\n      // this logic is dependent on the BYMONTHDAYS\n      // being in order (which is done by #normalizeByMonthDayRules)\n      if (next >= date) {\n        // if the next month day is in the future jump to it.\n        lastDay = next;\n      } else {\n        // in this case the 'next' monthday has past\n        // we must move to the month.\n        nextMonth();\n        continue;\n      }\n\n      // Now we can loop through the day rules to see\n      // if one matches the current month date.\n      for (let dayIdx = 0; dayIdx < dayLen; dayIdx++) {\n        let parts = this.ruleDayOfWeek(byDay[dayIdx]);\n        let pos = parts[0];\n        let dow = parts[1];\n\n        this.last.day = lastDay;\n        if (this.last.isNthWeekDay(dow, pos)) {\n          // when we find the valid one we can mark\n          // the conditions as met and break the loop.\n          // (Because we have this condition above\n          //  it will also break the parent loop).\n          dataIsValid = 1;\n          break;\n        }\n      }\n\n      // It is completely possible that the combination\n      // cannot be matched in the current month.\n      // When we reach the end of possible combinations\n      // in the current month we iterate to the next one.\n      // since dateIdx is incremented right after getting\n      // \"next\", we don't need dateLen -1 here.\n      if (!dataIsValid && dateIdx === dateLen) {\n        nextMonth();\n        continue;\n      }\n    }\n\n    if (monthsCounter <= 0) {\n      // Checked 4 years without finding a Byday that matches\n      // a Bymonthday. Maybe the rule is not correct.\n      throw new Error(\"Malformed values in BYDAY combined with BYMONTHDAY parts\");\n    }\n\n\n    return dataIsValid;\n  }\n\n  next_month() {\n    let data_valid = 1;\n\n    if (this.next_hour() == 0) {\n      return data_valid;\n    }\n\n    if (this.has_by_data(\"BYDAY\") && this.has_by_data(\"BYMONTHDAY\")) {\n      data_valid = this._byDayAndMonthDay();\n    } else if (this.has_by_data(\"BYDAY\")) {\n      let daysInMonth = Time.daysInMonth(this.last.month, this.last.year);\n      let setpos = 0;\n      let setpos_total = 0;\n\n      if (this.has_by_data(\"BYSETPOS\")) {\n        let last_day = this.last.day;\n        for (let day = 1; day <= daysInMonth; day++) {\n          this.last.day = day;\n          if (this.is_day_in_byday(this.last)) {\n            setpos_total++;\n            if (day <= last_day) {\n              setpos++;\n            }\n          }\n        }\n        this.last.day = last_day;\n      }\n\n      data_valid = 0;\n      let day;\n      for (day = this.last.day + 1; day <= daysInMonth; day++) {\n        this.last.day = day;\n\n        if (this.is_day_in_byday(this.last)) {\n          if (!this.has_by_data(\"BYSETPOS\") ||\n              this.check_set_position(++setpos) ||\n              this.check_set_position(setpos - setpos_total - 1)) {\n\n            data_valid = 1;\n            break;\n          }\n        }\n      }\n\n      if (day > daysInMonth) {\n        this.last.day = 1;\n        this.increment_month();\n\n        if (this.is_day_in_byday(this.last)) {\n          if (!this.has_by_data(\"BYSETPOS\") || this.check_set_position(1)) {\n            data_valid = 1;\n          }\n        } else {\n          data_valid = 0;\n        }\n      }\n    } else if (this.has_by_data(\"BYMONTHDAY\")) {\n      this.by_indices.BYMONTHDAY++;\n\n      if (this.by_indices.BYMONTHDAY >= this.by_data.BYMONTHDAY.length) {\n        this.by_indices.BYMONTHDAY = 0;\n        this.increment_month();\n        if (this.by_indices.BYMONTHDAY >= this.by_data.BYMONTHDAY.length) {\n          return 0;\n        }\n      }\n\n      let daysInMonth = Time.daysInMonth(this.last.month, this.last.year);\n      let day = this.by_data.BYMONTHDAY[this.by_indices.BYMONTHDAY];\n\n      if (day < 0) {\n        day = daysInMonth + day + 1;\n      }\n\n      if (day > daysInMonth) {\n        this.last.day = 1;\n        data_valid = this.is_day_in_byday(this.last);\n      } else {\n        this.last.day = day;\n      }\n    } else {\n      this.increment_month();\n      let daysInMonth = Time.daysInMonth(this.last.month, this.last.year);\n      if (this.by_data.BYMONTHDAY[0] > daysInMonth) {\n        data_valid = 0;\n      } else {\n        this.last.day = this.by_data.BYMONTHDAY[0];\n      }\n    }\n\n    return data_valid;\n  }\n\n  next_weekday_by_week() {\n    let end_of_data = 0;\n\n    if (this.next_hour() == 0) {\n      return end_of_data;\n    }\n\n    if (!this.has_by_data(\"BYDAY\")) {\n      return 1;\n    }\n\n    for (;;) {\n      let tt = new Time();\n      this.by_indices.BYDAY++;\n\n      if (this.by_indices.BYDAY == Object.keys(this.by_data.BYDAY).length) {\n        this.by_indices.BYDAY = 0;\n        end_of_data = 1;\n      }\n\n      let coded_day = this.by_data.BYDAY[this.by_indices.BYDAY];\n      let parts = this.ruleDayOfWeek(coded_day);\n      let dow = parts[1];\n\n      dow -= this.rule.wkst;\n\n      if (dow < 0) {\n        dow += 7;\n      }\n\n      tt.year = this.last.year;\n      tt.month = this.last.month;\n      tt.day = this.last.day;\n\n      let startOfWeek = tt.startDoyWeek(this.rule.wkst);\n\n      if (dow + startOfWeek < 1) {\n        // The selected date is in the previous year\n        if (!end_of_data) {\n          continue;\n        }\n      }\n\n      let next = Time.fromDayOfYear(startOfWeek + dow, this.last.year);\n\n      /**\n       * The normalization horrors below are due to\n       * the fact that when the year/month/day changes\n       * it can effect the other operations that come after.\n       */\n      this.last.year = next.year;\n      this.last.month = next.month;\n      this.last.day = next.day;\n\n      return end_of_data;\n    }\n  }\n\n  next_year() {\n    if (this.next_hour() == 0) {\n      return 0;\n    }\n\n    if (this.days.length == 0 || ++this.days_index == this.days.length) {\n      this.days_index = 0;\n      this.increment_year(this.rule.interval);\n      if (this.has_by_data(\"BYMONTHDAY\")) {\n        this.by_data.BYMONTHDAY = this.normalizeByMonthDayRules(\n          this.last.year,\n          this.last.month,\n          this.rule.parts.BYMONTHDAY\n        );\n      }\n      this.expand_year_days(this.last.year);\n      if (this.days.length == 0) {\n        return 0;\n      }\n    }\n\n    return this._nextByYearDay();\n  }\n\n  _nextByYearDay() {\n    let doy = this.days[this.days_index];\n    let year = this.last.year;\n\n    if (Math.abs(doy) == 366 && !Time.isLeapYear(this.last.year)) {\n      return 0;\n    }\n\n    if (doy < 1) {\n        // Time.fromDayOfYear(doy, year) indexes relative to the\n        // start of the given year. That is different from the\n        // semantics of BYYEARDAY where negative indexes are an\n        // offset from the end of the given year.\n        doy += 1;\n        year += 1;\n    }\n    let next = Time.fromDayOfYear(doy, year);\n    this.last.day = next.day;\n    this.last.month = next.month;\n\n    return 1;\n  }\n\n  /**\n   * @param dow (eg: '1TU', '-1MO')\n   * @param {weekDay=} aWeekStart The week start weekday\n   * @return [pos, numericDow] (eg: [1, 3]) numericDow is relative to aWeekStart\n   */\n  ruleDayOfWeek(dow, aWeekStart) {\n    let matches = dow.match(/([+-]?[0-9])?(MO|TU|WE|TH|FR|SA|SU)/);\n    if (matches) {\n      let pos = parseInt(matches[1] || 0, 10);\n      dow = Recur.icalDayToNumericDay(matches[2], aWeekStart);\n      return [pos, dow];\n    } else {\n      return [0, 0];\n    }\n  }\n\n  next_generic(aRuleType, aInterval, aDateAttr, aFollowingAttr, aPreviousIncr) {\n    let has_by_rule = (aRuleType in this.by_data);\n    let this_freq = (this.rule.freq == aInterval);\n    let end_of_data = 0;\n\n    if (aPreviousIncr && this[aPreviousIncr]() == 0) {\n      return end_of_data;\n    }\n\n    if (has_by_rule) {\n      this.by_indices[aRuleType]++;\n      let dta = this.by_data[aRuleType];\n\n      if (this.by_indices[aRuleType] == dta.length) {\n        this.by_indices[aRuleType] = 0;\n        end_of_data = 1;\n      }\n      this.last[aDateAttr] = dta[this.by_indices[aRuleType]];\n    } else if (this_freq) {\n      this[\"increment_\" + aDateAttr](this.rule.interval);\n    }\n\n    if (has_by_rule && end_of_data && this_freq) {\n      this[\"increment_\" + aFollowingAttr](1);\n    }\n\n    return end_of_data;\n  }\n\n  increment_monthday(inc) {\n    for (let i = 0; i < inc; i++) {\n      let daysInMonth = Time.daysInMonth(this.last.month, this.last.year);\n      this.last.day++;\n\n      if (this.last.day > daysInMonth) {\n        this.last.day -= daysInMonth;\n        this.increment_month();\n      }\n    }\n  }\n\n  increment_month() {\n    this.last.day = 1;\n    if (this.has_by_data(\"BYMONTH\")) {\n      this.by_indices.BYMONTH++;\n\n      if (this.by_indices.BYMONTH == this.by_data.BYMONTH.length) {\n        this.by_indices.BYMONTH = 0;\n        this.increment_year(1);\n      }\n\n      this.last.month = this.by_data.BYMONTH[this.by_indices.BYMONTH];\n    } else {\n      if (this.rule.freq == \"MONTHLY\") {\n        this.last.month += this.rule.interval;\n      } else {\n        this.last.month++;\n      }\n\n      this.last.month--;\n      let years = trunc(this.last.month / 12);\n      this.last.month %= 12;\n      this.last.month++;\n\n      if (years != 0) {\n        this.increment_year(years);\n      }\n    }\n\n    if (this.has_by_data(\"BYMONTHDAY\")) {\n      this.by_data.BYMONTHDAY = this.normalizeByMonthDayRules(\n        this.last.year,\n        this.last.month,\n        this.rule.parts.BYMONTHDAY\n      );\n    }\n  }\n\n  increment_year(inc) {\n    // Don't jump into the next month if this.last is Feb 29.\n    this.last.day = 1;\n    this.last.year += inc;\n  }\n\n  increment_generic(inc, aDateAttr, aFactor, aNextIncrement) {\n    this.last[aDateAttr] += inc;\n    let nextunit = trunc(this.last[aDateAttr] / aFactor);\n    this.last[aDateAttr] %= aFactor;\n    if (nextunit != 0) {\n      this[\"increment_\" + aNextIncrement](nextunit);\n    }\n  }\n\n  has_by_data(aRuleType) {\n    return (aRuleType in this.rule.parts);\n  }\n\n  expand_year_days(aYear) {\n    let t = new Time();\n    this.days = [];\n\n    // We need our own copy with a few keys set\n    let parts = {};\n    let rules = [\"BYDAY\", \"BYWEEKNO\", \"BYMONTHDAY\", \"BYMONTH\", \"BYYEARDAY\"];\n    for (let part of rules) {\n      if (part in this.rule.parts) {\n        parts[part] = this.rule.parts[part];\n      }\n    }\n\n    if (\"BYMONTH\" in parts && \"BYWEEKNO\" in parts) {\n      let valid = 1;\n      let validWeeks = {};\n      t.year = aYear;\n      t.isDate = true;\n\n      for (let monthIdx = 0; monthIdx < this.by_data.BYMONTH.length; monthIdx++) {\n        let month = this.by_data.BYMONTH[monthIdx];\n        t.month = month;\n        t.day = 1;\n        let first_week = t.weekNumber(this.rule.wkst);\n        t.day = Time.daysInMonth(month, aYear);\n        let last_week = t.weekNumber(this.rule.wkst);\n        for (monthIdx = first_week; monthIdx < last_week; monthIdx++) {\n          validWeeks[monthIdx] = 1;\n        }\n      }\n\n      for (let weekIdx = 0; weekIdx < this.by_data.BYWEEKNO.length && valid; weekIdx++) {\n        let weekno = this.by_data.BYWEEKNO[weekIdx];\n        if (weekno < 52) {\n          valid &= validWeeks[weekIdx];\n        } else {\n          valid = 0;\n        }\n      }\n\n      if (valid) {\n        delete parts.BYMONTH;\n      } else {\n        delete parts.BYWEEKNO;\n      }\n    }\n\n    let partCount = Object.keys(parts).length;\n\n    if (partCount == 0) {\n      let t1 = this.dtstart.clone();\n      t1.year = this.last.year;\n      this.days.push(t1.dayOfYear());\n    } else if (partCount == 1 && \"BYMONTH\" in parts) {\n      for (let month of this.by_data.BYMONTH) {\n        let t2 = this.dtstart.clone();\n        t2.year = aYear;\n        t2.month = month;\n        t2.isDate = true;\n        this.days.push(t2.dayOfYear());\n      }\n    } else if (partCount == 1 && \"BYMONTHDAY\" in parts) {\n      for (let monthday of this.by_data.BYMONTHDAY) {\n        let t3 = this.dtstart.clone();\n        if (monthday < 0) {\n          let daysInMonth = Time.daysInMonth(t3.month, aYear);\n          monthday = monthday + daysInMonth + 1;\n        }\n        t3.day = monthday;\n        t3.year = aYear;\n        t3.isDate = true;\n        this.days.push(t3.dayOfYear());\n      }\n    } else if (partCount == 2 &&\n               \"BYMONTHDAY\" in parts &&\n               \"BYMONTH\" in parts) {\n      for (let month of this.by_data.BYMONTH) {\n        let daysInMonth = Time.daysInMonth(month, aYear);\n        for (let monthday of this.by_data.BYMONTHDAY) {\n          if (monthday < 0) {\n            monthday = monthday + daysInMonth + 1;\n          }\n          t.day = monthday;\n          t.month = month;\n          t.year = aYear;\n          t.isDate = true;\n\n          this.days.push(t.dayOfYear());\n        }\n      }\n    } else if (partCount == 1 && \"BYWEEKNO\" in parts) ; else if (partCount == 2 &&\n               \"BYWEEKNO\" in parts &&\n               \"BYMONTHDAY\" in parts) ; else if (partCount == 1 && \"BYDAY\" in parts) {\n      this.days = this.days.concat(this.expand_by_day(aYear));\n    } else if (partCount == 2 && \"BYDAY\" in parts && \"BYMONTH\" in parts) {\n      for (let month of this.by_data.BYMONTH) {\n        let daysInMonth = Time.daysInMonth(month, aYear);\n\n        t.year = aYear;\n        t.month = month;\n        t.day = 1;\n        t.isDate = true;\n\n        let first_dow = t.dayOfWeek();\n        let doy_offset = t.dayOfYear() - 1;\n\n        t.day = daysInMonth;\n        let last_dow = t.dayOfWeek();\n\n        if (this.has_by_data(\"BYSETPOS\")) {\n          let by_month_day = [];\n          for (let day = 1; day <= daysInMonth; day++) {\n            t.day = day;\n            if (this.is_day_in_byday(t)) {\n              by_month_day.push(day);\n            }\n          }\n\n          for (let spIndex = 0; spIndex < by_month_day.length; spIndex++) {\n            if (this.check_set_position(spIndex + 1) ||\n                this.check_set_position(spIndex - by_month_day.length)) {\n              this.days.push(doy_offset + by_month_day[spIndex]);\n            }\n          }\n        } else {\n          for (let coded_day of this.by_data.BYDAY) {\n            let bydayParts = this.ruleDayOfWeek(coded_day);\n            let pos = bydayParts[0];\n            let dow = bydayParts[1];\n            let month_day;\n\n            let first_matching_day = ((dow + 7 - first_dow) % 7) + 1;\n            let last_matching_day = daysInMonth - ((last_dow + 7 - dow) % 7);\n\n            if (pos == 0) {\n              for (let day = first_matching_day; day <= daysInMonth; day += 7) {\n                this.days.push(doy_offset + day);\n              }\n            } else if (pos > 0) {\n              month_day = first_matching_day + (pos - 1) * 7;\n\n              if (month_day <= daysInMonth) {\n                this.days.push(doy_offset + month_day);\n              }\n            } else {\n              month_day = last_matching_day + (pos + 1) * 7;\n\n              if (month_day > 0) {\n                this.days.push(doy_offset + month_day);\n              }\n            }\n          }\n        }\n      }\n      // Return dates in order of occurrence (1,2,3,...) instead\n      // of by groups of weekdays (1,8,15,...,2,9,16,...).\n      this.days.sort(function(a, b) { return a - b; }); // Comparator function allows to sort numbers.\n    } else if (partCount == 2 && \"BYDAY\" in parts && \"BYMONTHDAY\" in parts) {\n      let expandedDays = this.expand_by_day(aYear);\n\n      for (let day of expandedDays) {\n        let tt = Time.fromDayOfYear(day, aYear);\n        if (this.by_data.BYMONTHDAY.indexOf(tt.day) >= 0) {\n          this.days.push(day);\n        }\n      }\n    } else if (partCount == 3 &&\n               \"BYDAY\" in parts &&\n               \"BYMONTHDAY\" in parts &&\n               \"BYMONTH\" in parts) {\n      let expandedDays = this.expand_by_day(aYear);\n\n      for (let day of expandedDays) {\n        let tt = Time.fromDayOfYear(day, aYear);\n\n        if (this.by_data.BYMONTH.indexOf(tt.month) >= 0 &&\n            this.by_data.BYMONTHDAY.indexOf(tt.day) >= 0) {\n          this.days.push(day);\n        }\n      }\n    } else if (partCount == 2 && \"BYDAY\" in parts && \"BYWEEKNO\" in parts) {\n      let expandedDays = this.expand_by_day(aYear);\n\n      for (let day of expandedDays) {\n        let tt = Time.fromDayOfYear(day, aYear);\n        let weekno = tt.weekNumber(this.rule.wkst);\n\n        if (this.by_data.BYWEEKNO.indexOf(weekno)) {\n          this.days.push(day);\n        }\n      }\n    } else if (partCount == 3 &&\n               \"BYDAY\" in parts &&\n               \"BYWEEKNO\" in parts &&\n               \"BYMONTHDAY\" in parts) ; else if (partCount == 1 && \"BYYEARDAY\" in parts) {\n      this.days = this.days.concat(this.by_data.BYYEARDAY);\n    } else if (partCount == 2 && \"BYYEARDAY\" in parts && \"BYDAY\" in parts) {\n      let daysInYear = Time.isLeapYear(aYear) ? 366 : 365;\n      let expandedDays = new Set(this.expand_by_day(aYear));\n\n      for (let doy of this.by_data.BYYEARDAY) {\n        if (doy < 0) {\n          doy += daysInYear + 1;\n        }\n\n        if (expandedDays.has(doy)) {\n          this.days.push(doy);\n        }\n      }\n    } else {\n      this.days = [];\n    }\n\n    let daysInYear = Time.isLeapYear(aYear) ? 366 : 365;\n    this.days.sort((a, b) => {\n      if (a < 0) a += daysInYear + 1;\n      if (b < 0) b += daysInYear + 1;\n      return a - b;\n    });\n\n    return 0;\n  }\n\n  expand_by_day(aYear) {\n\n    let days_list = [];\n    let tmp = this.last.clone();\n\n    tmp.year = aYear;\n    tmp.month = 1;\n    tmp.day = 1;\n    tmp.isDate = true;\n\n    let start_dow = tmp.dayOfWeek();\n\n    tmp.month = 12;\n    tmp.day = 31;\n    tmp.isDate = true;\n\n    let end_dow = tmp.dayOfWeek();\n    let end_year_day = tmp.dayOfYear();\n\n    for (let day of this.by_data.BYDAY) {\n      let parts = this.ruleDayOfWeek(day);\n      let pos = parts[0];\n      let dow = parts[1];\n\n      if (pos == 0) {\n        let tmp_start_doy = ((dow + 7 - start_dow) % 7) + 1;\n\n        for (let doy = tmp_start_doy; doy <= end_year_day; doy += 7) {\n          days_list.push(doy);\n        }\n\n      } else if (pos > 0) {\n        let first;\n        if (dow >= start_dow) {\n          first = dow - start_dow + 1;\n        } else {\n          first = dow - start_dow + 8;\n        }\n\n        days_list.push(first + (pos - 1) * 7);\n      } else {\n        let last;\n        pos = -pos;\n\n        if (dow <= end_dow) {\n          last = end_year_day - end_dow + dow;\n        } else {\n          last = end_year_day - end_dow + dow - 7;\n        }\n\n        days_list.push(last - (pos - 1) * 7);\n      }\n    }\n    return days_list;\n  }\n\n  is_day_in_byday(tt) {\n    if (this.by_data.BYDAY) {\n      for (let day of this.by_data.BYDAY) {\n        let parts = this.ruleDayOfWeek(day);\n        let pos = parts[0];\n        let dow = parts[1];\n        let this_dow = tt.dayOfWeek();\n\n        if ((pos == 0 && dow == this_dow) ||\n            (tt.nthWeekDay(dow, pos) == tt.day)) {\n          return 1;\n        }\n      }\n    }\n\n    return 0;\n  }\n\n  /**\n   * Checks if given value is in BYSETPOS.\n   *\n   * @private\n   * @param {Numeric} aPos position to check for.\n   * @return {Boolean} false unless BYSETPOS rules exist\n   *                   and the given value is present in rules.\n   */\n  check_set_position(aPos) {\n    if (this.has_by_data('BYSETPOS')) {\n      let idx = this.by_data.BYSETPOS.indexOf(aPos);\n      // negative numbers are not false-y\n      return idx !== -1;\n    }\n    return false;\n  }\n\n  sort_byday_rules(aRules) {\n    for (let i = 0; i < aRules.length; i++) {\n      for (let j = 0; j < i; j++) {\n        let one = this.ruleDayOfWeek(aRules[j], this.rule.wkst)[1];\n        let two = this.ruleDayOfWeek(aRules[i], this.rule.wkst)[1];\n\n        if (one > two) {\n          let tmp = aRules[i];\n          aRules[i] = aRules[j];\n          aRules[j] = tmp;\n        }\n      }\n    }\n  }\n\n  check_contract_restriction(aRuleType, v) {\n    let indexMapValue = RecurIterator._indexMap[aRuleType];\n    let ruleMapValue = RecurIterator._expandMap[this.rule.freq][indexMapValue];\n    let pass = false;\n\n    if (aRuleType in this.by_data &&\n        ruleMapValue == RecurIterator.CONTRACT) {\n\n      let ruleType = this.by_data[aRuleType];\n\n      for (let bydata of ruleType) {\n        if (bydata == v) {\n          pass = true;\n          break;\n        }\n      }\n    } else {\n      // Not a contracting byrule or has no data, test passes\n      pass = true;\n    }\n    return pass;\n  }\n\n  check_contracting_rules() {\n    let dow = this.last.dayOfWeek();\n    let weekNo = this.last.weekNumber(this.rule.wkst);\n    let doy = this.last.dayOfYear();\n\n    return (this.check_contract_restriction(\"BYSECOND\", this.last.second) &&\n            this.check_contract_restriction(\"BYMINUTE\", this.last.minute) &&\n            this.check_contract_restriction(\"BYHOUR\", this.last.hour) &&\n            this.check_contract_restriction(\"BYDAY\", Recur.numericDayToIcalDay(dow)) &&\n            this.check_contract_restriction(\"BYWEEKNO\", weekNo) &&\n            this.check_contract_restriction(\"BYMONTHDAY\", this.last.day) &&\n            this.check_contract_restriction(\"BYMONTH\", this.last.month) &&\n            this.check_contract_restriction(\"BYYEARDAY\", doy));\n  }\n\n  setup_defaults(aRuleType, req, deftime) {\n    let indexMapValue = RecurIterator._indexMap[aRuleType];\n    let ruleMapValue = RecurIterator._expandMap[this.rule.freq][indexMapValue];\n\n    if (ruleMapValue != RecurIterator.CONTRACT) {\n      if (!(aRuleType in this.by_data)) {\n        this.by_data[aRuleType] = [deftime];\n      }\n      if (this.rule.freq != req) {\n        return this.by_data[aRuleType][0];\n      }\n    }\n    return deftime;\n  }\n\n  /**\n   * Convert iterator into a serialize-able object.  Will preserve current\n   * iteration sequence to ensure the seamless continuation of the recurrence\n   * rule.\n   * @return {Object}\n   */\n  toJSON() {\n    let result = Object.create(null);\n\n    result.initialized = this.initialized;\n    result.rule = this.rule.toJSON();\n    result.dtstart = this.dtstart.toJSON();\n    result.by_data = this.by_data;\n    result.days = this.days;\n    result.last = this.last.toJSON();\n    result.by_indices = this.by_indices;\n    result.occurrence_number = this.occurrence_number;\n\n    return result;\n  }\n}\n\n/**\n * An error indicating that a recurrence rule is invalid and produces no\n * occurrences.\n *\n * @extends {Error}\n * @class\n */\nclass InvalidRecurrenceRuleError extends Error {\n  constructor() {\n    super(\"Recurrence rule has no valid occurrences\");\n  }\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n\n/**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n *\n * @ignore\n * @typedef {import(\"./types.js\").weekDay} weekDay\n * Imports the 'weekDay' type from the \"types.js\" module\n * @typedef {import(\"./types.js\").frequencyValues} frequencyValues\n * Imports the 'frequencyValues' type from the \"types.js\" module\n */\n\nconst VALID_DAY_NAMES = /^(SU|MO|TU|WE|TH|FR|SA)$/;\nconst VALID_BYDAY_PART = /^([+-])?(5[0-3]|[1-4][0-9]|[1-9])?(SU|MO|TU|WE|TH|FR|SA)$/;\nconst DOW_MAP = {\n  SU: Time.SUNDAY,\n  MO: Time.MONDAY,\n  TU: Time.TUESDAY,\n  WE: Time.WEDNESDAY,\n  TH: Time.THURSDAY,\n  FR: Time.FRIDAY,\n  SA: Time.SATURDAY\n};\n\nconst REVERSE_DOW_MAP = Object.fromEntries(Object.entries(DOW_MAP).map(entry => entry.reverse()));\n\nconst ALLOWED_FREQ = ['SECONDLY', 'MINUTELY', 'HOURLY',\n                      'DAILY', 'WEEKLY', 'MONTHLY', 'YEARLY'];\n\n/**\n * This class represents the \"recur\" value type, used for example by RRULE. It provides methods to\n * calculate occurrences among others.\n *\n * @memberof ICAL\n */\nclass Recur {\n  /**\n   * Creates a new {@link ICAL.Recur} instance from the passed string.\n   *\n   * @param {String} string         The string to parse\n   * @return {Recur}                The created recurrence instance\n   */\n  static fromString(string) {\n    let data = this._stringToData(string, false);\n    return new Recur(data);\n  }\n\n  /**\n   * Creates a new {@link ICAL.Recur} instance using members from the passed\n   * data object.\n   *\n   * @param {Object} aData                              An object with members of the recurrence\n   * @param {frequencyValues=} aData.freq               The frequency value\n   * @param {Number=} aData.interval                    The INTERVAL value\n   * @param {weekDay=} aData.wkst                       The week start value\n   * @param {Time=} aData.until                         The end of the recurrence set\n   * @param {Number=} aData.count                       The number of occurrences\n   * @param {Array.<Number>=} aData.bysecond            The seconds for the BYSECOND part\n   * @param {Array.<Number>=} aData.byminute            The minutes for the BYMINUTE part\n   * @param {Array.<Number>=} aData.byhour              The hours for the BYHOUR part\n   * @param {Array.<String>=} aData.byday               The BYDAY values\n   * @param {Array.<Number>=} aData.bymonthday          The days for the BYMONTHDAY part\n   * @param {Array.<Number>=} aData.byyearday           The days for the BYYEARDAY part\n   * @param {Array.<Number>=} aData.byweekno            The weeks for the BYWEEKNO part\n   * @param {Array.<Number>=} aData.bymonth             The month for the BYMONTH part\n   * @param {Array.<Number>=} aData.bysetpos            The positionals for the BYSETPOS part\n   */\n  static fromData(aData) {\n    return new Recur(aData);\n  }\n\n  /**\n   * Converts a recurrence string to a data object, suitable for the fromData\n   * method.\n   *\n   * @private\n   * @param {String} string     The string to parse\n   * @param {Boolean} fmtIcal   If true, the string is considered to be an\n   *                              iCalendar string\n   * @return {Recur}            The recurrence instance\n   */\n  static _stringToData(string, fmtIcal) {\n    let dict = Object.create(null);\n\n    // split is slower in FF but fast enough.\n    // v8 however this is faster then manual split?\n    let values = string.split(';');\n    let len = values.length;\n\n    for (let i = 0; i < len; i++) {\n      let parts = values[i].split('=');\n      let ucname = parts[0].toUpperCase();\n      let lcname = parts[0].toLowerCase();\n      let name = (fmtIcal ? lcname : ucname);\n      let value = parts[1];\n\n      if (ucname in partDesign) {\n        let partArr = value.split(',');\n        let partSet = new Set();\n\n        for (let part of partArr) {\n          partSet.add(partDesign[ucname](part));\n        }\n        partArr = [...partSet];\n\n        dict[name] = (partArr.length == 1 ? partArr[0] : partArr);\n      } else if (ucname in optionDesign) {\n        optionDesign[ucname](value, dict, fmtIcal);\n      } else {\n        // Don't swallow unknown values. Just set them as they are.\n        dict[lcname] = value;\n      }\n    }\n\n    return dict;\n  }\n\n  /**\n   * Convert an ical representation of a day (SU, MO, etc..)\n   * into a numeric value of that day.\n   *\n   * @param {String} string     The iCalendar day name\n   * @param {weekDay=} aWeekStart\n   *        The week start weekday, defaults to SUNDAY\n   * @return {Number}           Numeric value of given day\n   */\n  static icalDayToNumericDay(string, aWeekStart) {\n    //XXX: this is here so we can deal\n    //     with possibly invalid string values.\n    let firstDow = aWeekStart || Time.SUNDAY;\n    return ((DOW_MAP[string] - firstDow + 7) % 7) + 1;\n  }\n\n  /**\n   * Convert a numeric day value into its ical representation (SU, MO, etc..)\n   *\n   * @param {Number} num        Numeric value of given day\n   * @param {weekDay=} aWeekStart\n   *        The week start weekday, defaults to SUNDAY\n   * @return {String}           The ICAL day value, e.g SU,MO,...\n   */\n  static numericDayToIcalDay(num, aWeekStart) {\n    //XXX: this is here so we can deal with possibly invalid number values.\n    //     Also, this allows consistent mapping between day numbers and day\n    //     names for external users.\n    let firstDow = aWeekStart || Time.SUNDAY;\n    let dow = (num + firstDow - Time.SUNDAY);\n    if (dow > 7) {\n      dow -= 7;\n    }\n    return REVERSE_DOW_MAP[dow];\n  }\n\n  /**\n   * Create a new instance of the Recur class.\n   *\n   * @param {Object} data                               An object with members of the recurrence\n   * @param {frequencyValues=} data.freq                The frequency value\n   * @param {Number=} data.interval                     The INTERVAL value\n   * @param {weekDay=} data.wkst                        The week start value\n   * @param {Time=} data.until                          The end of the recurrence set\n   * @param {Number=} data.count                        The number of occurrences\n   * @param {Array.<Number>=} data.bysecond             The seconds for the BYSECOND part\n   * @param {Array.<Number>=} data.byminute             The minutes for the BYMINUTE part\n   * @param {Array.<Number>=} data.byhour               The hours for the BYHOUR part\n   * @param {Array.<String>=} data.byday                The BYDAY values\n   * @param {Array.<Number>=} data.bymonthday           The days for the BYMONTHDAY part\n   * @param {Array.<Number>=} data.byyearday            The days for the BYYEARDAY part\n   * @param {Array.<Number>=} data.byweekno             The weeks for the BYWEEKNO part\n   * @param {Array.<Number>=} data.bymonth              The month for the BYMONTH part\n   * @param {Array.<Number>=} data.bysetpos             The positionals for the BYSETPOS part\n   */\n  constructor(data) {\n    this.wrappedJSObject = this;\n    this.parts = {};\n\n    if (data && typeof(data) === 'object') {\n      this.fromData(data);\n    }\n  }\n\n  /**\n   * An object holding the BY-parts of the recurrence rule\n   * @memberof ICAL.Recur\n   * @typedef {Object} byParts\n   * @property {Array.<Number>=} BYSECOND            The seconds for the BYSECOND part\n   * @property {Array.<Number>=} BYMINUTE            The minutes for the BYMINUTE part\n   * @property {Array.<Number>=} BYHOUR              The hours for the BYHOUR part\n   * @property {Array.<String>=} BYDAY               The BYDAY values\n   * @property {Array.<Number>=} BYMONTHDAY          The days for the BYMONTHDAY part\n   * @property {Array.<Number>=} BYYEARDAY           The days for the BYYEARDAY part\n   * @property {Array.<Number>=} BYWEEKNO            The weeks for the BYWEEKNO part\n   * @property {Array.<Number>=} BYMONTH             The month for the BYMONTH part\n   * @property {Array.<Number>=} BYSETPOS            The positionals for the BYSETPOS part\n   */\n\n  /**\n   * An object holding the BY-parts of the recurrence rule\n   * @type {byParts}\n   */\n  parts = null;\n\n  /**\n   * The interval value for the recurrence rule.\n   * @type {Number}\n   */\n  interval = 1;\n\n  /**\n   * The week start day\n   *\n   * @type {weekDay}\n   * @default ICAL.Time.MONDAY\n   */\n  wkst = Time.MONDAY;\n\n  /**\n   * The end of the recurrence\n   * @type {?Time}\n   */\n  until = null;\n\n  /**\n   * The maximum number of occurrences\n   * @type {?Number}\n   */\n  count = null;\n\n  /**\n   * The frequency value.\n   * @type {frequencyValues}\n   */\n  freq = null;\n\n  /**\n   * The class identifier.\n   * @constant\n   * @type {String}\n   * @default \"icalrecur\"\n   */\n  icalclass = \"icalrecur\";\n\n  /**\n   * The type name, to be used in the jCal object.\n   * @constant\n   * @type {String}\n   * @default \"recur\"\n   */\n  icaltype = \"recur\";\n\n  /**\n   * Create a new iterator for this recurrence rule. The passed start date\n   * must be the start date of the event, not the start of the range to\n   * search in.\n   *\n   * @example\n   * let recur = comp.getFirstPropertyValue('rrule');\n   * let dtstart = comp.getFirstPropertyValue('dtstart');\n   * let iter = recur.iterator(dtstart);\n   * for (let next = iter.next(); next; next = iter.next()) {\n   *   if (next.compare(rangeStart) < 0) {\n   *     continue;\n   *   }\n   *   console.log(next.toString());\n   * }\n   *\n   * @param {Time} aStart        The item's start date\n   * @return {RecurIterator}     The recurrence iterator\n   */\n  iterator(aStart) {\n    return new RecurIterator({\n      rule: this,\n      dtstart: aStart\n    });\n  }\n\n  /**\n   * Returns a clone of the recurrence object.\n   *\n   * @return {Recur}      The cloned object\n   */\n  clone() {\n    return new Recur(this.toJSON());\n  }\n\n  /**\n   * Checks if the current rule is finite, i.e. has a count or until part.\n   *\n   * @return {Boolean}        True, if the rule is finite\n   */\n  isFinite() {\n    return !!(this.count || this.until);\n  }\n\n  /**\n   * Checks if the current rule has a count part, and not limited by an until\n   * part.\n   *\n   * @return {Boolean}        True, if the rule is by count\n   */\n  isByCount() {\n    return !!(this.count && !this.until);\n  }\n\n  /**\n   * Adds a component (part) to the recurrence rule. This is not a component\n   * in the sense of {@link ICAL.Component}, but a part of the recurrence\n   * rule, i.e. BYMONTH.\n   *\n   * @param {String} aType            The name of the component part\n   * @param {Array|String} aValue     The component value\n   */\n  addComponent(aType, aValue) {\n    let ucname = aType.toUpperCase();\n    if (ucname in this.parts) {\n      this.parts[ucname].push(aValue);\n    } else {\n      this.parts[ucname] = [aValue];\n    }\n  }\n\n  /**\n   * Sets the component value for the given by-part.\n   *\n   * @param {String} aType        The component part name\n   * @param {Array} aValues       The component values\n   */\n  setComponent(aType, aValues) {\n    this.parts[aType.toUpperCase()] = aValues.slice();\n  }\n\n  /**\n   * Gets (a copy) of the requested component value.\n   *\n   * @param {String} aType        The component part name\n   * @return {Array}              The component part value\n   */\n  getComponent(aType) {\n    let ucname = aType.toUpperCase();\n    return (ucname in this.parts ? this.parts[ucname].slice() : []);\n  }\n\n  /**\n   * Retrieves the next occurrence after the given recurrence id. See the\n   * guide on {@tutorial terminology} for more details.\n   *\n   * NOTE: Currently, this method iterates all occurrences from the start\n   * date. It should not be called in a loop for performance reasons. If you\n   * would like to get more than one occurrence, you can iterate the\n   * occurrences manually, see the example on the\n   * {@link ICAL.Recur#iterator iterator} method.\n   *\n   * @param {Time} aStartTime        The start of the event series\n   * @param {Time} aRecurrenceId     The date of the last occurrence\n   * @return {Time}                  The next occurrence after\n   */\n  getNextOccurrence(aStartTime, aRecurrenceId) {\n    let iter = this.iterator(aStartTime);\n    let next;\n\n    do {\n      next = iter.next();\n    } while (next && next.compare(aRecurrenceId) <= 0);\n\n    if (next && aRecurrenceId.zone) {\n      next.zone = aRecurrenceId.zone;\n    }\n\n    return next;\n  }\n\n  /**\n   * Sets up the current instance using members from the passed data object.\n   *\n   * @param {Object} data                               An object with members of the recurrence\n   * @param {frequencyValues=} data.freq                The frequency value\n   * @param {Number=} data.interval                     The INTERVAL value\n   * @param {weekDay=} data.wkst                        The week start value\n   * @param {Time=} data.until                          The end of the recurrence set\n   * @param {Number=} data.count                        The number of occurrences\n   * @param {Array.<Number>=} data.bysecond             The seconds for the BYSECOND part\n   * @param {Array.<Number>=} data.byminute             The minutes for the BYMINUTE part\n   * @param {Array.<Number>=} data.byhour               The hours for the BYHOUR part\n   * @param {Array.<String>=} data.byday                The BYDAY values\n   * @param {Array.<Number>=} data.bymonthday           The days for the BYMONTHDAY part\n   * @param {Array.<Number>=} data.byyearday            The days for the BYYEARDAY part\n   * @param {Array.<Number>=} data.byweekno             The weeks for the BYWEEKNO part\n   * @param {Array.<Number>=} data.bymonth              The month for the BYMONTH part\n   * @param {Array.<Number>=} data.bysetpos             The positionals for the BYSETPOS part\n   */\n  fromData(data) {\n    for (let key in data) {\n      let uckey = key.toUpperCase();\n\n      if (uckey in partDesign) {\n        if (Array.isArray(data[key])) {\n          this.parts[uckey] = data[key];\n        } else {\n          this.parts[uckey] = [data[key]];\n        }\n      } else {\n        this[key] = data[key];\n      }\n    }\n\n    if (this.interval && typeof this.interval != \"number\") {\n      optionDesign.INTERVAL(this.interval, this);\n    }\n\n    if (this.wkst && typeof this.wkst != \"number\") {\n      this.wkst = Recur.icalDayToNumericDay(this.wkst);\n    }\n\n    if (this.until && !(this.until instanceof Time)) {\n      this.until = Time.fromString(this.until);\n    }\n  }\n\n  /**\n   * The jCal representation of this recurrence type.\n   * @return {Object}\n   */\n  toJSON() {\n    let res = Object.create(null);\n    res.freq = this.freq;\n\n    if (this.count) {\n      res.count = this.count;\n    }\n\n    if (this.interval > 1) {\n      res.interval = this.interval;\n    }\n\n    for (let [k, kparts] of Object.entries(this.parts)) {\n      if (Array.isArray(kparts) && kparts.length == 1) {\n        res[k.toLowerCase()] = kparts[0];\n      } else {\n        res[k.toLowerCase()] = clone(kparts);\n      }\n    }\n\n    if (this.until) {\n      res.until = this.until.toString();\n    }\n    if ('wkst' in this && this.wkst !== Time.DEFAULT_WEEK_START) {\n      res.wkst = Recur.numericDayToIcalDay(this.wkst);\n    }\n    return res;\n  }\n\n  /**\n   * The string representation of this recurrence rule.\n   * @return {String}\n   */\n  toString() {\n    // TODO retain order\n    let str = \"FREQ=\" + this.freq;\n    if (this.count) {\n      str += \";COUNT=\" + this.count;\n    }\n    if (this.interval > 1) {\n      str += \";INTERVAL=\" + this.interval;\n    }\n    for (let [k, v] of Object.entries(this.parts)) {\n      str += \";\" + k + \"=\" + v;\n    }\n    if (this.until) {\n      str += ';UNTIL=' + this.until.toICALString();\n    }\n    if ('wkst' in this && this.wkst !== Time.DEFAULT_WEEK_START) {\n      str += ';WKST=' + Recur.numericDayToIcalDay(this.wkst);\n    }\n    return str;\n  }\n}\n\nfunction parseNumericValue(type, min, max, value) {\n  let result = value;\n\n  if (value[0] === '+') {\n    result = value.slice(1);\n  }\n\n  result = strictParseInt(result);\n\n  if (min !== undefined && value < min) {\n    throw new Error(\n      type + ': invalid value \"' + value + '\" must be > ' + min\n    );\n  }\n\n  if (max !== undefined && value > max) {\n    throw new Error(\n      type + ': invalid value \"' + value + '\" must be < ' + min\n    );\n  }\n\n  return result;\n}\n\nconst optionDesign = {\n  FREQ: function(value, dict, fmtIcal) {\n    // yes this is actually equal or faster then regex.\n    // upside here is we can enumerate the valid values.\n    if (ALLOWED_FREQ.indexOf(value) !== -1) {\n      dict.freq = value;\n    } else {\n      throw new Error(\n        'invalid frequency \"' + value + '\" expected: \"' +\n        ALLOWED_FREQ.join(', ') + '\"'\n      );\n    }\n  },\n\n  COUNT: function(value, dict, fmtIcal) {\n    dict.count = strictParseInt(value);\n  },\n\n  INTERVAL: function(value, dict, fmtIcal) {\n    dict.interval = strictParseInt(value);\n    if (dict.interval < 1) {\n      // 0 or negative values are not allowed, some engines seem to generate\n      // it though. Assume 1 instead.\n      dict.interval = 1;\n    }\n  },\n\n  UNTIL: function(value, dict, fmtIcal) {\n    if (value.length > 10) {\n      dict.until = design.icalendar.value['date-time'].fromICAL(value);\n    } else {\n      dict.until = design.icalendar.value.date.fromICAL(value);\n    }\n    if (!fmtIcal) {\n      dict.until = Time.fromString(dict.until);\n    }\n  },\n\n  WKST: function(value, dict, fmtIcal) {\n    if (VALID_DAY_NAMES.test(value)) {\n      dict.wkst = Recur.icalDayToNumericDay(value);\n    } else {\n      throw new Error('invalid WKST value \"' + value + '\"');\n    }\n  }\n};\n\nconst partDesign = {\n  BYSECOND: parseNumericValue.bind(undefined, 'BYSECOND', 0, 60),\n  BYMINUTE: parseNumericValue.bind(undefined, 'BYMINUTE', 0, 59),\n  BYHOUR: parseNumericValue.bind(undefined, 'BYHOUR', 0, 23),\n  BYDAY: function(value) {\n    if (VALID_BYDAY_PART.test(value)) {\n      return value;\n    } else {\n      throw new Error('invalid BYDAY value \"' + value + '\"');\n    }\n  },\n  BYMONTHDAY: parseNumericValue.bind(undefined, 'BYMONTHDAY', -31, 31),\n  BYYEARDAY: parseNumericValue.bind(undefined, 'BYYEARDAY', -366, 366),\n  BYWEEKNO: parseNumericValue.bind(undefined, 'BYWEEKNO', -53, 53),\n  BYMONTH: parseNumericValue.bind(undefined, 'BYMONTH', 1, 12),\n  BYSETPOS: parseNumericValue.bind(undefined, 'BYSETPOS', -366, 366)\n};\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n\n/**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n * @ignore\n * @typedef {import(\"./types.js\").designSet} designSet\n * Imports the 'designSet' type from the \"types.js\" module\n */\n\n/** @module ICAL.design */\n\nconst FROM_ICAL_NEWLINE = /\\\\\\\\|\\\\;|\\\\,|\\\\[Nn]/g;\nconst TO_ICAL_NEWLINE = /\\\\|;|,|\\n/g;\nconst FROM_VCARD_NEWLINE = /\\\\\\\\|\\\\,|\\\\[Nn]/g;\nconst TO_VCARD_NEWLINE = /\\\\|,|\\n/g;\n\nfunction createTextType(fromNewline, toNewline) {\n  let result = {\n    matches: /.*/,\n\n    fromICAL: function(aValue, structuredEscape) {\n      return replaceNewline(aValue, fromNewline, structuredEscape);\n    },\n\n    toICAL: function(aValue, structuredEscape) {\n      let regEx = toNewline;\n      if (structuredEscape)\n         regEx = new RegExp(regEx.source + '|' + structuredEscape, regEx.flags);\n      return aValue.replace(regEx, function(str) {\n        switch (str) {\n        case \"\\\\\":\n          return \"\\\\\\\\\";\n        case \";\":\n          return \"\\\\;\";\n        case \",\":\n          return \"\\\\,\";\n        case \"\\n\":\n          return \"\\\\n\";\n        /* c8 ignore next 2 */\n        default:\n          return str;\n        }\n      });\n    }\n  };\n  return result;\n}\n\n// default types used multiple times\nconst DEFAULT_TYPE_TEXT = { defaultType: \"text\" };\nconst DEFAULT_TYPE_TEXT_MULTI = { defaultType: \"text\", multiValue: \",\" };\nconst DEFAULT_TYPE_TEXT_STRUCTURED = { defaultType: \"text\", structuredValue: \";\" };\nconst DEFAULT_TYPE_INTEGER = { defaultType: \"integer\" };\nconst DEFAULT_TYPE_DATETIME_DATE = { defaultType: \"date-time\", allowedTypes: [\"date-time\", \"date\"] };\nconst DEFAULT_TYPE_DATETIME = { defaultType: \"date-time\" };\nconst DEFAULT_TYPE_URI = { defaultType: \"uri\" };\nconst DEFAULT_TYPE_UTCOFFSET = { defaultType: \"utc-offset\" };\nconst DEFAULT_TYPE_RECUR = { defaultType: \"recur\" };\nconst DEFAULT_TYPE_DATE_ANDOR_TIME = { defaultType: \"date-and-or-time\", allowedTypes: [\"date-time\", \"date\", \"text\"] };\n\nfunction replaceNewlineReplace(string) {\n  switch (string) {\n    case \"\\\\\\\\\":\n      return \"\\\\\";\n    case \"\\\\;\":\n      return \";\";\n    case \"\\\\,\":\n      return \",\";\n    case \"\\\\n\":\n    case \"\\\\N\":\n      return \"\\n\";\n    /* c8 ignore next 2 */\n    default:\n      return string;\n  }\n}\n\nfunction replaceNewline(value, newline, structuredEscape) {\n  // avoid regex when possible.\n  if (value.indexOf('\\\\') === -1) {\n    return value;\n  }\n  if (structuredEscape)\n     newline = new RegExp(newline.source + '|\\\\\\\\' + structuredEscape, newline.flags);\n  return value.replace(newline, replaceNewlineReplace);\n}\n\nlet commonProperties = {\n  \"categories\": DEFAULT_TYPE_TEXT_MULTI,\n  \"url\": DEFAULT_TYPE_URI,\n  \"version\": DEFAULT_TYPE_TEXT,\n  \"uid\": DEFAULT_TYPE_TEXT\n};\n\nlet commonValues = {\n  \"boolean\": {\n    values: [\"TRUE\", \"FALSE\"],\n\n    fromICAL: function(aValue) {\n      switch (aValue) {\n        case 'TRUE':\n          return true;\n        case 'FALSE':\n          return false;\n        default:\n          //TODO: parser warning\n          return false;\n      }\n    },\n\n    toICAL: function(aValue) {\n      if (aValue) {\n        return 'TRUE';\n      }\n      return 'FALSE';\n    }\n\n  },\n  float: {\n    matches: /^[+-]?\\d+\\.\\d+$/,\n\n    fromICAL: function(aValue) {\n      let parsed = parseFloat(aValue);\n      if (isStrictlyNaN(parsed)) {\n        // TODO: parser warning\n        return 0.0;\n      }\n      return parsed;\n    },\n\n    toICAL: function(aValue) {\n      return String(aValue);\n    }\n  },\n  integer: {\n    fromICAL: function(aValue) {\n      let parsed = parseInt(aValue);\n      if (isStrictlyNaN(parsed)) {\n        return 0;\n      }\n      return parsed;\n    },\n\n    toICAL: function(aValue) {\n      return String(aValue);\n    }\n  },\n  \"utc-offset\": {\n    toICAL: function(aValue) {\n      if (aValue.length < 7) {\n        // no seconds\n        // -0500\n        return aValue.slice(0, 3) +\n               aValue.slice(4, 6);\n      } else {\n        // seconds\n        // -050000\n        return aValue.slice(0, 3) +\n               aValue.slice(4, 6) +\n               aValue.slice(7, 9);\n      }\n    },\n\n    fromICAL: function(aValue) {\n      if (aValue.length < 6) {\n        // no seconds\n        // -05:00\n        return aValue.slice(0, 3) + ':' +\n               aValue.slice(3, 5);\n      } else {\n        // seconds\n        // -05:00:00\n        return aValue.slice(0, 3) + ':' +\n               aValue.slice(3, 5) + ':' +\n               aValue.slice(5, 7);\n      }\n    },\n\n    decorate: function(aValue) {\n      return UtcOffset.fromString(aValue);\n    },\n\n    undecorate: function(aValue) {\n      return aValue.toString();\n    }\n  }\n};\n\nlet icalParams = {\n  // Although the syntax is DQUOTE uri DQUOTE, I don't think we should\n  // enforce anything aside from it being a valid content line.\n  //\n  // At least some params require - if multi values are used - DQUOTEs\n  // for each of its values - e.g. delegated-from=\"uri1\",\"uri2\"\n  // To indicate this, I introduced the new k/v pair\n  // multiValueSeparateDQuote: true\n  //\n  // \"ALTREP\": { ... },\n\n  // CN just wants a param-value\n  // \"CN\": { ... }\n\n  \"cutype\": {\n    values: [\"INDIVIDUAL\", \"GROUP\", \"RESOURCE\", \"ROOM\", \"UNKNOWN\"],\n    allowXName: true,\n    allowIanaToken: true\n  },\n\n  \"delegated-from\": {\n    valueType: \"cal-address\",\n    multiValue: \",\",\n    multiValueSeparateDQuote: true\n  },\n  \"delegated-to\": {\n    valueType: \"cal-address\",\n    multiValue: \",\",\n    multiValueSeparateDQuote: true\n  },\n  // \"DIR\": { ... }, // See ALTREP\n  \"encoding\": {\n    values: [\"8BIT\", \"BASE64\"]\n  },\n  // \"FMTTYPE\": { ... }, // See ALTREP\n  \"fbtype\": {\n    values: [\"FREE\", \"BUSY\", \"BUSY-UNAVAILABLE\", \"BUSY-TENTATIVE\"],\n    allowXName: true,\n    allowIanaToken: true\n  },\n  // \"LANGUAGE\": { ... }, // See ALTREP\n  \"member\": {\n    valueType: \"cal-address\",\n    multiValue: \",\",\n    multiValueSeparateDQuote: true\n  },\n  \"partstat\": {\n    // TODO These values are actually different per-component\n    values: [\"NEEDS-ACTION\", \"ACCEPTED\", \"DECLINED\", \"TENTATIVE\",\n             \"DELEGATED\", \"COMPLETED\", \"IN-PROCESS\"],\n    allowXName: true,\n    allowIanaToken: true\n  },\n  \"range\": {\n    values: [\"THISANDFUTURE\"]\n  },\n  \"related\": {\n    values: [\"START\", \"END\"]\n  },\n  \"reltype\": {\n    values: [\"PARENT\", \"CHILD\", \"SIBLING\"],\n    allowXName: true,\n    allowIanaToken: true\n  },\n  \"role\": {\n    values: [\"REQ-PARTICIPANT\", \"CHAIR\",\n             \"OPT-PARTICIPANT\", \"NON-PARTICIPANT\"],\n    allowXName: true,\n    allowIanaToken: true\n  },\n  \"rsvp\": {\n    values: [\"TRUE\", \"FALSE\"]\n  },\n  \"sent-by\": {\n    valueType: \"cal-address\"\n  },\n  \"tzid\": {\n    matches: /^\\//\n  },\n  \"value\": {\n    // since the value here is a 'type' lowercase is used.\n    values: [\"binary\", \"boolean\", \"cal-address\", \"date\", \"date-time\",\n             \"duration\", \"float\", \"integer\", \"period\", \"recur\", \"text\",\n             \"time\", \"uri\", \"utc-offset\"],\n    allowXName: true,\n    allowIanaToken: true\n  }\n};\n\n// When adding a value here, be sure to add it to the parameter types!\nconst icalValues = extend(commonValues, {\n  text: createTextType(FROM_ICAL_NEWLINE, TO_ICAL_NEWLINE),\n\n  uri: {\n    // TODO\n    /* ... */\n  },\n\n  \"binary\": {\n    decorate: function(aString) {\n      return Binary.fromString(aString);\n    },\n\n    undecorate: function(aBinary) {\n      return aBinary.toString();\n    }\n  },\n  \"cal-address\": {\n    // needs to be an uri\n  },\n  \"date\": {\n    decorate: function(aValue, aProp) {\n      if (design.strict) {\n        return Time.fromDateString(aValue, aProp);\n      } else {\n        return Time.fromString(aValue, aProp);\n      }\n    },\n\n    /**\n     * undecorates a time object.\n     */\n    undecorate: function(aValue) {\n      return aValue.toString();\n    },\n\n    fromICAL: function(aValue) {\n      // from: 20120901\n      // to: 2012-09-01\n      if (!design.strict && aValue.length >= 15) {\n        // This is probably a date-time, e.g. 20120901T130000Z\n        return icalValues[\"date-time\"].fromICAL(aValue);\n      } else {\n        return aValue.slice(0, 4) + '-' +\n               aValue.slice(4, 6) + '-' +\n               aValue.slice(6, 8);\n      }\n    },\n\n    toICAL: function(aValue) {\n      // from: 2012-09-01\n      // to: 20120901\n      let len = aValue.length;\n\n      if (len == 10) {\n        return aValue.slice(0, 4) +\n               aValue.slice(5, 7) +\n               aValue.slice(8, 10);\n      } else if (len >= 19) {\n        return icalValues[\"date-time\"].toICAL(aValue);\n      } else {\n        //TODO: serialize warning?\n        return aValue;\n      }\n\n    }\n  },\n  \"date-time\": {\n    fromICAL: function(aValue) {\n      // from: 20120901T130000\n      // to: 2012-09-01T13:00:00\n      if (!design.strict && aValue.length == 8) {\n        // This is probably a date, e.g. 20120901\n        return icalValues.date.fromICAL(aValue);\n      } else {\n        let result = aValue.slice(0, 4) + '-' +\n                     aValue.slice(4, 6) + '-' +\n                     aValue.slice(6, 8) + 'T' +\n                     aValue.slice(9, 11) + ':' +\n                     aValue.slice(11, 13) + ':' +\n                     aValue.slice(13, 15);\n\n        if (aValue[15] && aValue[15] === 'Z') {\n          result += 'Z';\n        }\n\n        return result;\n      }\n    },\n\n    toICAL: function(aValue) {\n      // from: 2012-09-01T13:00:00\n      // to: 20120901T130000\n      let len = aValue.length;\n\n      if (len == 10 && !design.strict) {\n        return icalValues.date.toICAL(aValue);\n      } else if (len >= 19) {\n        let result = aValue.slice(0, 4) +\n                     aValue.slice(5, 7) +\n                     // grab the (DDTHH) segment\n                     aValue.slice(8, 13) +\n                     // MM\n                     aValue.slice(14, 16) +\n                     // SS\n                     aValue.slice(17, 19);\n\n        if (aValue[19] && aValue[19] === 'Z') {\n          result += 'Z';\n        }\n        return result;\n      } else {\n        // TODO: error\n        return aValue;\n      }\n    },\n\n    decorate: function(aValue, aProp) {\n      if (design.strict) {\n        return Time.fromDateTimeString(aValue, aProp);\n      } else {\n        return Time.fromString(aValue, aProp);\n      }\n    },\n\n    undecorate: function(aValue) {\n      return aValue.toString();\n    }\n  },\n  duration: {\n    decorate: function(aValue) {\n      return Duration.fromString(aValue);\n    },\n    undecorate: function(aValue) {\n      return aValue.toString();\n    }\n  },\n  period: {\n    fromICAL: function(string) {\n      let parts = string.split('/');\n      parts[0] = icalValues['date-time'].fromICAL(parts[0]);\n\n      if (!Duration.isValueString(parts[1])) {\n        parts[1] = icalValues['date-time'].fromICAL(parts[1]);\n      }\n\n      return parts;\n    },\n\n    toICAL: function(parts) {\n      parts = parts.slice();\n      if (!design.strict && parts[0].length == 10) {\n        parts[0] = icalValues.date.toICAL(parts[0]);\n      } else {\n        parts[0] = icalValues['date-time'].toICAL(parts[0]);\n      }\n\n      if (!Duration.isValueString(parts[1])) {\n        if (!design.strict && parts[1].length == 10) {\n          parts[1] = icalValues.date.toICAL(parts[1]);\n        } else {\n          parts[1] = icalValues['date-time'].toICAL(parts[1]);\n        }\n      }\n\n      return parts.join(\"/\");\n    },\n\n    decorate: function(aValue, aProp) {\n      return Period.fromJSON(aValue, aProp, !design.strict);\n    },\n\n    undecorate: function(aValue) {\n      return aValue.toJSON();\n    }\n  },\n  recur: {\n    fromICAL: function(string) {\n      return Recur._stringToData(string, true);\n    },\n\n    toICAL: function(data) {\n      let str = \"\";\n      for (let [k, val] of Object.entries(data)) {\n        if (k == \"until\") {\n          if (val.length > 10) {\n            val = icalValues['date-time'].toICAL(val);\n          } else {\n            val = icalValues.date.toICAL(val);\n          }\n        } else if (k == \"wkst\") {\n          if (typeof val === 'number') {\n            val = Recur.numericDayToIcalDay(val);\n          }\n        } else if (Array.isArray(val)) {\n          val = val.join(\",\");\n        }\n        str += k.toUpperCase() + \"=\" + val + \";\";\n      }\n      return str.slice(0, Math.max(0, str.length - 1));\n    },\n\n    decorate: function decorate(aValue) {\n      return Recur.fromData(aValue);\n    },\n\n    undecorate: function(aRecur) {\n      return aRecur.toJSON();\n    }\n  },\n\n  time: {\n    fromICAL: function(aValue) {\n      // from: MMHHSS(Z)?\n      // to: HH:MM:SS(Z)?\n      if (aValue.length < 6) {\n        // TODO: parser exception?\n        return aValue;\n      }\n\n      // HH::MM::SSZ?\n      let result = aValue.slice(0, 2) + ':' +\n                   aValue.slice(2, 4) + ':' +\n                   aValue.slice(4, 6);\n\n      if (aValue[6] === 'Z') {\n        result += 'Z';\n      }\n\n      return result;\n    },\n\n    toICAL: function(aValue) {\n      // from: HH:MM:SS(Z)?\n      // to: MMHHSS(Z)?\n      if (aValue.length < 8) {\n        //TODO: error\n        return aValue;\n      }\n\n      let result = aValue.slice(0, 2) +\n                   aValue.slice(3, 5) +\n                   aValue.slice(6, 8);\n\n      if (aValue[8] === 'Z') {\n        result += 'Z';\n      }\n\n      return result;\n    }\n  }\n});\n\nlet icalProperties = extend(commonProperties, {\n\n  \"action\": DEFAULT_TYPE_TEXT,\n  \"attach\": { defaultType: \"uri\" },\n  \"attendee\": { defaultType: \"cal-address\" },\n  \"calscale\": DEFAULT_TYPE_TEXT,\n  \"class\": DEFAULT_TYPE_TEXT,\n  \"comment\": DEFAULT_TYPE_TEXT,\n  \"completed\": DEFAULT_TYPE_DATETIME,\n  \"contact\": DEFAULT_TYPE_TEXT,\n  \"created\": DEFAULT_TYPE_DATETIME,\n  \"description\": DEFAULT_TYPE_TEXT,\n  \"dtend\": DEFAULT_TYPE_DATETIME_DATE,\n  \"dtstamp\": DEFAULT_TYPE_DATETIME,\n  \"dtstart\": DEFAULT_TYPE_DATETIME_DATE,\n  \"due\": DEFAULT_TYPE_DATETIME_DATE,\n  \"duration\": { defaultType: \"duration\" },\n  \"exdate\": {\n    defaultType: \"date-time\",\n    allowedTypes: [\"date-time\", \"date\"],\n    multiValue: ','\n  },\n  \"exrule\": DEFAULT_TYPE_RECUR,\n  \"freebusy\": { defaultType: \"period\", multiValue: \",\" },\n  \"geo\": { defaultType: \"float\", structuredValue: \";\" },\n  \"last-modified\": DEFAULT_TYPE_DATETIME,\n  \"location\": DEFAULT_TYPE_TEXT,\n  \"method\": DEFAULT_TYPE_TEXT,\n  \"organizer\": { defaultType: \"cal-address\" },\n  \"percent-complete\": DEFAULT_TYPE_INTEGER,\n  \"priority\": DEFAULT_TYPE_INTEGER,\n  \"prodid\": DEFAULT_TYPE_TEXT,\n  \"related-to\": DEFAULT_TYPE_TEXT,\n  \"repeat\": DEFAULT_TYPE_INTEGER,\n  \"rdate\": {\n    defaultType: \"date-time\",\n    allowedTypes: [\"date-time\", \"date\", \"period\"],\n    multiValue: ',',\n    detectType: function(string) {\n      if (string.indexOf('/') !== -1) {\n        return 'period';\n      }\n      return (string.indexOf('T') === -1) ? 'date' : 'date-time';\n    }\n  },\n  \"recurrence-id\": DEFAULT_TYPE_DATETIME_DATE,\n  \"resources\": DEFAULT_TYPE_TEXT_MULTI,\n  \"request-status\": DEFAULT_TYPE_TEXT_STRUCTURED,\n  \"rrule\": DEFAULT_TYPE_RECUR,\n  \"sequence\": DEFAULT_TYPE_INTEGER,\n  \"status\": DEFAULT_TYPE_TEXT,\n  \"summary\": DEFAULT_TYPE_TEXT,\n  \"transp\": DEFAULT_TYPE_TEXT,\n  \"trigger\": { defaultType: \"duration\", allowedTypes: [\"duration\", \"date-time\"] },\n  \"tzoffsetfrom\": DEFAULT_TYPE_UTCOFFSET,\n  \"tzoffsetto\": DEFAULT_TYPE_UTCOFFSET,\n  \"tzurl\": DEFAULT_TYPE_URI,\n  \"tzid\": DEFAULT_TYPE_TEXT,\n  \"tzname\": DEFAULT_TYPE_TEXT\n});\n\n// When adding a value here, be sure to add it to the parameter types!\nconst vcardValues = extend(commonValues, {\n  text: createTextType(FROM_VCARD_NEWLINE, TO_VCARD_NEWLINE),\n  uri: createTextType(FROM_VCARD_NEWLINE, TO_VCARD_NEWLINE),\n\n  date: {\n    decorate: function(aValue) {\n      return VCardTime.fromDateAndOrTimeString(aValue, \"date\");\n    },\n    undecorate: function(aValue) {\n      return aValue.toString();\n    },\n    fromICAL: function(aValue) {\n      if (aValue.length == 8) {\n        return icalValues.date.fromICAL(aValue);\n      } else if (aValue[0] == '-' && aValue.length == 6) {\n        return aValue.slice(0, 4) + '-' + aValue.slice(4);\n      } else {\n        return aValue;\n      }\n    },\n    toICAL: function(aValue) {\n      if (aValue.length == 10) {\n        return icalValues.date.toICAL(aValue);\n      } else if (aValue[0] == '-' && aValue.length == 7) {\n        return aValue.slice(0, 4) + aValue.slice(5);\n      } else {\n        return aValue;\n      }\n    }\n  },\n\n  time: {\n    decorate: function(aValue) {\n      return VCardTime.fromDateAndOrTimeString(\"T\" + aValue, \"time\");\n    },\n    undecorate: function(aValue) {\n      return aValue.toString();\n    },\n    fromICAL: function(aValue) {\n      let splitzone = vcardValues.time._splitZone(aValue, true);\n      let zone = splitzone[0], value = splitzone[1];\n\n      //console.log(\"SPLIT: \",splitzone);\n\n      if (value.length == 6) {\n        value = value.slice(0, 2) + ':' +\n                value.slice(2, 4) + ':' +\n                value.slice(4, 6);\n      } else if (value.length == 4 && value[0] != '-') {\n        value = value.slice(0, 2) + ':' + value.slice(2, 4);\n      } else if (value.length == 5) {\n        value = value.slice(0, 3) + ':' + value.slice(3, 5);\n      }\n\n      if (zone.length == 5 && (zone[0] == '-' || zone[0] == '+')) {\n        zone = zone.slice(0, 3) + ':' + zone.slice(3);\n      }\n\n      return value + zone;\n    },\n\n    toICAL: function(aValue) {\n      let splitzone = vcardValues.time._splitZone(aValue);\n      let zone = splitzone[0], value = splitzone[1];\n\n      if (value.length == 8) {\n        value = value.slice(0, 2) +\n                value.slice(3, 5) +\n                value.slice(6, 8);\n      } else if (value.length == 5 && value[0] != '-') {\n        value = value.slice(0, 2) + value.slice(3, 5);\n      } else if (value.length == 6) {\n        value = value.slice(0, 3) + value.slice(4, 6);\n      }\n\n      if (zone.length == 6 && (zone[0] == '-' || zone[0] == '+')) {\n        zone = zone.slice(0, 3) + zone.slice(4);\n      }\n\n      return value + zone;\n    },\n\n    _splitZone: function(aValue, isFromIcal) {\n      let lastChar = aValue.length - 1;\n      let signChar = aValue.length - (isFromIcal ? 5 : 6);\n      let sign = aValue[signChar];\n      let zone, value;\n\n      if (aValue[lastChar] == 'Z') {\n        zone = aValue[lastChar];\n        value = aValue.slice(0, Math.max(0, lastChar));\n      } else if (aValue.length > 6 && (sign == '-' || sign == '+')) {\n        zone = aValue.slice(signChar);\n        value = aValue.slice(0, Math.max(0, signChar));\n      } else {\n        zone = \"\";\n        value = aValue;\n      }\n\n      return [zone, value];\n    }\n  },\n\n  \"date-time\": {\n    decorate: function(aValue) {\n      return VCardTime.fromDateAndOrTimeString(aValue, \"date-time\");\n    },\n\n    undecorate: function(aValue) {\n      return aValue.toString();\n    },\n\n    fromICAL: function(aValue) {\n      return vcardValues['date-and-or-time'].fromICAL(aValue);\n    },\n\n    toICAL: function(aValue) {\n      return vcardValues['date-and-or-time'].toICAL(aValue);\n    }\n  },\n\n  \"date-and-or-time\": {\n    decorate: function(aValue) {\n      return VCardTime.fromDateAndOrTimeString(aValue, \"date-and-or-time\");\n    },\n\n    undecorate: function(aValue) {\n      return aValue.toString();\n    },\n\n    fromICAL: function(aValue) {\n      let parts = aValue.split('T');\n      return (parts[0] ? vcardValues.date.fromICAL(parts[0]) : '') +\n             (parts[1] ? 'T' + vcardValues.time.fromICAL(parts[1]) : '');\n    },\n\n    toICAL: function(aValue) {\n      let parts = aValue.split('T');\n      return vcardValues.date.toICAL(parts[0]) +\n             (parts[1] ? 'T' + vcardValues.time.toICAL(parts[1]) : '');\n\n    }\n  },\n  timestamp: icalValues['date-time'],\n  \"language-tag\": {\n    matches: /^[a-zA-Z0-9-]+$/ // Could go with a more strict regex here\n  },\n  \"phone-number\": {\n    fromICAL: function(aValue) {\n      return Array.from(aValue).filter(function(c) {\n          return c === '\\\\' ? undefined : c;\n        }).join('');\n    },\n    toICAL: function(aValue) {\n      return Array.from(aValue).map(function(c) {\n        return c === ',' || c === \";\" ? '\\\\' + c : c;\n      }).join('');\n    }\n  }\n});\n\nlet vcardParams = {\n  \"type\": {\n    valueType: \"text\",\n    multiValue: \",\"\n  },\n  \"value\": {\n    // since the value here is a 'type' lowercase is used.\n    values: [\"text\", \"uri\", \"date\", \"time\", \"date-time\", \"date-and-or-time\",\n             \"timestamp\", \"boolean\", \"integer\", \"float\", \"utc-offset\",\n             \"language-tag\"],\n    allowXName: true,\n    allowIanaToken: true\n  }\n};\n\nlet vcardProperties = extend(commonProperties, {\n  \"adr\": { defaultType: \"text\", structuredValue: \";\", multiValue: \",\" },\n  \"anniversary\": DEFAULT_TYPE_DATE_ANDOR_TIME,\n  \"bday\": DEFAULT_TYPE_DATE_ANDOR_TIME,\n  \"caladruri\": DEFAULT_TYPE_URI,\n  \"caluri\": DEFAULT_TYPE_URI,\n  \"clientpidmap\": DEFAULT_TYPE_TEXT_STRUCTURED,\n  \"email\": DEFAULT_TYPE_TEXT,\n  \"fburl\": DEFAULT_TYPE_URI,\n  \"fn\": DEFAULT_TYPE_TEXT,\n  \"gender\": DEFAULT_TYPE_TEXT_STRUCTURED,\n  \"geo\": DEFAULT_TYPE_URI,\n  \"impp\": DEFAULT_TYPE_URI,\n  \"key\": DEFAULT_TYPE_URI,\n  \"kind\": DEFAULT_TYPE_TEXT,\n  \"lang\": { defaultType: \"language-tag\" },\n  \"logo\": DEFAULT_TYPE_URI,\n  \"member\": DEFAULT_TYPE_URI,\n  \"n\": { defaultType: \"text\", structuredValue: \";\", multiValue: \",\" },\n  \"nickname\": DEFAULT_TYPE_TEXT_MULTI,\n  \"note\": DEFAULT_TYPE_TEXT,\n  \"org\": { defaultType: \"text\", structuredValue: \";\" },\n  \"photo\": DEFAULT_TYPE_URI,\n  \"related\": DEFAULT_TYPE_URI,\n  \"rev\": { defaultType: \"timestamp\" },\n  \"role\": DEFAULT_TYPE_TEXT,\n  \"sound\": DEFAULT_TYPE_URI,\n  \"source\": DEFAULT_TYPE_URI,\n  \"tel\": { defaultType: \"uri\", allowedTypes: [\"uri\", \"text\"] },\n  \"title\": DEFAULT_TYPE_TEXT,\n  \"tz\": { defaultType: \"text\", allowedTypes: [\"text\", \"utc-offset\", \"uri\"] },\n  \"xml\": DEFAULT_TYPE_TEXT\n});\n\nlet vcard3Values = extend(commonValues, {\n  binary: icalValues.binary,\n  date: vcardValues.date,\n  \"date-time\": vcardValues[\"date-time\"],\n  \"phone-number\": vcardValues[\"phone-number\"],\n  uri: icalValues.uri,\n  text: vcardValues.text,\n  time: icalValues.time,\n  vcard: icalValues.text,\n  \"utc-offset\": {\n    toICAL: function(aValue) {\n      return aValue.slice(0, 7);\n    },\n\n    fromICAL: function(aValue) {\n      return aValue.slice(0, 7);\n    },\n\n    decorate: function(aValue) {\n      return UtcOffset.fromString(aValue);\n    },\n\n    undecorate: function(aValue) {\n      return aValue.toString();\n    }\n  }\n});\n\nlet vcard3Params = {\n  \"type\": {\n    valueType: \"text\",\n    multiValue: \",\"\n  },\n  \"value\": {\n    // since the value here is a 'type' lowercase is used.\n    values: [\"text\", \"uri\", \"date\", \"date-time\", \"phone-number\", \"time\",\n             \"boolean\", \"integer\", \"float\", \"utc-offset\", \"vcard\", \"binary\"],\n    allowXName: true,\n    allowIanaToken: true\n  }\n};\n\nlet vcard3Properties = extend(commonProperties, {\n  fn: DEFAULT_TYPE_TEXT,\n  n: { defaultType: \"text\", structuredValue: \";\", multiValue: \",\" },\n  nickname: DEFAULT_TYPE_TEXT_MULTI,\n  photo: { defaultType: \"binary\", allowedTypes: [\"binary\", \"uri\"] },\n  bday: {\n    defaultType: \"date-time\",\n    allowedTypes: [\"date-time\", \"date\"],\n    detectType: function(string) {\n      return (string.indexOf('T') === -1) ? 'date' : 'date-time';\n    }\n  },\n\n  adr: { defaultType: \"text\", structuredValue: \";\", multiValue: \",\" },\n  label: DEFAULT_TYPE_TEXT,\n\n  tel: { defaultType: \"phone-number\" },\n  email: DEFAULT_TYPE_TEXT,\n  mailer: DEFAULT_TYPE_TEXT,\n\n  tz: { defaultType: \"utc-offset\", allowedTypes: [\"utc-offset\", \"text\"] },\n  geo: { defaultType: \"float\", structuredValue: \";\" },\n\n  title: DEFAULT_TYPE_TEXT,\n  role: DEFAULT_TYPE_TEXT,\n  logo: { defaultType: \"binary\", allowedTypes: [\"binary\", \"uri\"] },\n  agent: { defaultType: \"vcard\", allowedTypes: [\"vcard\", \"text\", \"uri\"] },\n  org: DEFAULT_TYPE_TEXT_STRUCTURED,\n\n  note: DEFAULT_TYPE_TEXT_MULTI,\n  prodid: DEFAULT_TYPE_TEXT,\n  rev: {\n    defaultType: \"date-time\",\n    allowedTypes: [\"date-time\", \"date\"],\n    detectType: function(string) {\n      return (string.indexOf('T') === -1) ? 'date' : 'date-time';\n    }\n  },\n  \"sort-string\": DEFAULT_TYPE_TEXT,\n  sound: { defaultType: \"binary\", allowedTypes: [\"binary\", \"uri\"] },\n\n  class: DEFAULT_TYPE_TEXT,\n  key: { defaultType: \"binary\", allowedTypes: [\"binary\", \"text\"] }\n});\n\n/**\n * iCalendar design set\n * @type {designSet}\n */\nlet icalSet = {\n  name: \"ical\",\n  value: icalValues,\n  param: icalParams,\n  property: icalProperties,\n  propertyGroups: false\n};\n\n/**\n * vCard 4.0 design set\n * @type {designSet}\n */\nlet vcardSet = {\n  name: \"vcard4\",\n  value: vcardValues,\n  param: vcardParams,\n  property: vcardProperties,\n  propertyGroups: true\n};\n\n/**\n * vCard 3.0 design set\n * @type {designSet}\n */\nlet vcard3Set = {\n  name: \"vcard3\",\n  value: vcard3Values,\n  param: vcard3Params,\n  property: vcard3Properties,\n  propertyGroups: true\n};\n\n/**\n * The design data, used by the parser to determine types for properties and\n * other metadata needed to produce correct jCard/jCal data.\n *\n * @alias ICAL.design\n * @exports module:ICAL.design\n */\nconst design = {\n  /**\n   * Can be set to false to make the parser more lenient.\n   */\n  strict: true,\n\n  /**\n   * The default set for new properties and components if none is specified.\n   * @type {designSet}\n   */\n  defaultSet: icalSet,\n\n  /**\n   * The default type for unknown properties\n   * @type {String}\n   */\n  defaultType: 'unknown',\n\n  /**\n   * Holds the design set for known top-level components\n   *\n   * @type {Object}\n   * @property {designSet} vcard       vCard VCARD\n   * @property {designSet} vevent      iCalendar VEVENT\n   * @property {designSet} vtodo       iCalendar VTODO\n   * @property {designSet} vjournal    iCalendar VJOURNAL\n   * @property {designSet} valarm      iCalendar VALARM\n   * @property {designSet} vtimezone   iCalendar VTIMEZONE\n   * @property {designSet} daylight    iCalendar DAYLIGHT\n   * @property {designSet} standard    iCalendar STANDARD\n   *\n   * @example\n   * let propertyName = 'fn';\n   * let componentDesign = ICAL.design.components.vcard;\n   * let propertyDetails = componentDesign.property[propertyName];\n   * if (propertyDetails.defaultType == 'text') {\n   *   // Yep, sure is...\n   * }\n   */\n  components: {\n    vcard: vcardSet,\n    vcard3: vcard3Set,\n    vevent: icalSet,\n    vtodo: icalSet,\n    vjournal: icalSet,\n    valarm: icalSet,\n    vtimezone: icalSet,\n    daylight: icalSet,\n    standard: icalSet\n  },\n\n\n  /**\n   * The design set for iCalendar (rfc5545/rfc7265) components.\n   * @type {designSet}\n   */\n  icalendar: icalSet,\n\n  /**\n   * The design set for vCard (rfc6350/rfc7095) components.\n   * @type {designSet}\n   */\n  vcard: vcardSet,\n\n  /**\n   * The design set for vCard (rfc2425/rfc2426/rfc7095) components.\n   * @type {designSet}\n   */\n  vcard3: vcard3Set,\n\n  /**\n   * Gets the design set for the given component name.\n   *\n   * @param {String} componentName        The name of the component\n   * @return {designSet}      The design set for the component\n   */\n  getDesignSet: function(componentName) {\n    let isInDesign = componentName && componentName in design.components;\n    return isInDesign ? design.components[componentName] : design.defaultSet;\n  }\n};\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n\n/**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n *\n * @ignore\n * @typedef {import(\"./types.js\").designSet} designSet\n * Imports the 'designSet' type from the \"types.js\" module\n */\n\nconst LINE_ENDING = '\\r\\n';\nconst DEFAULT_VALUE_TYPE = 'unknown';\nconst RFC6868_REPLACE_MAP = { '\"': \"^'\", \"\\n\": \"^n\", \"^\": \"^^\" };\n\n/**\n * Convert a full jCal/jCard array into a iCalendar/vCard string.\n *\n * @function ICAL.stringify\n * @variation function\n * @param {Array} jCal    The jCal/jCard document\n * @return {String}       The stringified iCalendar/vCard document\n */\nfunction stringify(jCal) {\n  if (typeof jCal[0] == \"string\") {\n    // This is a single component\n    jCal = [jCal];\n  }\n\n  let i = 0;\n  let len = jCal.length;\n  let result = '';\n\n  for (; i < len; i++) {\n    result += stringify.component(jCal[i]) + LINE_ENDING;\n  }\n\n  return result;\n}\n\n/**\n * Converts an jCal component array into a ICAL string.\n * Recursive will resolve sub-components.\n *\n * Exact component/property order is not saved all\n * properties will come before subcomponents.\n *\n * @function ICAL.stringify.component\n * @param {Array} component\n *        jCal/jCard fragment of a component\n * @param {designSet} designSet\n *        The design data to use for this component\n * @return {String}       The iCalendar/vCard string\n */\nstringify.component = function(component, designSet) {\n  let name = component[0].toUpperCase();\n  let result = 'BEGIN:' + name + LINE_ENDING;\n\n  let props = component[1];\n  let propIdx = 0;\n  let propLen = props.length;\n\n  let designSetName = component[0];\n  // rfc6350 requires that in vCard 4.0 the first component is the VERSION\n  // component with as value 4.0, note that 3.0 does not have this requirement.\n  if (designSetName === 'vcard' && component[1].length > 0 &&\n          !(component[1][0][0] === \"version\" && component[1][0][3] === \"4.0\")) {\n    designSetName = \"vcard3\";\n  }\n  designSet = designSet || design.getDesignSet(designSetName);\n\n  for (; propIdx < propLen; propIdx++) {\n    result += stringify.property(props[propIdx], designSet) + LINE_ENDING;\n  }\n\n  // Ignore subcomponents if none exist, e.g. in vCard.\n  let comps = component[2] || [];\n  let compIdx = 0;\n  let compLen = comps.length;\n\n  for (; compIdx < compLen; compIdx++) {\n    result += stringify.component(comps[compIdx], designSet) + LINE_ENDING;\n  }\n\n  result += 'END:' + name;\n  return result;\n};\n\n/**\n * Converts a single jCal/jCard property to a iCalendar/vCard string.\n *\n * @function ICAL.stringify.property\n * @param {Array} property\n *        jCal/jCard property array\n * @param {designSet} designSet\n *        The design data to use for this property\n * @param {Boolean} noFold\n *        If true, the line is not folded\n * @return {String}       The iCalendar/vCard string\n */\nstringify.property = function(property, designSet, noFold) {\n  let name = property[0].toUpperCase();\n  let jsName = property[0];\n  let params = property[1];\n\n  if (!designSet) {\n    designSet = design.defaultSet;\n  }\n\n  let groupName = params.group;\n  let line;\n  if (designSet.propertyGroups && groupName) {\n    line = groupName.toUpperCase() + \".\" + name;\n  } else {\n    line = name;\n  }\n\n  for (let [paramName, value] of Object.entries(params)) {\n    if (designSet.propertyGroups && paramName == 'group') {\n      continue;\n    }\n\n    let paramDesign = designSet.param[paramName];\n    let multiValue = paramDesign && paramDesign.multiValue;\n    if (multiValue && Array.isArray(value)) {\n      value = value.map(function(val) {\n        val = stringify._rfc6868Unescape(val);\n        val = stringify.paramPropertyValue(val, paramDesign.multiValueSeparateDQuote);\n        return val;\n      });\n      value = stringify.multiValue(value, multiValue, \"unknown\", null, designSet);\n    } else {\n      value = stringify._rfc6868Unescape(value);\n      value = stringify.paramPropertyValue(value);\n    }\n\n    line += ';' + paramName.toUpperCase() + '=' + value;\n  }\n\n  if (property.length === 3) {\n    // If there are no values, we must assume a blank value\n    return line + ':';\n  }\n\n  let valueType = property[2];\n\n  let propDetails;\n  let multiValue = false;\n  let structuredValue = false;\n  let isDefault = false;\n\n  if (jsName in designSet.property) {\n    propDetails = designSet.property[jsName];\n\n    if ('multiValue' in propDetails) {\n      multiValue = propDetails.multiValue;\n    }\n\n    if (('structuredValue' in propDetails) && Array.isArray(property[3])) {\n      structuredValue = propDetails.structuredValue;\n    }\n\n    if ('defaultType' in propDetails) {\n      if (valueType === propDetails.defaultType) {\n        isDefault = true;\n      }\n    } else {\n      if (valueType === DEFAULT_VALUE_TYPE) {\n        isDefault = true;\n      }\n    }\n  } else {\n    if (valueType === DEFAULT_VALUE_TYPE) {\n      isDefault = true;\n    }\n  }\n\n  // push the VALUE property if type is not the default\n  // for the current property.\n  if (!isDefault) {\n    // value will never contain ;/:/, so we don't escape it here.\n    line += ';VALUE=' + valueType.toUpperCase();\n  }\n\n  line += ':';\n\n  if (multiValue && structuredValue) {\n    line += stringify.multiValue(\n      property[3], structuredValue, valueType, multiValue, designSet, structuredValue\n    );\n  } else if (multiValue) {\n    line += stringify.multiValue(\n      property.slice(3), multiValue, valueType, null, designSet, false\n    );\n  } else if (structuredValue) {\n    line += stringify.multiValue(\n      property[3], structuredValue, valueType, null, designSet, structuredValue\n    );\n  } else {\n    line += stringify.value(property[3], valueType, designSet, false);\n  }\n\n  return noFold ? line : foldline(line);\n};\n\n/**\n * Handles escaping of property values that may contain:\n *\n *    COLON (:), SEMICOLON (;), or COMMA (,)\n *\n * If any of the above are present the result is wrapped\n * in double quotes.\n *\n * @function ICAL.stringify.paramPropertyValue\n * @param {String} value      Raw property value\n * @param {boolean} force     If value should be escaped even when unnecessary\n * @return {String}           Given or escaped value when needed\n */\nstringify.paramPropertyValue = function(value, force) {\n  if (!force &&\n      (value.indexOf(',') === -1) &&\n      (value.indexOf(':') === -1) &&\n      (value.indexOf(';') === -1)) {\n\n    return value;\n  }\n\n  return '\"' + value + '\"';\n};\n\n/**\n * Converts an array of ical values into a single\n * string based on a type and a delimiter value (like \",\").\n *\n * @function ICAL.stringify.multiValue\n * @param {Array} values      List of values to convert\n * @param {String} delim      Used to join the values (\",\", \";\", \":\")\n * @param {String} type       Lowecase ical value type\n *        (like boolean, date-time, etc..)\n * @param {?String} innerMulti If set, each value will again be processed\n *        Used for structured values\n * @param {designSet} designSet\n *        The design data to use for this property\n *\n * @return {String}           iCalendar/vCard string for value\n */\nstringify.multiValue = function(values, delim, type, innerMulti, designSet, structuredValue) {\n  let result = '';\n  let len = values.length;\n  let i = 0;\n\n  for (; i < len; i++) {\n    if (innerMulti && Array.isArray(values[i])) {\n      result += stringify.multiValue(values[i], innerMulti, type, null, designSet, structuredValue);\n    } else {\n      result += stringify.value(values[i], type, designSet, structuredValue);\n    }\n\n    if (i !== (len - 1)) {\n      result += delim;\n    }\n  }\n\n  return result;\n};\n\n/**\n * Processes a single ical value runs the associated \"toICAL\" method from the\n * design value type if available to convert the value.\n *\n * @function ICAL.stringify.value\n * @param {String|Number} value       A formatted value\n * @param {String} type               Lowercase iCalendar/vCard value type\n *  (like boolean, date-time, etc..)\n * @return {String}                   iCalendar/vCard value for single value\n */\nstringify.value = function(value, type, designSet, structuredValue) {\n  if (type in designSet.value && 'toICAL' in designSet.value[type]) {\n    return designSet.value[type].toICAL(value, structuredValue);\n  }\n  return value;\n};\n\n/**\n * Internal helper for rfc6868. Exposing this on ICAL.stringify so that\n * hackers can disable the rfc6868 parsing if the really need to.\n *\n * @param {String} val        The value to unescape\n * @return {String}           The escaped value\n */\nstringify._rfc6868Unescape = function(val) {\n  return val.replace(/[\\n^\"]/g, function(x) {\n    return RFC6868_REPLACE_MAP[x];\n  });\n};\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\nconst NAME_INDEX$1 = 0;\nconst PROP_INDEX = 1;\nconst TYPE_INDEX = 2;\nconst VALUE_INDEX = 3;\n\n/**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n * @ignore\n * @typedef {import(\"./types.js\").designSet} designSet\n * Imports the 'designSet' type from the \"types.js\" module\n * @typedef {import(\"./types.js\").Geo} Geo\n * Imports the 'Geo' type from the \"types.js\" module\n */\n\n/**\n * Provides a layer on top of the raw jCal object for manipulating a single property, with its\n * parameters and value.\n *\n * @memberof ICAL\n */\nclass Property {\n  /**\n   * Create an {@link ICAL.Property} by parsing the passed iCalendar string.\n   *\n   * @param {String} str            The iCalendar string to parse\n   * @param {designSet=} designSet  The design data to use for this property\n   * @return {Property}             The created iCalendar property\n   */\n  static fromString(str, designSet) {\n    return new Property(parse.property(str, designSet));\n  }\n\n  /**\n   * Creates a new ICAL.Property instance.\n   *\n   * It is important to note that mutations done in the wrapper directly mutate the jCal object used\n   * to initialize.\n   *\n   * Can also be used to create new properties by passing the name of the property (as a String).\n   *\n   * @param {Array|String} jCal         Raw jCal representation OR the new name of the property\n   * @param {Component=} parent         Parent component\n   */\n  constructor(jCal, parent) {\n    this._parent = parent || null;\n\n    if (typeof(jCal) === 'string') {\n      // We are creating the property by name and need to detect the type\n      this.jCal = [jCal, {}, design.defaultType];\n      this.jCal[TYPE_INDEX] = this.getDefaultType();\n    } else {\n      this.jCal = jCal;\n    }\n    this._updateType();\n  }\n\n  /**\n   * The value type for this property\n   * @type {String}\n   */\n  get type() {\n    return this.jCal[TYPE_INDEX];\n  }\n\n  /**\n   * The name of this property, in lowercase.\n   * @type {String}\n   */\n  get name() {\n    return this.jCal[NAME_INDEX$1];\n  }\n\n  /**\n   * The parent component for this property.\n   * @type {Component}\n   */\n  get parent() {\n    return this._parent;\n  }\n\n  set parent(p) {\n    // Before setting the parent, check if the design set has changed. If it\n    // has, we later need to update the type if it was unknown before.\n    let designSetChanged = !this._parent || (p && p._designSet != this._parent._designSet);\n\n    this._parent = p;\n\n    if (this.type == design.defaultType && designSetChanged) {\n      this.jCal[TYPE_INDEX] = this.getDefaultType();\n      this._updateType();\n    }\n  }\n\n  /**\n   * The design set for this property, e.g. icalendar vs vcard\n   *\n   * @type {designSet}\n   * @private\n   */\n  get _designSet() {\n    return this.parent ? this.parent._designSet : design.defaultSet;\n  }\n\n  /**\n   * Updates the type metadata from the current jCal type and design set.\n   *\n   * @private\n   */\n  _updateType() {\n    let designSet = this._designSet;\n\n    if (this.type in designSet.value) {\n      if ('decorate' in designSet.value[this.type]) {\n        this.isDecorated = true;\n      } else {\n        this.isDecorated = false;\n      }\n\n      if (this.name in designSet.property) {\n        this.isMultiValue = ('multiValue' in designSet.property[this.name]);\n        this.isStructuredValue = ('structuredValue' in designSet.property[this.name]);\n      }\n    }\n  }\n\n  /**\n   * Hydrate a single value. The act of hydrating means turning the raw jCal\n   * value into a potentially wrapped object, for example {@link ICAL.Time}.\n   *\n   * @private\n   * @param {Number} index        The index of the value to hydrate\n   * @return {?Object}             The decorated value.\n   */\n  _hydrateValue(index) {\n    if (this._values && this._values[index]) {\n      return this._values[index];\n    }\n\n    // for the case where there is no value.\n    if (this.jCal.length <= (VALUE_INDEX + index)) {\n      return null;\n    }\n\n    if (this.isDecorated) {\n      if (!this._values) {\n        this._values = [];\n      }\n      return (this._values[index] = this._decorate(\n        this.jCal[VALUE_INDEX + index]\n      ));\n    } else {\n      return this.jCal[VALUE_INDEX + index];\n    }\n  }\n\n  /**\n   * Decorate a single value, returning its wrapped object. This is used by\n   * the hydrate function to actually wrap the value.\n   *\n   * @private\n   * @param {?} value         The value to decorate\n   * @return {Object}         The decorated value\n   */\n  _decorate(value) {\n    return this._designSet.value[this.type].decorate(value, this);\n  }\n\n  /**\n   * Undecorate a single value, returning its raw jCal data.\n   *\n   * @private\n   * @param {Object} value         The value to undecorate\n   * @return {?}                   The undecorated value\n   */\n  _undecorate(value) {\n    return this._designSet.value[this.type].undecorate(value, this);\n  }\n\n  /**\n   * Sets the value at the given index while also hydrating it. The passed\n   * value can either be a decorated or undecorated value.\n   *\n   * @private\n   * @param {?} value             The value to set\n   * @param {Number} index        The index to set it at\n   */\n  _setDecoratedValue(value, index) {\n    if (!this._values) {\n      this._values = [];\n    }\n\n    if (typeof(value) === 'object' && 'icaltype' in value) {\n      // decorated value\n      this.jCal[VALUE_INDEX + index] = this._undecorate(value);\n      this._values[index] = value;\n    } else {\n      // undecorated value\n      this.jCal[VALUE_INDEX + index] = value;\n      this._values[index] = this._decorate(value);\n    }\n  }\n\n  /**\n   * Gets a parameter on the property.\n   *\n   * @param {String}        name   Parameter name (lowercase)\n   * @return {Array|String}        Parameter value\n   */\n  getParameter(name) {\n    if (name in this.jCal[PROP_INDEX]) {\n      return this.jCal[PROP_INDEX][name];\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * Gets first parameter on the property.\n   *\n   * @param {String}        name   Parameter name (lowercase)\n   * @return {String}        Parameter value\n   */\n  getFirstParameter(name) {\n    let parameters = this.getParameter(name);\n\n    if (Array.isArray(parameters)) {\n      return parameters[0];\n    }\n\n    return parameters;\n  }\n\n  /**\n   * Sets a parameter on the property.\n   *\n   * @param {String}       name     The parameter name\n   * @param {Array|String} value    The parameter value\n   */\n  setParameter(name, value) {\n    let lcname = name.toLowerCase();\n    if (typeof value === \"string\" &&\n        lcname in this._designSet.param &&\n        'multiValue' in this._designSet.param[lcname]) {\n        value = [value];\n    }\n    this.jCal[PROP_INDEX][name] = value;\n  }\n\n  /**\n   * Removes a parameter\n   *\n   * @param {String} name     The parameter name\n   */\n  removeParameter(name) {\n    delete this.jCal[PROP_INDEX][name];\n  }\n\n  /**\n   * Get the default type based on this property's name.\n   *\n   * @return {String}     The default type for this property\n   */\n  getDefaultType() {\n    let name = this.jCal[NAME_INDEX$1];\n    let designSet = this._designSet;\n\n    if (name in designSet.property) {\n      let details = designSet.property[name];\n      if ('defaultType' in details) {\n        return details.defaultType;\n      }\n    }\n    return design.defaultType;\n  }\n\n  /**\n   * Sets type of property and clears out any existing values of the current\n   * type.\n   *\n   * @param {String} type     New iCAL type (see design.*.values)\n   */\n  resetType(type) {\n    this.removeAllValues();\n    this.jCal[TYPE_INDEX] = type;\n    this._updateType();\n  }\n\n  /**\n   * Finds the first property value.\n   *\n   * @return {Binary | Duration | Period |\n   * Recur | Time | UtcOffset | Geo | string | null}         First property value\n   */\n  getFirstValue() {\n    return this._hydrateValue(0);\n  }\n\n  /**\n   * Gets all values on the property.\n   *\n   * NOTE: this creates an array during each call.\n   *\n   * @return {Array}          List of values\n   */\n  getValues() {\n    let len = this.jCal.length - VALUE_INDEX;\n\n    if (len < 1) {\n      // it is possible for a property to have no value.\n      return [];\n    }\n\n    let i = 0;\n    let result = [];\n\n    for (; i < len; i++) {\n      result[i] = this._hydrateValue(i);\n    }\n\n    return result;\n  }\n\n  /**\n   * Removes all values from this property\n   */\n  removeAllValues() {\n    if (this._values) {\n      this._values.length = 0;\n    }\n    this.jCal.length = 3;\n  }\n\n  /**\n   * Sets the values of the property.  Will overwrite the existing values.\n   * This can only be used for multi-value properties.\n   *\n   * @param {Array} values    An array of values\n   */\n  setValues(values) {\n    if (!this.isMultiValue) {\n      throw new Error(\n        this.name + ': does not not support mulitValue.\\n' +\n        'override isMultiValue'\n      );\n    }\n\n    let len = values.length;\n    let i = 0;\n    this.removeAllValues();\n\n    if (len > 0 &&\n        typeof(values[0]) === 'object' &&\n        'icaltype' in values[0]) {\n      this.resetType(values[0].icaltype);\n    }\n\n    if (this.isDecorated) {\n      for (; i < len; i++) {\n        this._setDecoratedValue(values[i], i);\n      }\n    } else {\n      for (; i < len; i++) {\n        this.jCal[VALUE_INDEX + i] = values[i];\n      }\n    }\n  }\n\n  /**\n   * Sets the current value of the property. If this is a multi-value\n   * property, all other values will be removed.\n   *\n   * @param {String|Object} value     New property value.\n   */\n  setValue(value) {\n    this.removeAllValues();\n    if (typeof(value) === 'object' && 'icaltype' in value) {\n      this.resetType(value.icaltype);\n    }\n\n    if (this.isDecorated) {\n      this._setDecoratedValue(value, 0);\n    } else {\n      this.jCal[VALUE_INDEX] = value;\n    }\n  }\n\n  /**\n   * Returns the Object representation of this component. The returned object\n   * is a live jCal object and should be cloned if modified.\n   * @return {Object}\n   */\n  toJSON() {\n    return this.jCal;\n  }\n\n  /**\n   * The string representation of this component.\n   * @return {String}\n   */\n  toICALString() {\n    return stringify.property(\n      this.jCal, this._designSet, true\n    );\n  }\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n\n/**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n * @ignore\n * @typedef {import(\"./types.js\").designSet} designSet\n * Imports the 'designSet' type from the \"types.js\" module\n * @typedef {import(\"./types.js\").Geo} Geo\n * Imports the 'Geo' type from the \"types.js\" module\n */\n\nconst NAME_INDEX = 0;\nconst PROPERTY_INDEX = 1;\nconst COMPONENT_INDEX = 2;\n\nconst PROPERTY_NAME_INDEX = 0;\nconst PROPERTY_VALUE_INDEX = 3;\n\n/**\n * Wraps a jCal component, adding convenience methods to add, remove and update subcomponents and\n * properties.\n *\n * @memberof ICAL\n */\nclass Component {\n  /**\n   * Create an {@link ICAL.Component} by parsing the passed iCalendar string.\n   *\n   * @param {String} str        The iCalendar string to parse\n   */\n  static fromString(str) {\n    return new Component(parse.component(str));\n  }\n\n  /**\n   * Creates a new Component instance.\n   *\n   * @param {Array|String} jCal         Raw jCal component data OR name of new\n   *                                      component\n   * @param {Component=} parent     Parent component to associate\n   */\n  constructor(jCal, parent) {\n    if (typeof(jCal) === 'string') {\n      // jCal spec (name, properties, components)\n      jCal = [jCal, [], []];\n    }\n\n    // mostly for legacy reasons.\n    this.jCal = jCal;\n\n    this.parent = parent || null;\n\n    if (!this.parent && this.name === 'vcalendar') {\n      this._timezoneCache = new Map();\n    }\n  }\n\n  /**\n   * Hydrated properties are inserted into the _properties array at the same\n   * position as in the jCal array, so it is possible that the array contains\n   * undefined values for unhydrdated properties. To avoid iterating the\n   * array when checking if all properties have been hydrated, we save the\n   * count here.\n   *\n   * @type {Number}\n   * @private\n   */\n  _hydratedPropertyCount = 0;\n\n  /**\n   * The same count as for _hydratedPropertyCount, but for subcomponents\n   *\n   * @type {Number}\n   * @private\n   */\n  _hydratedComponentCount = 0;\n\n  /**\n   * A cache of hydrated time zone objects which may be used by consumers, keyed\n   * by time zone ID.\n   *\n   * @type {Map}\n   * @private\n   */\n  _timezoneCache = null;\n\n  /**\n   * @private\n   */\n  _components = null;\n\n  /**\n   * @private\n   */\n  _properties = null;\n\n  /**\n   * The name of this component\n   *\n   * @type {String}\n   */\n  get name() {\n    return this.jCal[NAME_INDEX];\n  }\n\n  /**\n   * The design set for this component, e.g. icalendar vs vcard\n   *\n   * @type {designSet}\n   * @private\n   */\n  get _designSet() {\n    let parentDesign = this.parent && this.parent._designSet;\n    if (!parentDesign && this.name == \"vcard\") {\n      // We can't decide on vcard3 vs vcard4 just based on the component name, the version number is\n      // in the version property. We also can't use hydrated properties here because it would lead\n      // to recursion, but the spec says that the version property needs to be the very first one.\n      let versionProp = this.jCal[PROPERTY_INDEX]?.[0];\n\n      if (versionProp && versionProp[PROPERTY_NAME_INDEX] == \"version\" && versionProp[PROPERTY_VALUE_INDEX] == \"3.0\") {\n        return design.getDesignSet(\"vcard3\");\n      }\n    }\n\n    return parentDesign || design.getDesignSet(this.name);\n  }\n\n  /**\n   * @private\n   */\n  _hydrateComponent(index) {\n    if (!this._components) {\n      this._components = [];\n      this._hydratedComponentCount = 0;\n    }\n\n    if (this._components[index]) {\n      return this._components[index];\n    }\n\n    let comp = new Component(\n      this.jCal[COMPONENT_INDEX][index],\n      this\n    );\n\n    this._hydratedComponentCount++;\n    return (this._components[index] = comp);\n  }\n\n  /**\n   * @private\n   */\n  _hydrateProperty(index) {\n    if (!this._properties) {\n      this._properties = [];\n      this._hydratedPropertyCount = 0;\n    }\n\n    if (this._properties[index]) {\n      return this._properties[index];\n    }\n\n    let prop = new Property(\n      this.jCal[PROPERTY_INDEX][index],\n      this\n    );\n\n    this._hydratedPropertyCount++;\n    return (this._properties[index] = prop);\n  }\n\n  /**\n   * Finds first sub component, optionally filtered by name.\n   *\n   * @param {String=} name        Optional name to filter by\n   * @return {?Component}     The found subcomponent\n   */\n  getFirstSubcomponent(name) {\n    if (name) {\n      let i = 0;\n      let comps = this.jCal[COMPONENT_INDEX];\n      let len = comps.length;\n\n      for (; i < len; i++) {\n        if (comps[i][NAME_INDEX] === name) {\n          let result = this._hydrateComponent(i);\n          return result;\n        }\n      }\n    } else {\n      if (this.jCal[COMPONENT_INDEX].length) {\n        return this._hydrateComponent(0);\n      }\n    }\n\n    // ensure we return a value (strict mode)\n    return null;\n  }\n\n  /**\n   * Finds all sub components, optionally filtering by name.\n   *\n   * @param {String=} name            Optional name to filter by\n   * @return {Component[]}       The found sub components\n   */\n  getAllSubcomponents(name) {\n    let jCalLen = this.jCal[COMPONENT_INDEX].length;\n    let i = 0;\n\n    if (name) {\n      let comps = this.jCal[COMPONENT_INDEX];\n      let result = [];\n\n      for (; i < jCalLen; i++) {\n        if (name === comps[i][NAME_INDEX]) {\n          result.push(\n            this._hydrateComponent(i)\n          );\n        }\n      }\n      return result;\n    } else {\n      if (!this._components ||\n          (this._hydratedComponentCount !== jCalLen)) {\n        for (; i < jCalLen; i++) {\n          this._hydrateComponent(i);\n        }\n      }\n\n      return this._components || [];\n    }\n  }\n\n  /**\n   * Returns true when a named property exists.\n   *\n   * @param {String} name     The property name\n   * @return {Boolean}        True, when property is found\n   */\n  hasProperty(name) {\n    let props = this.jCal[PROPERTY_INDEX];\n    let len = props.length;\n\n    let i = 0;\n    for (; i < len; i++) {\n      // 0 is property name\n      if (props[i][NAME_INDEX] === name) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Finds the first property, optionally with the given name.\n   *\n   * @param {String=} name        Lowercase property name\n   * @return {?Property}     The found property\n   */\n  getFirstProperty(name) {\n    if (name) {\n      let i = 0;\n      let props = this.jCal[PROPERTY_INDEX];\n      let len = props.length;\n\n      for (; i < len; i++) {\n        if (props[i][NAME_INDEX] === name) {\n          let result = this._hydrateProperty(i);\n          return result;\n        }\n      }\n    } else {\n      if (this.jCal[PROPERTY_INDEX].length) {\n        return this._hydrateProperty(0);\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns first property's value, if available.\n   *\n   * @param {String=} name                    Lowercase property name\n   * @return {Binary | Duration | Period |\n   * Recur | Time | UtcOffset | Geo | string | null}         The found property value.\n   */\n  getFirstPropertyValue(name) {\n    let prop = this.getFirstProperty(name);\n    if (prop) {\n      return prop.getFirstValue();\n    }\n\n    return null;\n  }\n\n  /**\n   * Get all properties in the component, optionally filtered by name.\n   *\n   * @param {String=} name        Lowercase property name\n   * @return {Property[]}    List of properties\n   */\n  getAllProperties(name) {\n    let jCalLen = this.jCal[PROPERTY_INDEX].length;\n    let i = 0;\n\n    if (name) {\n      let props = this.jCal[PROPERTY_INDEX];\n      let result = [];\n\n      for (; i < jCalLen; i++) {\n        if (name === props[i][NAME_INDEX]) {\n          result.push(\n            this._hydrateProperty(i)\n          );\n        }\n      }\n      return result;\n    } else {\n      if (!this._properties ||\n          (this._hydratedPropertyCount !== jCalLen)) {\n        for (; i < jCalLen; i++) {\n          this._hydrateProperty(i);\n        }\n      }\n\n      return this._properties || [];\n    }\n  }\n\n  /**\n   * @private\n   */\n  _removeObjectByIndex(jCalIndex, cache, index) {\n    cache = cache || [];\n    // remove cached version\n    if (cache[index]) {\n      let obj = cache[index];\n      if (\"parent\" in obj) {\n          obj.parent = null;\n      }\n    }\n\n    cache.splice(index, 1);\n\n    // remove it from the jCal\n    this.jCal[jCalIndex].splice(index, 1);\n  }\n\n  /**\n   * @private\n   */\n  _removeObject(jCalIndex, cache, nameOrObject) {\n    let i = 0;\n    let objects = this.jCal[jCalIndex];\n    let len = objects.length;\n    let cached = this[cache];\n\n    if (typeof(nameOrObject) === 'string') {\n      for (; i < len; i++) {\n        if (objects[i][NAME_INDEX] === nameOrObject) {\n          this._removeObjectByIndex(jCalIndex, cached, i);\n          return true;\n        }\n      }\n    } else if (cached) {\n      for (; i < len; i++) {\n        if (cached[i] && cached[i] === nameOrObject) {\n          this._removeObjectByIndex(jCalIndex, cached, i);\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @private\n   */\n  _removeAllObjects(jCalIndex, cache, name) {\n    let cached = this[cache];\n\n    // Unfortunately we have to run through all children to reset their\n    // parent property.\n    let objects = this.jCal[jCalIndex];\n    let i = objects.length - 1;\n\n    // descending search required because splice\n    // is used and will effect the indices.\n    for (; i >= 0; i--) {\n      if (!name || objects[i][NAME_INDEX] === name) {\n        this._removeObjectByIndex(jCalIndex, cached, i);\n      }\n    }\n  }\n\n  /**\n   * Adds a single sub component.\n   *\n   * @param {Component} component        The component to add\n   * @return {Component}                 The passed in component\n   */\n  addSubcomponent(component) {\n    if (!this._components) {\n      this._components = [];\n      this._hydratedComponentCount = 0;\n    }\n\n    if (component.parent) {\n      component.parent.removeSubcomponent(component);\n    }\n\n    let idx = this.jCal[COMPONENT_INDEX].push(component.jCal);\n    this._components[idx - 1] = component;\n    this._hydratedComponentCount++;\n    component.parent = this;\n    return component;\n  }\n\n  /**\n   * Removes a single component by name or the instance of a specific\n   * component.\n   *\n   * @param {Component|String} nameOrComp    Name of component, or component\n   * @return {Boolean}                            True when comp is removed\n   */\n  removeSubcomponent(nameOrComp) {\n    let removed = this._removeObject(COMPONENT_INDEX, '_components', nameOrComp);\n    if (removed) {\n      this._hydratedComponentCount--;\n    }\n    return removed;\n  }\n\n  /**\n   * Removes all components or (if given) all components by a particular\n   * name.\n   *\n   * @param {String=} name            Lowercase component name\n   */\n  removeAllSubcomponents(name) {\n    let removed = this._removeAllObjects(COMPONENT_INDEX, '_components', name);\n    this._hydratedComponentCount = 0;\n    return removed;\n  }\n\n  /**\n   * Adds an {@link ICAL.Property} to the component.\n   *\n   * @param {Property} property      The property to add\n   * @return {Property}              The passed in property\n   */\n  addProperty(property) {\n    if (!(property instanceof Property)) {\n      throw new TypeError('must be instance of ICAL.Property');\n    }\n\n    if (!this._properties) {\n      this._properties = [];\n      this._hydratedPropertyCount = 0;\n    }\n\n    if (property.parent) {\n      property.parent.removeProperty(property);\n    }\n\n    let idx = this.jCal[PROPERTY_INDEX].push(property.jCal);\n    this._properties[idx - 1] = property;\n    this._hydratedPropertyCount++;\n    property.parent = this;\n    return property;\n  }\n\n  /**\n   * Helper method to add a property with a value to the component.\n   *\n   * @param {String}               name         Property name to add\n   * @param {String|Number|Object} value        Property value\n   * @return {Property}                    The created property\n   */\n  addPropertyWithValue(name, value) {\n    let prop = new Property(name);\n    prop.setValue(value);\n\n    this.addProperty(prop);\n\n    return prop;\n  }\n\n  /**\n   * Helper method that will update or create a property of the given name\n   * and sets its value. If multiple properties with the given name exist,\n   * only the first is updated.\n   *\n   * @param {String}               name         Property name to update\n   * @param {String|Number|Object} value        Property value\n   * @return {Property}                    The created property\n   */\n  updatePropertyWithValue(name, value) {\n    let prop = this.getFirstProperty(name);\n\n    if (prop) {\n      prop.setValue(value);\n    } else {\n      prop = this.addPropertyWithValue(name, value);\n    }\n\n    return prop;\n  }\n\n  /**\n   * Removes a single property by name or the instance of the specific\n   * property.\n   *\n   * @param {String|Property} nameOrProp     Property name or instance to remove\n   * @return {Boolean}                            True, when deleted\n   */\n  removeProperty(nameOrProp) {\n    let removed = this._removeObject(PROPERTY_INDEX, '_properties', nameOrProp);\n    if (removed) {\n      this._hydratedPropertyCount--;\n    }\n    return removed;\n  }\n\n  /**\n   * Removes all properties associated with this component, optionally\n   * filtered by name.\n   *\n   * @param {String=} name        Lowercase property name\n   * @return {Boolean}            True, when deleted\n   */\n  removeAllProperties(name) {\n    let removed = this._removeAllObjects(PROPERTY_INDEX, '_properties', name);\n    this._hydratedPropertyCount = 0;\n    return removed;\n  }\n\n  /**\n   * Returns the Object representation of this component. The returned object\n   * is a live jCal object and should be cloned if modified.\n   * @return {Object}\n   */\n  toJSON() {\n    return this.jCal;\n  }\n\n  /**\n   * The string representation of this component.\n   * @return {String}\n   */\n  toString() {\n    return stringify.component(\n      this.jCal, this._designSet\n    );\n  }\n\n  /**\n   * Retrieve a time zone definition from the component tree, if any is present.\n   * If the tree contains no time zone definitions or the TZID cannot be\n   * matched, returns null.\n   *\n   * @param {String} tzid     The ID of the time zone to retrieve\n   * @return {Timezone}  The time zone corresponding to the ID, or null\n   */\n  getTimeZoneByID(tzid) {\n    // VTIMEZONE components can only appear as a child of the VCALENDAR\n    // component; walk the tree if we're not the root.\n    if (this.parent) {\n      return this.parent.getTimeZoneByID(tzid);\n    }\n\n    // If there is no time zone cache, we are probably parsing an incomplete\n    // file and will have no time zone definitions.\n    if (!this._timezoneCache) {\n      return null;\n    }\n\n    if (this._timezoneCache.has(tzid)) {\n      return this._timezoneCache.get(tzid);\n    }\n\n    // If the time zone is not already cached, hydrate it from the\n    // subcomponents.\n    const zones = this.getAllSubcomponents('vtimezone');\n    for (const zone of zones) {\n      if (zone.getFirstProperty('tzid').getFirstValue() === tzid) {\n        const hydratedZone = new Timezone({\n          component: zone,\n          tzid: tzid,\n        });\n\n        this._timezoneCache.set(tzid, hydratedZone);\n\n        return hydratedZone;\n      }\n    }\n\n    // Per the standard, we should always have a time zone defined in a file\n    // for any referenced TZID, but don't blow up if the file is invalid.\n    return null;\n  }\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n\n/**\n * Primary class for expanding recurring rules.  Can take multiple rrules, rdates, exdate(s) and\n * iterate (in order) over each next occurrence.\n *\n * Once initialized this class can also be serialized saved and continue iteration from the last\n * point.\n *\n * NOTE: it is intended that this class is to be used with {@link ICAL.Event} which handles recurrence\n * exceptions.\n *\n * @example\n * // assuming event is a parsed ical component\n * var event;\n *\n * var expand = new ICAL.RecurExpansion({\n *   component: event,\n *   dtstart: event.getFirstPropertyValue('dtstart')\n * });\n *\n * // remember there are infinite rules so it is a good idea to limit the scope of the iterations\n * // then resume later on.\n *\n * // next is always an ICAL.Time or null\n * var next;\n *\n * while (someCondition && (next = expand.next())) {\n *   // do something with next\n * }\n *\n * // save instance for later\n * var json = JSON.stringify(expand);\n *\n * //...\n *\n * // NOTE: if the component's properties have changed you will need to rebuild the class and start\n * // over. This only works when the component's recurrence info is the same.\n * var expand = new ICAL.RecurExpansion(JSON.parse(json));\n *\n * @memberof ICAL\n */\nclass RecurExpansion {\n  /**\n   * Creates a new ICAL.RecurExpansion instance.\n   *\n   * The options object can be filled with the specified initial values. It can also contain\n   * additional members, as a result of serializing a previous expansion state, as shown in the\n   * example.\n   *\n   * @param {Object} options\n   *        Recurrence expansion options\n   * @param {Time} options.dtstart\n   *        Start time of the event\n   * @param {Component=} options.component\n   *        Component for expansion, required if not resuming.\n   */\n  constructor(options) {\n    this.ruleDates = [];\n    this.exDates = [];\n    this.fromData(options);\n  }\n\n  /**\n   * True when iteration is fully completed.\n   * @type {Boolean}\n   */\n  complete = false;\n\n  /**\n   * Array of rrule iterators.\n   *\n   * @type {RecurIterator[]}\n   * @private\n   */\n  ruleIterators = null;\n\n  /**\n   * Array of rdate instances.\n   *\n   * @type {Time[]}\n   * @private\n   */\n  ruleDates = null;\n\n  /**\n   * Array of exdate instances.\n   *\n   * @type {Time[]}\n   * @private\n   */\n  exDates = null;\n\n  /**\n   * Current position in ruleDates array.\n   * @type {Number}\n   * @private\n   */\n  ruleDateInc = 0;\n\n  /**\n   * Current position in exDates array\n   * @type {Number}\n   * @private\n   */\n  exDateInc = 0;\n\n  /**\n   * Current negative date.\n   *\n   * @type {Time}\n   * @private\n   */\n  exDate = null;\n\n  /**\n   * Current additional date.\n   *\n   * @type {Time}\n   * @private\n   */\n  ruleDate = null;\n\n  /**\n   * Start date of recurring rules.\n   *\n   * @type {Time}\n   */\n  dtstart = null;\n\n  /**\n   * Last expanded time\n   *\n   * @type {Time}\n   */\n  last = null;\n\n  /**\n   * Initialize the recurrence expansion from the data object. The options\n   * object may also contain additional members, see the\n   * {@link ICAL.RecurExpansion constructor} for more details.\n   *\n   * @param {Object} options\n   *        Recurrence expansion options\n   * @param {Time} options.dtstart\n   *        Start time of the event\n   * @param {Component=} options.component\n   *        Component for expansion, required if not resuming.\n   */\n  fromData(options) {\n    let start = formatClassType(options.dtstart, Time);\n\n    if (!start) {\n      throw new Error('.dtstart (ICAL.Time) must be given');\n    } else {\n      this.dtstart = start;\n    }\n\n    if (options.component) {\n      this._init(options.component);\n    } else {\n      this.last = formatClassType(options.last, Time) || start.clone();\n\n      if (!options.ruleIterators) {\n        throw new Error('.ruleIterators or .component must be given');\n      }\n\n      this.ruleIterators = options.ruleIterators.map(function(item) {\n        return formatClassType(item, RecurIterator);\n      });\n\n      this.ruleDateInc = options.ruleDateInc;\n      this.exDateInc = options.exDateInc;\n\n      if (options.ruleDates) {\n        this.ruleDates = options.ruleDates.map(item => formatClassType(item, Time));\n        this.ruleDate = this.ruleDates[this.ruleDateInc];\n      }\n\n      if (options.exDates) {\n        this.exDates = options.exDates.map(item => formatClassType(item, Time));\n        this.exDate = this.exDates[this.exDateInc];\n      }\n\n      if (typeof(options.complete) !== 'undefined') {\n        this.complete = options.complete;\n      }\n    }\n  }\n\n  /**\n   * Compare two ICAL.Time objects.  When the second parameter is a DATE and the first parameter is\n   * DATE-TIME, strip the time and compare only the days.\n   *\n   * @private\n   * @param {Time} a   The one object to compare\n   * @param {Time} b   The other object to compare\n   */\n  _compare_special(a, b) {\n    if (!a.isDate && b.isDate)\n      return new Time({ year: a.year, month: a.month, day: a.day }).compare(b);\n    return a.compare(b);\n  }\n\n  /**\n   * Retrieve the next occurrence in the series.\n   * @return {Time}\n   */\n  next() {\n    let iter;\n    let next;\n    let compare;\n\n    let maxTries = 500;\n    let currentTry = 0;\n\n    while (true) {\n      if (currentTry++ > maxTries) {\n        throw new Error(\n          'max tries have occurred, rule may be impossible to fulfill.'\n        );\n      }\n\n      next = this.ruleDate;\n      iter = this._nextRecurrenceIter(this.last);\n\n      // no more matches\n      // because we increment the rule day or rule\n      // _after_ we choose a value this should be\n      // the only spot where we need to worry about the\n      // end of events.\n      if (!next && !iter) {\n        // there are no more iterators or rdates\n        this.complete = true;\n        break;\n      }\n\n      // no next rule day or recurrence rule is first.\n      if (!next || (iter && next.compare(iter.last) > 0)) {\n        // must be cloned, recur will reuse the time element.\n        next = iter.last.clone();\n        // move to next so we can continue\n        iter.next();\n      }\n\n      // if the ruleDate is still next increment it.\n      if (this.ruleDate === next) {\n        this._nextRuleDay();\n      }\n\n      this.last = next;\n\n      // check the negative rules\n      if (this.exDate) {\n        // EXDATE can be in DATE format, but DTSTART is in DATE-TIME format\n        compare = this._compare_special(this.last, this.exDate);\n\n        if (compare > 0) {\n          this._nextExDay();\n        }\n\n        // if the current rule is excluded skip it.\n        if (compare === 0) {\n          this._nextExDay();\n          continue;\n        }\n      }\n\n      //XXX: The spec states that after we resolve the final\n      //     list of dates we execute exdate this seems somewhat counter\n      //     intuitive to what I have seen most servers do so for now\n      //     I exclude based on the original date not the one that may\n      //     have been modified by the exception.\n      return this.last;\n    }\n  }\n\n  /**\n   * Converts object into a serialize-able format. This format can be passed\n   * back into the expansion to resume iteration.\n   * @return {Object}\n   */\n  toJSON() {\n    function toJSON(item) {\n      return item.toJSON();\n    }\n\n    let result = Object.create(null);\n    result.ruleIterators = this.ruleIterators.map(toJSON);\n\n    if (this.ruleDates) {\n      result.ruleDates = this.ruleDates.map(toJSON);\n    }\n\n    if (this.exDates) {\n      result.exDates = this.exDates.map(toJSON);\n    }\n\n    result.ruleDateInc = this.ruleDateInc;\n    result.exDateInc = this.exDateInc;\n    result.last = this.last.toJSON();\n    result.dtstart = this.dtstart.toJSON();\n    result.complete = this.complete;\n\n    return result;\n  }\n\n  /**\n   * Extract all dates from the properties in the given component. The\n   * properties will be filtered by the property name.\n   *\n   * @private\n   * @param {Component} component             The component to search in\n   * @param {String} propertyName             The property name to search for\n   * @return {Time[]}                         The extracted dates.\n   */\n  _extractDates(component, propertyName) {\n    let result = [];\n    let props = component.getAllProperties(propertyName);\n\n    for (let i = 0, len = props.length; i < len; i++) {\n      for (let prop of props[i].getValues()) {\n        let idx = binsearchInsert(\n          result,\n          prop,\n          (a, b) => a.compare(b)\n        );\n\n        // ordered insert\n        result.splice(idx, 0, prop);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Initialize the recurrence expansion.\n   *\n   * @private\n   * @param {Component} component    The component to initialize from.\n   */\n  _init(component) {\n    this.ruleIterators = [];\n\n    this.last = this.dtstart.clone();\n\n    // to provide api consistency non-recurring\n    // events can also use the iterator though it will\n    // only return a single time.\n    if (!component.hasProperty('rdate') &&\n        !component.hasProperty('rrule') &&\n        !component.hasProperty('recurrence-id')) {\n      this.ruleDate = this.last.clone();\n      this.complete = true;\n      return;\n    }\n\n    if (component.hasProperty('rdate')) {\n      this.ruleDates = this._extractDates(component, 'rdate');\n\n      // special hack for cases where first rdate is prior\n      // to the start date. We only check for the first rdate.\n      // This is mostly for google's crazy recurring date logic\n      // (contacts birthdays).\n      if ((this.ruleDates[0]) &&\n          (this.ruleDates[0].compare(this.dtstart) < 0)) {\n\n        this.ruleDateInc = 0;\n        this.last = this.ruleDates[0].clone();\n      } else {\n        this.ruleDateInc = binsearchInsert(\n          this.ruleDates,\n          this.last,\n          (a, b) => a.compare(b)\n        );\n      }\n\n      this.ruleDate = this.ruleDates[this.ruleDateInc];\n    }\n\n    if (component.hasProperty('rrule')) {\n      let rules = component.getAllProperties('rrule');\n      let i = 0;\n      let len = rules.length;\n\n      let rule;\n      let iter;\n\n      for (; i < len; i++) {\n        rule = rules[i].getFirstValue();\n        iter = rule.iterator(this.dtstart);\n        this.ruleIterators.push(iter);\n\n        // increment to the next occurrence so future\n        // calls to next return times beyond the initial iteration.\n        // XXX: I find this suspicious might be a bug?\n        iter.next();\n      }\n    }\n\n    if (component.hasProperty('exdate')) {\n      this.exDates = this._extractDates(component, 'exdate');\n      // if we have a .last day we increment the index to beyond it.\n      // When DTSTART is in DATE-TIME format, EXDATE is in DATE format and EXDATE is\n      // the date of DTSTART, _compare_special finds this out and compareTime fails.\n      this.exDateInc = binsearchInsert(\n        this.exDates,\n        this.last,\n        this._compare_special\n      );\n\n      this.exDate = this.exDates[this.exDateInc];\n    }\n  }\n\n  /**\n   * Advance to the next exdate\n   * @private\n   */\n  _nextExDay() {\n    this.exDate = this.exDates[++this.exDateInc];\n  }\n\n  /**\n   * Advance to the next rule date\n   * @private\n   */\n  _nextRuleDay() {\n    this.ruleDate = this.ruleDates[++this.ruleDateInc];\n  }\n\n  /**\n   * Find and return the recurrence rule with the most recent event and\n   * return it.\n   *\n   * @private\n   * @return {?RecurIterator}    Found iterator.\n   */\n  _nextRecurrenceIter() {\n    let iters = this.ruleIterators;\n\n    if (iters.length === 0) {\n      return null;\n    }\n\n    let len = iters.length;\n    let iter;\n    let iterTime;\n    let iterIdx = 0;\n    let chosenIter;\n\n    // loop through each iterator\n    for (; iterIdx < len; iterIdx++) {\n      iter = iters[iterIdx];\n      iterTime = iter.last;\n\n      // if iteration is complete\n      // then we must exclude it from\n      // the search and remove it.\n      if (iter.completed) {\n        len--;\n        if (iterIdx !== 0) {\n          iterIdx--;\n        }\n        iters.splice(iterIdx, 1);\n        continue;\n      }\n\n      // find the most recent possible choice\n      if (!chosenIter || chosenIter.last.compare(iterTime) > 0) {\n        // that iterator is saved\n        chosenIter = iter;\n      }\n    }\n\n    // the chosen iterator is returned but not mutated\n    // this iterator contains the most recent event.\n    return chosenIter;\n  }\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n\n/**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n * @ignore\n * @typedef {import(\"./types.js\").frequencyValues} frequencyValues\n * Imports the 'frequencyValues' type from the \"types.js\" module\n * @typedef {import(\"./types.js\").occurrenceDetails} occurrenceDetails\n * Imports the 'occurrenceDetails' type from the \"types.js\" module\n */\n\n/**\n * ICAL.js is organized into multiple layers. The bottom layer is a raw jCal\n * object, followed by the component/property layer. The highest level is the\n * event representation, which this class is part of. See the\n * {@tutorial layers} guide for more details.\n *\n * @memberof ICAL\n */\nclass Event {\n  /**\n   * Creates a new ICAL.Event instance.\n   *\n   * @param {Component=} component              The ICAL.Component to base this event on\n   * @param {Object} [options]                  Options for this event\n   * @param {Boolean=} options.strictExceptions  When true, will verify exceptions are related by\n   *                                              their UUID\n   * @param {Array<Component|Event>=} options.exceptions\n   *          Exceptions to this event, either as components or events. If not\n   *            specified exceptions will automatically be set in relation of\n   *            component's parent\n   */\n  constructor(component, options) {\n    if (!(component instanceof Component)) {\n      options = component;\n      component = null;\n    }\n\n    if (component) {\n      this.component = component;\n    } else {\n      this.component = new Component('vevent');\n    }\n\n    this._rangeExceptionCache = Object.create(null);\n    this.exceptions = Object.create(null);\n    this.rangeExceptions = [];\n\n    if (options && options.strictExceptions) {\n      this.strictExceptions = options.strictExceptions;\n    }\n\n    if (options && options.exceptions) {\n      options.exceptions.forEach(this.relateException, this);\n    } else if (this.component.parent && !this.isRecurrenceException()) {\n      this.component.parent.getAllSubcomponents('vevent').forEach(function(event) {\n        if (event.hasProperty('recurrence-id')) {\n          this.relateException(event);\n        }\n      }, this);\n    }\n  }\n\n\n  static THISANDFUTURE = 'THISANDFUTURE';\n\n  /**\n   * List of related event exceptions.\n   *\n   * @type {Event[]}\n   */\n  exceptions = null;\n\n  /**\n   * When true, will verify exceptions are related by their UUID.\n   *\n   * @type {Boolean}\n   */\n  strictExceptions = false;\n\n  /**\n   * Relates a given event exception to this object.  If the given component\n   * does not share the UID of this event it cannot be related and will throw\n   * an exception.\n   *\n   * If this component is an exception it cannot have other exceptions\n   * related to it.\n   *\n   * @param {Component|Event} obj       Component or event\n   */\n  relateException(obj) {\n    if (this.isRecurrenceException()) {\n      throw new Error('cannot relate exception to exceptions');\n    }\n\n    if (obj instanceof Component) {\n      obj = new Event(obj);\n    }\n\n    if (this.strictExceptions && obj.uid !== this.uid) {\n      throw new Error('attempted to relate unrelated exception');\n    }\n\n    let id = obj.recurrenceId.toString();\n\n    // we don't sort or manage exceptions directly\n    // here the recurrence expander handles that.\n    this.exceptions[id] = obj;\n\n    // index RANGE=THISANDFUTURE exceptions so we can\n    // look them up later in getOccurrenceDetails.\n    if (obj.modifiesFuture()) {\n      let item = [\n        obj.recurrenceId.toUnixTime(), id\n      ];\n\n      // we keep them sorted so we can find the nearest\n      // value later on...\n      let idx = binsearchInsert(\n        this.rangeExceptions,\n        item,\n        compareRangeException\n      );\n\n      this.rangeExceptions.splice(idx, 0, item);\n    }\n  }\n\n  /**\n   * Checks if this record is an exception and has the RANGE=THISANDFUTURE\n   * value.\n   *\n   * @return {Boolean}        True, when exception is within range\n   */\n  modifiesFuture() {\n    if (!this.component.hasProperty('recurrence-id')) {\n      return false;\n    }\n\n    let range = this.component.getFirstProperty('recurrence-id').getParameter('range');\n    return range === Event.THISANDFUTURE;\n  }\n\n  /**\n   * Finds the range exception nearest to the given date.\n   *\n   * @param {Time} time   usually an occurrence time of an event\n   * @return {?Event}     the related event/exception or null\n   */\n  findRangeException(time) {\n    if (!this.rangeExceptions.length) {\n      return null;\n    }\n\n    let utc = time.toUnixTime();\n    let idx = binsearchInsert(\n      this.rangeExceptions,\n      [utc],\n      compareRangeException\n    );\n\n    idx -= 1;\n\n    // occurs before\n    if (idx < 0) {\n      return null;\n    }\n\n    let rangeItem = this.rangeExceptions[idx];\n\n    /* c8 ignore next 4 */\n    if (utc < rangeItem[0]) {\n      // sanity check only\n      return null;\n    }\n\n    return rangeItem[1];\n  }\n\n  /**\n   * Returns the occurrence details based on its start time.  If the\n   * occurrence has an exception will return the details for that exception.\n   *\n   * NOTE: this method is intend to be used in conjunction\n   *       with the {@link ICAL.Event#iterator iterator} method.\n   *\n   * @param {Time} occurrence               time occurrence\n   * @return {occurrenceDetails}            Information about the occurrence\n   */\n  getOccurrenceDetails(occurrence) {\n    let id = occurrence.toString();\n    let utcId = occurrence.convertToZone(Timezone.utcTimezone).toString();\n    let item;\n    let result = {\n      //XXX: Clone?\n      recurrenceId: occurrence\n    };\n\n    if (id in this.exceptions) {\n      item = result.item = this.exceptions[id];\n      result.startDate = item.startDate;\n      result.endDate = item.endDate;\n      result.item = item;\n    } else if (utcId in this.exceptions) {\n      item = this.exceptions[utcId];\n      result.startDate = item.startDate;\n      result.endDate = item.endDate;\n      result.item = item;\n    } else {\n      // range exceptions (RANGE=THISANDFUTURE) have a\n      // lower priority then direct exceptions but\n      // must be accounted for first. Their item is\n      // always the first exception with the range prop.\n      let rangeExceptionId = this.findRangeException(\n        occurrence\n      );\n      let end;\n\n      if (rangeExceptionId) {\n        let exception = this.exceptions[rangeExceptionId];\n\n        // range exception must modify standard time\n        // by the difference (if any) in start/end times.\n        result.item = exception;\n\n        let startDiff = this._rangeExceptionCache[rangeExceptionId];\n\n        if (!startDiff) {\n          let original = exception.recurrenceId.clone();\n          let newStart = exception.startDate.clone();\n\n          // zones must be same otherwise subtract may be incorrect.\n          original.zone = newStart.zone;\n          startDiff = newStart.subtractDate(original);\n\n          this._rangeExceptionCache[rangeExceptionId] = startDiff;\n        }\n\n        let start = occurrence.clone();\n        start.zone = exception.startDate.zone;\n        start.addDuration(startDiff);\n\n        end = start.clone();\n        end.addDuration(exception.duration);\n\n        result.startDate = start;\n        result.endDate = end;\n      } else {\n        // no range exception standard expansion\n        end = occurrence.clone();\n        end.addDuration(this.duration);\n\n        result.endDate = end;\n        result.startDate = occurrence;\n        result.item = this;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Builds a recur expansion instance for a specific point in time (defaults\n   * to startDate).\n   *\n   * @param {Time=} startTime     Starting point for expansion\n   * @return {RecurExpansion}    Expansion object\n   */\n  iterator(startTime) {\n    return new RecurExpansion({\n      component: this.component,\n      dtstart: startTime || this.startDate\n    });\n  }\n\n  /**\n   * Checks if the event is recurring\n   *\n   * @return {Boolean}        True, if event is recurring\n   */\n  isRecurring() {\n    let comp = this.component;\n    return comp.hasProperty('rrule') || comp.hasProperty('rdate');\n  }\n\n  /**\n   * Checks if the event describes a recurrence exception. See\n   * {@tutorial terminology} for details.\n   *\n   * @return {Boolean}    True, if the event describes a recurrence exception\n   */\n  isRecurrenceException() {\n    return this.component.hasProperty('recurrence-id');\n  }\n\n  /**\n   * Returns the types of recurrences this event may have.\n   *\n   * Returned as an object with the following possible keys:\n   *\n   *    - YEARLY\n   *    - MONTHLY\n   *    - WEEKLY\n   *    - DAILY\n   *    - MINUTELY\n   *    - SECONDLY\n   *\n   * @return {Object.<frequencyValues, Boolean>}\n   *          Object of recurrence flags\n   */\n  getRecurrenceTypes() {\n    let rules = this.component.getAllProperties('rrule');\n    let i = 0;\n    let len = rules.length;\n    let result = Object.create(null);\n\n    for (; i < len; i++) {\n      let value = rules[i].getFirstValue();\n      result[value.freq] = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * The uid of this event\n   * @type {String}\n   */\n  get uid() {\n    return this._firstProp('uid');\n  }\n\n  set uid(value) {\n    this._setProp('uid', value);\n  }\n\n  /**\n   * The start date\n   * @type {Time}\n   */\n  get startDate() {\n    return this._firstProp('dtstart');\n  }\n\n  set startDate(value) {\n    this._setTime('dtstart', value);\n  }\n\n  /**\n   * The end date. This can be the result directly from the property, or the\n   * end date calculated from start date and duration. Setting the property\n   * will remove any duration properties.\n   * @type {Time}\n   */\n  get endDate() {\n    let endDate = this._firstProp('dtend');\n    if (!endDate) {\n        let duration = this._firstProp('duration');\n        endDate = this.startDate.clone();\n        if (duration) {\n            endDate.addDuration(duration);\n        } else if (endDate.isDate) {\n            endDate.day += 1;\n        }\n    }\n    return endDate;\n  }\n\n  set endDate(value) {\n    if (this.component.hasProperty('duration')) {\n      this.component.removeProperty('duration');\n    }\n    this._setTime('dtend', value);\n  }\n\n  /**\n   * The duration. This can be the result directly from the property, or the\n   * duration calculated from start date and end date. Setting the property\n   * will remove any `dtend` properties.\n   * @type {Duration}\n   */\n  get duration() {\n    let duration = this._firstProp('duration');\n    if (!duration) {\n      return this.endDate.subtractDateTz(this.startDate);\n    }\n    return duration;\n  }\n\n  set duration(value) {\n    if (this.component.hasProperty('dtend')) {\n      this.component.removeProperty('dtend');\n    }\n\n    this._setProp('duration', value);\n  }\n\n  /**\n   * The location of the event.\n   * @type {String}\n   */\n  get location() {\n    return this._firstProp('location');\n  }\n\n  set location(value) {\n    this._setProp('location', value);\n  }\n\n  /**\n   * The attendees in the event\n   * @type {Property[]}\n   */\n  get attendees() {\n    //XXX: This is way lame we should have a better\n    //     data structure for this later.\n    return this.component.getAllProperties('attendee');\n  }\n\n  /**\n   * The event summary\n   * @type {String}\n   */\n  get summary() {\n    return this._firstProp('summary');\n  }\n\n  set summary(value) {\n    this._setProp('summary', value);\n  }\n\n  /**\n   * The event description.\n   * @type {String}\n   */\n  get description() {\n    return this._firstProp('description');\n  }\n\n  set description(value) {\n    this._setProp('description', value);\n  }\n\n  /**\n   * The event color from [rfc7986](https://datatracker.ietf.org/doc/html/rfc7986)\n   * @type {String}\n   */\n  get color() {\n    return this._firstProp('color');\n  }\n\n  set color(value) {\n    this._setProp('color', value);\n  }\n\n  /**\n   * The organizer value as an uri. In most cases this is a mailto: uri, but\n   * it can also be something else, like urn:uuid:...\n   * @type {String}\n   */\n  get organizer() {\n    return this._firstProp('organizer');\n  }\n\n  set organizer(value) {\n    this._setProp('organizer', value);\n  }\n\n  /**\n   * The sequence value for this event. Used for scheduling\n   * see {@tutorial terminology}.\n   * @type {Number}\n   */\n  get sequence() {\n    return this._firstProp('sequence');\n  }\n\n  set sequence(value) {\n    this._setProp('sequence', value);\n  }\n\n  /**\n   * The recurrence id for this event. See {@tutorial terminology} for details.\n   * @type {Time}\n   */\n  get recurrenceId() {\n    return this._firstProp('recurrence-id');\n  }\n\n  set recurrenceId(value) {\n    this._setTime('recurrence-id', value);\n  }\n\n  /**\n   * Set/update a time property's value.\n   * This will also update the TZID of the property.\n   *\n   * TODO: this method handles the case where we are switching\n   * from a known timezone to an implied timezone (one without TZID).\n   * This does _not_ handle the case of moving between a known\n   *  (by TimezoneService) timezone to an unknown timezone...\n   *\n   * We will not add/remove/update the VTIMEZONE subcomponents\n   *  leading to invalid ICAL data...\n   * @private\n   * @param {String} propName     The property name\n   * @param {Time} time           The time to set\n   */\n  _setTime(propName, time) {\n    let prop = this.component.getFirstProperty(propName);\n\n    if (!prop) {\n      prop = new Property(propName);\n      this.component.addProperty(prop);\n    }\n\n    // utc and local don't get a tzid\n    if (\n      time.zone === Timezone.localTimezone ||\n      time.zone === Timezone.utcTimezone\n    ) {\n      // remove the tzid\n      prop.removeParameter('tzid');\n    } else {\n      prop.setParameter('tzid', time.zone.tzid);\n    }\n\n    prop.setValue(time);\n  }\n\n  _setProp(name, value) {\n    this.component.updatePropertyWithValue(name, value);\n  }\n\n  _firstProp(name) {\n    return this.component.getFirstPropertyValue(name);\n  }\n\n  /**\n   * The string representation of this event.\n   * @return {String}\n   */\n  toString() {\n    return this.component.toString();\n  }\n}\n\nfunction compareRangeException(a, b) {\n  if (a[0] > b[0]) return 1;\n  if (b[0] > a[0]) return -1;\n  return 0;\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n\n/**\n * The ComponentParser is used to process a String or jCal Object,\n * firing callbacks for various found components, as well as completion.\n *\n * @example\n * var options = {\n *   // when false no events will be emitted for type\n *   parseEvent: true,\n *   parseTimezone: true\n * };\n *\n * var parser = new ICAL.ComponentParser(options);\n *\n * parser.onevent(eventComponent) {\n *   //...\n * }\n *\n * // ontimezone, etc...\n *\n * parser.oncomplete = function() {\n *\n * };\n *\n * parser.process(stringOrComponent);\n *\n * @memberof ICAL\n */\nclass ComponentParser {\n  /**\n   * Creates a new ICAL.ComponentParser instance.\n   *\n   * @param {Object=} options                   Component parser options\n   * @param {Boolean} options.parseEvent        Whether events should be parsed\n   * @param {Boolean} options.parseTimezeone    Whether timezones should be parsed\n   */\n  constructor(options) {\n    if (typeof(options) === 'undefined') {\n      options = {};\n    }\n\n    for (let [key, value] of Object.entries(options)) {\n      this[key] = value;\n    }\n  }\n\n  /**\n   * When true, parse events\n   *\n   * @type {Boolean}\n   */\n  parseEvent = true;\n\n  /**\n   * When true, parse timezones\n   *\n   * @type {Boolean}\n   */\n  parseTimezone = true;\n\n\n  /* SAX like events here for reference */\n\n  /**\n   * Fired when parsing is complete\n   * @callback\n   */\n  oncomplete = /* c8 ignore next */ function() {};\n\n  /**\n   * Fired if an error occurs during parsing.\n   *\n   * @callback\n   * @param {Error} err details of error\n   */\n  onerror = /* c8 ignore next */ function(err) {};\n\n  /**\n   * Fired when a top level component (VTIMEZONE) is found\n   *\n   * @callback\n   * @param {Timezone} component     Timezone object\n   */\n  ontimezone = /* c8 ignore next */ function(component) {};\n\n  /**\n   * Fired when a top level component (VEVENT) is found.\n   *\n   * @callback\n   * @param {Event} component    Top level component\n   */\n  onevent = /* c8 ignore next */ function(component) {};\n\n  /**\n   * Process a string or parse ical object.  This function itself will return\n   * nothing but will start the parsing process.\n   *\n   * Events must be registered prior to calling this method.\n   *\n   * @param {Component|String|Object} ical      The component to process,\n   *        either in its final form, as a jCal Object, or string representation\n   */\n  process(ical) {\n    //TODO: this is sync now in the future we will have a incremental parser.\n    if (typeof(ical) === 'string') {\n      ical = parse(ical);\n    }\n\n    if (!(ical instanceof Component)) {\n      ical = new Component(ical);\n    }\n\n    let components = ical.getAllSubcomponents();\n    let i = 0;\n    let len = components.length;\n    let component;\n\n    for (; i < len; i++) {\n      component = components[i];\n\n      switch (component.name) {\n        case 'vtimezone':\n          if (this.parseTimezone) {\n            let tzid = component.getFirstPropertyValue('tzid');\n            if (tzid) {\n              this.ontimezone(new Timezone({\n                tzid: tzid,\n                component: component\n              }));\n            }\n          }\n          break;\n        case 'vevent':\n          if (this.parseEvent) {\n            this.onevent(new Event(component));\n          }\n          break;\n        default:\n          continue;\n      }\n    }\n\n    //XXX: ideally we should do a \"nextTick\" here\n    //     so in all cases this is actually async.\n    this.oncomplete();\n  }\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n\n/**\n * The main ICAL module. Provides access to everything else.\n *\n * @alias ICAL\n * @namespace ICAL\n * @property {ICAL.design} design\n * @property {ICAL.helpers} helpers\n */\nvar ICALmodule = {\n  /**\n   * The number of characters before iCalendar line folding should occur\n   * @type {Number}\n   * @default 75\n   */\n  foldLength: 75,\n\n  debug: false,\n\n  /**\n   * The character(s) to be used for a newline. The default value is provided by\n   * rfc5545.\n   * @type {String}\n   * @default \"\\r\\n\"\n   */\n  newLineChar: '\\r\\n',\n\n  Binary,\n  Component,\n  ComponentParser,\n  Duration,\n  Event,\n  Period,\n  Property,\n  Recur,\n  RecurExpansion,\n  RecurIterator,\n  Time,\n  Timezone,\n  TimezoneService,\n  UtcOffset,\n  VCardTime,\n\n  parse,\n  stringify,\n\n  design,\n  helpers\n};\n\nexport { ICALmodule as default };\n"],
  "mappings": "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",
  "names": ["day", "daysInYear", "multiValue", "zones"]
}
